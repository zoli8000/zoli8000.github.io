{"version":3,"file":"index-Du-nyWtZ.js","sources":["../../../src/language-decoder.ts","../../../src/language-encoder.ts","../../../src/languages/c64-chr.ts","../../../node_modules/@zoli8000/gb-consts/build/esm/allTokens.js","../../../node_modules/@zoli8000/gb-consts/build/esm/commands.js","../../../node_modules/@zoli8000/gb-consts/build/esm/dataTypes.js","../../../node_modules/@zoli8000/gb-consts/build/esm/fontCmdConsts.js","../../../node_modules/@zoli8000/gb-consts/build/esm/functions.js","../../../node_modules/@zoli8000/gb-consts/build/esm/postfixes.js","../../../node_modules/@zoli8000/gb-consts/build/esm/scrCmdConsts.js","../../../node_modules/@zoli8000/gb-consts/build/esm/scrCodes.js","../../../node_modules/@zoli8000/gb-consts/build/esm/sprCmdConsts.js","../../../node_modules/@zoli8000/gb-consts/build/esm/tokenProps.js","../../../node_modules/@zoli8000/gb-consts/build/esm/varIndexes.js","../../../src/languages/gb-consts.ts","../../../src/languages/gb-decoder.ts","../../../src/string-tokenizer.ts","../../../src/token-array.ts","../../../src/tokenizer.ts","../../../src/languages/gb-number-encoder.ts","../../../src/languages/gb-dim-encoder.ts","../../../src/special-bool.ts","../../../src/language-preprocessor.ts","../../../src/prettifier.ts","../../../src/token.ts","../../../src/tokenizer-settings.ts","../../../src/languages/gb-prettifier.ts","../../../src/languages/gb-tokenizer.ts","../../../src/languages/gb-preprocessor.ts","../../../src/languages/gb-var-encoder.ts","../../../src/languages/gb-encoder.ts","../../../src/parser.ts","../../../src/parser-settings.ts","../../../src/languages/gb-parser.ts","../../../src/languages/gb-model.ts","../../../src/languages/v2-consts.ts","../../../src/languages/v2-decoder.ts","../../../src/languages/v2-prettifier.ts","../../../src/languages/v2-tokenizer.ts","../../../src/languages/v2-encoder.ts","../../../src/languages/v2-parser.ts","../../../src/languages/v2-model.ts","../../../src/language-model.ts","../../../app.ts"],"sourcesContent":["export const enum DECODER_SCOPE {\n    scopeString,\n    scopeCommand,\n    scopeRem,\n    scopeArgs,\n}\n\nexport class LanguageDecoder {\n    static getTokensFromMemory(_memory: Record<string, any>, _startAddr: number) {}\n}\n","import { Token } from './token'\n\nexport type TokenEncoder = (token: Token) => number[]\n\nexport class LanguageEncoder {\n    /** Converts code as text to a byte array */\n    static encodeTextAsBytes(_text: string): number[] {\n        return [0]\n    }\n\n    static voidEncoder(_token: Token): number[] {\n        return []\n    }\n\n    static encodeTokens(array: any[], directives: any): number[] {\n        return []\n    }\n}\n","export class C64Chr {\n    static screenCodeToChar(screenCode: number, small: boolean = false): [string, boolean] {\n        if (small) {\n            return [\n                '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[£]↑← !\"#$%&\\'()*+,-./0123456789:;<=>?━♠│─▔▔▁▍▕╮╰╯└╲╱┌┐●▁♥▏╭╳○♣▕♦➕⡇|.. ▌▄‾▁▎▒▕⣤.▕┣▗┗┓▂┏┻┳┫▎▍▐‾▀▃.▖▝┛▘▚'[\n                    screenCode & 0x7f\n                ],\n                (screenCode & 0x80) > 0,\n            ]\n        } else {\n            return [\n                '@abcdefghijklmnopqrstuvwxyz[£]↑← !\"#$%&\\'()*+,-./0123456789:;<=>?━ABCDEFGHIJKLMNOPQRSTUVWXYZ➕⡇|π◥ ▌▄‾▁▎▒▕⣤◤▕┣▗┗┓▂┏┻┳┫▎▍▐‾▀▃⅃▖▝┛▘▚'[\n                    screenCode & 0x7f\n                ],\n                (screenCode & 0x80) > 0,\n            ]\n        }\n    }\n    static petsciiCodeToScreen(petsciiCode: number) {\n        let screenCode = 0\n\n        if (petsciiCode < 32) screenCode = petsciiCode + 128\n        else if (32 <= petsciiCode && petsciiCode < 64) screenCode = petsciiCode\n        else if (64 <= petsciiCode && petsciiCode < 96) screenCode = petsciiCode - 64\n        else if (96 <= petsciiCode && petsciiCode < 128) screenCode = petsciiCode - 32\n        else if (128 <= petsciiCode && petsciiCode < 160) screenCode = petsciiCode + 64\n        else if (160 <= petsciiCode && petsciiCode < 192) screenCode = petsciiCode - 64\n        else if (192 <= petsciiCode && petsciiCode < 224) screenCode = petsciiCode - 128\n        else if (224 <= petsciiCode && petsciiCode < 255) screenCode = petsciiCode - 128\n        else if (petsciiCode == 255) screenCode = 94\n\n        return screenCode\n    }\n\n    static textToPetscii(asciiCode: string): number {\n        let code = asciiCode.charCodeAt(0)\n\n        // PETSCII and ASCII has swapped upper and lower case\n        if ((0x41 <= code && code <= 0x5a) || (0x61 <= code && code <= 0x7a)) {\n            code ^= 0x20\n        }\n\n        return code\n    }\n\n    // ToDo: better converting statics!!!\n\n    static textToScreen(asciiCode: string): number {\n        const code = C64Chr.textToPetscii(asciiCode)\n        return C64Chr.petsciiCodeToScreen(code)\n    }\n\n    static petsciiCodeToChar(petsciiCode: number, small: boolean = false): [string, boolean] {\n        return C64Chr.screenCodeToChar(C64Chr.petsciiCodeToScreen(petsciiCode), small)\n    }\n\n    static screenCodeToEscaped(screenCode: number, small: boolean = false): [string, any] {\n        if (small) {\n            throw Error('Small character conversion not implemented!')\n        }\n        if (screenCode == 64 || screenCode >= 91) {\n            return ['code', screenCode]\n        } else {\n            return [\n                'chr',\n                '@abcdefghijklmnopqrstuvwxyz[£]↑← !\"#$%&\\'()*+,-./0123456789:;<=>?━ABCDEFGHIJKLMNOPQRSTUVWXYZ'[\n                    screenCode\n                ],\n            ]\n        }\n    }\n\n    static petsciiCodeToEscaped(petsciiCode: number, small: boolean = false): [string, any] {\n        const screenCode = C64Chr.petsciiCodeToScreen(petsciiCode)\n        const result = C64Chr.screenCodeToEscaped(screenCode, small)\n        if (result[0] == 'code') result[1] = petsciiCode\n\n        return result\n    }\n\n    static petsciiCodeToSafe(petsciiCode: number, small: boolean = false): string {\n        const [mode, val] = C64Chr.petsciiCodeToEscaped(petsciiCode, small)\n        if (mode == 'chr') return val\n        return '?'\n    }\n}\n","/** Tokens */\nconst TOKENS_BY_NAME = {\n    'locate': [0x80, 0x82], //  128, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    'read': [0x81, 0x80], //  129, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'break': [0x82, 0xc0], //  130, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'call': [0x83, 0x80], //  131, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'def': [0x84, 0xa0], //  132, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    'endif': [0x85, 0xc0], //  133, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'for': [0x86, 0xa0], //  134, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    'goto': [0x87, 0x81], //  135, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'local': [0x88, 0x80], //  136, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'if': [0x89, 0xb0], //  137, PropTypes.COMMAND | CommandProps.NEXT_ADDR | CommandProps.BRANCH_ADDR | EvalProps.EVAL_NOTHING\n    'fend': [0x8a, 0xc0], //  138, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'clr': [0x8b, 0x80], //  139, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'let': [0x8c, 0x80], //  140, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'memset': [0x8d, 0x82], //  141, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    'next': [0x8e, 0xc0], //  142, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'on': [0x8f, 0x80], //  143, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'poke': [0x90, 0x81], //  144, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'continue': [0x91, 0xc0], //  145, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'repeat': [0x92, 0xa0], //  146, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    'set': [0x93, 0x80], //  147, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'then': [0x94, 0xc0], //  148, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'until': [0x95, 0x81], //  149, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'voice': [0x96, 0x88], //  150, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    'while': [0x97, 0x81], //  151, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'exec': [0x98, 0x81], //  152, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'input': [0x99, 0x81], //  153, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'sys': [0x9a, 0x80], //  154, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'CHAR': [0xa0, 0x00], //  160, TYPE | STR | LEN1\n    'F08': [0xa1, 0x18], //  161, TYPE | NUM | LEN1 | BYTE | USIGN | FRAC\n    'DQUOTE': [0xa2, 0x02], //  162, TYPE | STR | LENX\n    'WORD': [0xa3, 0x15], //  163, TYPE | NUM | LEN2 | WORD | SIGN | INT\n    'UWORD': [0xa4, 0x11], //  164, TYPE | NUM | LEN2 | WORD | USIGN | INT\n    'F2416': [0xa5, 0x1e], //  165, TYPE | NUM | LENX | SIGN | FRAC\n    'BYTE': [0xa6, 0x10], //  166, TYPE | NUM | LEN1 | BYTE | USIGN | INT\n    'SQUOTE': [0xa7, 0x02], //  167, TYPE | STR | LENX\n    'F88': [0xa8, 0x1d], //  168, TYPE | NUM | LEN2 | WORD | SIGN | FRAC\n    'FLOAT': [0xa9, 0x1f], //  169, TYPE | NUM | SIGN | FRAC\n    'DCHAR': [0xaa, 0x01], //  170, TYPE | STR | LEN2\n    'inc': [0xab, 0x80], //  171, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'QQUOTE': [0xac, 0x02], //  172, TYPE | STR | LENX\n    'dec': [0xad, 0x80], //  173, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    '_label': [0xae, 0x80], //  174, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'rem': [0xaf, 0x80], //  175, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    '+': [0xb0, 0x22], //  176, OPERATOR | Precedence<2>\n    '-': [0xb1, 0x22], //  177, OPERATOR | Precedence<2>\n    '*': [0xb2, 0x23], //  178, OPERATOR | Precedence<3>\n    'AND': [0xb3, 0x20], //  179, OPERATOR | Precedence<0>\n    '&&': [0xb3, 0x20], //  179, OPERATOR | Precedence<0>\n    'div': [0xb4, 0x23], //  180, OPERATOR | Precedence<3>\n    '/': [0xb4, 0x23], //  180, OPERATOR | Precedence<3>\n    'OR': [0xb5, 0x20], //  181, OPERATOR | Precedence<0>\n    '||': [0xb5, 0x20], //  181, OPERATOR | Precedence<0>\n    'mod': [0xb6, 0x23], //  182, OPERATOR | Precedence<3>\n    '%': [0xb6, 0x23], //  182, OPERATOR | Precedence<3>\n    'xor': [0xb7, 0x24], //  183, OPERATOR | Precedence<4>\n    '^': [0xb7, 0x24], //  183, OPERATOR | Precedence<4>\n    'and': [0xb8, 0x24], //  184, OPERATOR | Precedence<4>\n    '&': [0xb8, 0x24], //  184, OPERATOR | Precedence<4>\n    'or': [0xb9, 0x24], //  185, OPERATOR | Precedence<4>\n    '|': [0xb9, 0x24], //  185, OPERATOR | Precedence<4>\n    '<': [0xba, 0x21], //  186, OPERATOR | Precedence<1>\n    '==': [0xbb, 0x21], //  187, OPERATOR | Precedence<1>\n    '=': [0xbb, 0x21], //  187, OPERATOR | Precedence<1>\n    '>=': [0xbc, 0x21], //  188, OPERATOR | Precedence<1>\n    '!=': [0xbd, 0x21], //  189, OPERATOR | Precedence<1>\n    '<>': [0xbd, 0x21], //  189, OPERATOR | Precedence<1>\n    '<=': [0xbe, 0x21], //  190, OPERATOR | Precedence<1>\n    '>': [0xbf, 0x21], //  191, OPERATOR | Precedence<1>\n    'print': [0xc0, 0x80], //  192, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'data': [0xc1, 0x80], //  193, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'bitmap': [0xc2, 0x88], //  194, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    'fcall': [0xc3, 0x80], //  195, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'dend': [0xc4, 0xc0], //  196, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'else': [0xc5, 0x90], //  197, PropTypes.COMMAND | CommandProps.BRANCH_ADDR | EvalProps.EVAL_NOTHING\n    'fast': [0xc6, 0xa0], //  198, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    'gosub': [0xc7, 0x81], //  199, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'elif': [0xc8, 0x90], //  200, PropTypes.COMMAND | CommandProps.BRANCH_ADDR | EvalProps.EVAL_NOTHING\n    'dim': [0xc9, 0xa0], //  201, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    'open': [0xca, 0x80], //  202, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'color': [0xcb, 0x82], //  203, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    'loop': [0xcc, 0xc0], //  204, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'memcopy': [0xcd, 0x82], //  205, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    'end': [0xce, 0xc0], //  206, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'do': [0xcf, 0xe0], //  207, PropTypes.COMMAND | CommandProps.STRONG | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    'dpoke': [0xd0, 0x81], //  208, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'close': [0xd1, 0x81], //  209, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'return': [0xd2, 0x81], //  210, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    'sprite': [0xd3, 0x88], //  211, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    'timer': [0xd4, 0x80], //  212, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'get': [0xd5, 0x80], //  213, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'font': [0xd6, 0x88], //  214, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    'wait': [0xd7, 0x82], //  215, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    'inkey': [0xd9, 0x80], //  217, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'settings': [0xda, 0x80], //  218, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    'to': [0xdc, 0x40], //  220, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'pi': [0xde, 0x40], //  222, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'right': [0xdf, 0x62], //  223, PropTypes.FUNC | EvalProps.EVAL_ALL\n    '_lf': [0xe0, 0xc0], //  224, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    'cos': [0xe1, 0x61], //  225, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'int': [0xe2, 0x61], //  226, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'tan': [0xe3, 0x61], //  227, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'addr': [0xe4, 0x40], //  228, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'sgn': [0xe5, 0x61], //  229, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'limit': [0xe6, 0x62], //  230, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'mid': [0xe7, 0x62], //  231, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'step': [0xe8, 0x40], //  232, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'fpi': [0xe9, 0x40], //  233, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'atn': [0xea, 0x61], //  234, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'frac': [0xeb, 0x61], //  235, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'dpeek': [0xec, 0x62], //  236, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'spc': [0xed, 0x61], //  237, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'sin': [0xee, 0x61], //  238, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'peek': [0xef, 0x62], //  239, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'abs': [0xf0, 0x61], //  240, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'left': [0xf1, 0x62], //  241, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'rnd': [0xf2, 0x62], //  242, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'when': [0xf3, 0x62], //  243, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'has': [0xf4, 0x62], //  244, PropTypes.FUNC | EvalProps.EVAL_ALL\n    'tab': [0xf5, 0x61], //  245, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'len': [0xf6, 0x61], //  246, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'time': [0xf7, 0x40], //  247, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'sub': [0xf8, 0x60], //  248, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'ord': [0xf9, 0x61], //  249, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    '_sh_lf': [0xfa, 0x00], //  250, TYPE | STR | LEN1\n    'fn': [0xfb, 0x40], //  251, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'chr': [0xfc, 0x61], //  252, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'find': [0xfd, 0x60], //  253, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    'val': [0xfe, 0x61], //  254, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    'between': [0xff, 0x62], //  255, PropTypes.FUNC | EvalProps.EVAL_ALL\n};\nconst TOKENS_LIST = [\n    'locate', //  128, 0x80, @\n    'read', //  129, 0x81, a\n    'break', //  130, 0x82, b\n    'call', //  131, 0x83, c\n    'def', //  132, 0x84, d\n    'endif', //  133, 0x85, e\n    'for', //  134, 0x86, f\n    'goto', //  135, 0x87, g\n    'local', //  136, 0x88, h\n    'if', //  137, 0x89, i\n    'fend', //  138, 0x8a, j\n    'clr', //  139, 0x8b, k\n    'let', //  140, 0x8c, l\n    'memset', //  141, 0x8d, m\n    'next', //  142, 0x8e, n\n    'on', //  143, 0x8f, o\n    'poke', //  144, 0x90, p\n    'continue', //  145, 0x91, q\n    'repeat', //  146, 0x92, r\n    'set', //  147, 0x93, s\n    'then', //  148, 0x94, t\n    'until', //  149, 0x95, u\n    'voice', //  150, 0x96, v\n    'while', //  151, 0x97, w\n    'exec', //  152, 0x98, x\n    'input', //  153, 0x99, y\n    'sys', //  154, 0x9a, z\n    '', //  155, 0x9b, [\n    '', //  156, 0x9c, {POUND}\n    '', //  157, 0x9d, ]\n    '', //  158, 0x9e, {ARR UP}\n    '', //  159, 0x9f, {ARR LEFT}\n    'CHAR', //  160, 0xa0,  \n    'F08', //  161, 0xa1, !\n    'DQUOTE', //  162, 0xa2, \"\n    'WORD', //  163, 0xa3, #\n    'UWORD', //  164, 0xa4, $\n    'F2416', //  165, 0xa5, %\n    'BYTE', //  166, 0xa6, &\n    'SQUOTE', //  167, 0xa7, '\n    'F88', //  168, 0xa8, (\n    'FLOAT', //  169, 0xa9, )\n    'DCHAR', //  170, 0xaa, *\n    'inc', //  171, 0xab, +\n    'QQUOTE', //  172, 0xac, ,\n    'dec', //  173, 0xad, -\n    '_label', //  174, 0xae, .\n    'rem', //  175, 0xaf, /\n    '+', //  176, 0xb0, 0\n    '-', //  177, 0xb1, 1\n    '*', //  178, 0xb2, 2\n    '&&', //  179, 0xb3, 3\n    '/', //  180, 0xb4, 4\n    '||', //  181, 0xb5, 5\n    '%', //  182, 0xb6, 6\n    '^', //  183, 0xb7, 7\n    '&', //  184, 0xb8, 8\n    '|', //  185, 0xb9, 9\n    '<', //  186, 0xba, :\n    '=', //  187, 0xbb, ;\n    '>=', //  188, 0xbc, <\n    '<>', //  189, 0xbd, =\n    '<=', //  190, 0xbe, >\n    '>', //  191, 0xbf, ?\n    'print', //  192, 0xc0, {SH *}\n    'data', //  193, 0xc1, A\n    'bitmap', //  194, 0xc2, B\n    'fcall', //  195, 0xc3, C\n    'dend', //  196, 0xc4, D\n    'else', //  197, 0xc5, E\n    'fast', //  198, 0xc6, F\n    'gosub', //  199, 0xc7, G\n    'elif', //  200, 0xc8, H\n    'dim', //  201, 0xc9, I\n    'open', //  202, 0xca, J\n    'color', //  203, 0xcb, K\n    'loop', //  204, 0xcc, L\n    'memcopy', //  205, 0xcd, M\n    'end', //  206, 0xce, N\n    'do', //  207, 0xcf, O\n    'dpoke', //  208, 0xd0, P\n    'close', //  209, 0xd1, Q\n    'return', //  210, 0xd2, R\n    'sprite', //  211, 0xd3, S\n    'timer', //  212, 0xd4, T\n    'get', //  213, 0xd5, U\n    'font', //  214, 0xd6, V\n    'wait', //  215, 0xd7, W\n    '', //  216, 0xd8, X\n    'inkey', //  217, 0xd9, Y\n    'settings', //  218, 0xda, Z\n    '', //  219, 0xdb, {SH +}\n    'to', //  220, 0xdc, {CM -}\n    '', //  221, 0xdd, {SH -}\n    'pi', //  222, 0xde, {PI}\n    'right', //  223, 0xdf, {CM *}\n    '_lf', //  224, 0xe0, {SH SPACE}\n    'cos', //  225, 0xe1, K×\n    'int', //  226, 0xe2, I×\n    'tan', //  227, 0xe3, T×\n    'addr', //  228, 0xe4, {CM @}\n    'sgn', //  229, 0xe5, G×\n    'limit', //  230, 0xe6, {CM +}\n    'mid', //  231, 0xe7, M×\n    'step', //  232, 0xe8, {CM POUND}\n    'fpi', //  233, 0xe9, {SH POUND}\n    'atn', //  234, 0xea, N×\n    'frac', //  235, 0xeb, Q×\n    'dpeek', //  236, 0xec, D×\n    'spc', //  237, 0xed, Z×\n    'sin', //  238, 0xee, S×\n    'peek', //  239, 0xef, P×\n    'abs', //  240, 0xf0, A×\n    'left', //  241, 0xf1, E×\n    'rnd', //  242, 0xf2, R×\n    'when', //  243, 0xf3, W×\n    'has', //  244, 0xf4, H×\n    'tab', //  245, 0xf5, J×\n    'len', //  246, 0xf6, L×\n    'time', //  247, 0xf7, Y×\n    'sub', //  248, 0xf8, U×\n    'ord', //  249, 0xf9, O×\n    '_sh_lf', //  250, 0xfa, {SH @}\n    'fn', //  251, 0xfb, F×\n    'chr', //  252, 0xfc, C×\n    'find', //  253, 0xfd, X×\n    'val', //  254, 0xfe, V×\n    'between', //  255, 0xff, B×\n];\nconst TOKENS_BY_CODE = {\n    128: ['locate', 0x82], // 0x80, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    129: ['read', 0x80], // 0x81, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    130: ['break', 0xc0], // 0x82, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    131: ['call', 0x80], // 0x83, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    132: ['def', 0xa0], // 0x84, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    133: ['endif', 0xc0], // 0x85, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    134: ['for', 0xa0], // 0x86, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    135: ['goto', 0x81], // 0x87, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    136: ['local', 0x80], // 0x88, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    137: ['if', 0xb0], // 0x89, PropTypes.COMMAND | CommandProps.NEXT_ADDR | CommandProps.BRANCH_ADDR | EvalProps.EVAL_NOTHING\n    138: ['fend', 0xc0], // 0x8a, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    139: ['clr', 0x80], // 0x8b, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    140: ['let', 0x80], // 0x8c, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    141: ['memset', 0x82], // 0x8d, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    142: ['next', 0xc0], // 0x8e, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    143: ['on', 0x80], // 0x8f, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    144: ['poke', 0x81], // 0x90, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    145: ['continue', 0xc0], // 0x91, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    146: ['repeat', 0xa0], // 0x92, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    147: ['set', 0x80], // 0x93, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    148: ['then', 0xc0], // 0x94, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    149: ['until', 0x81], // 0x95, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    150: ['voice', 0x88], // 0x96, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    151: ['while', 0x81], // 0x97, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    152: ['exec', 0x81], // 0x98, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    153: ['input', 0x81], // 0x99, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    154: ['sys', 0x80], // 0x9a, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    160: ['CHAR', 0x00], // 0xa0, TYPE | STR | LEN1\n    161: ['F08', 0x18], // 0xa1, TYPE | NUM | LEN1 | BYTE | USIGN | FRAC\n    162: ['DQUOTE', 0x02], // 0xa2, TYPE | STR | LENX\n    163: ['WORD', 0x15], // 0xa3, TYPE | NUM | LEN2 | WORD | SIGN | INT\n    164: ['UWORD', 0x11], // 0xa4, TYPE | NUM | LEN2 | WORD | USIGN | INT\n    165: ['F2416', 0x1e], // 0xa5, TYPE | NUM | LENX | SIGN | FRAC\n    166: ['BYTE', 0x10], // 0xa6, TYPE | NUM | LEN1 | BYTE | USIGN | INT\n    167: ['SQUOTE', 0x02], // 0xa7, TYPE | STR | LENX\n    168: ['F88', 0x1d], // 0xa8, TYPE | NUM | LEN2 | WORD | SIGN | FRAC\n    169: ['FLOAT', 0x1f], // 0xa9, TYPE | NUM | SIGN | FRAC\n    170: ['DCHAR', 0x01], // 0xaa, TYPE | STR | LEN2\n    171: ['inc', 0x80], // 0xab, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    172: ['QQUOTE', 0x02], // 0xac, TYPE | STR | LENX\n    173: ['dec', 0x80], // 0xad, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    174: ['_label', 0x80], // 0xae, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    175: ['rem', 0x80], // 0xaf, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    176: ['+', 0x22], // 0xb0, OPERATOR | Precedence<2>\n    177: ['-', 0x22], // 0xb1, OPERATOR | Precedence<2>\n    178: ['*', 0x23], // 0xb2, OPERATOR | Precedence<3>\n    179: ['&&', 0x20], // 0xb3, OPERATOR | Precedence<0>\n    180: ['/', 0x23], // 0xb4, OPERATOR | Precedence<3>\n    181: ['||', 0x20], // 0xb5, OPERATOR | Precedence<0>\n    182: ['%', 0x23], // 0xb6, OPERATOR | Precedence<3>\n    183: ['^', 0x24], // 0xb7, OPERATOR | Precedence<4>\n    184: ['&', 0x24], // 0xb8, OPERATOR | Precedence<4>\n    185: ['|', 0x24], // 0xb9, OPERATOR | Precedence<4>\n    186: ['<', 0x21], // 0xba, OPERATOR | Precedence<1>\n    187: ['=', 0x21], // 0xbb, OPERATOR | Precedence<1>\n    188: ['>=', 0x21], // 0xbc, OPERATOR | Precedence<1>\n    189: ['<>', 0x21], // 0xbd, OPERATOR | Precedence<1>\n    190: ['<=', 0x21], // 0xbe, OPERATOR | Precedence<1>\n    191: ['>', 0x21], // 0xbf, OPERATOR | Precedence<1>\n    192: ['print', 0x80], // 0xc0, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    193: ['data', 0x80], // 0xc1, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    194: ['bitmap', 0x88], // 0xc2, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    195: ['fcall', 0x80], // 0xc3, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    196: ['dend', 0xc0], // 0xc4, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    197: ['else', 0x90], // 0xc5, PropTypes.COMMAND | CommandProps.BRANCH_ADDR | EvalProps.EVAL_NOTHING\n    198: ['fast', 0xa0], // 0xc6, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    199: ['gosub', 0x81], // 0xc7, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    200: ['elif', 0x90], // 0xc8, PropTypes.COMMAND | CommandProps.BRANCH_ADDR | EvalProps.EVAL_NOTHING\n    201: ['dim', 0xa0], // 0xc9, PropTypes.COMMAND | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    202: ['open', 0x80], // 0xca, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    203: ['color', 0x82], // 0xcb, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    204: ['loop', 0xc0], // 0xcc, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    205: ['memcopy', 0x82], // 0xcd, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    206: ['end', 0xc0], // 0xce, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    207: ['do', 0xe0], // 0xcf, PropTypes.COMMAND | CommandProps.STRONG | CommandProps.NEXT_ADDR | EvalProps.EVAL_NOTHING\n    208: ['dpoke', 0x81], // 0xd0, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    209: ['close', 0x81], // 0xd1, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    210: ['return', 0x81], // 0xd2, PropTypes.COMMAND | EvalProps.EVAL_SINGLE\n    211: ['sprite', 0x88], // 0xd3, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    212: ['timer', 0x80], // 0xd4, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    213: ['get', 0x80], // 0xd5, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    214: ['font', 0x88], // 0xd6, PropTypes.COMMAND | CommandProps.SUB_COMMAND | EvalProps.EVAL_NOTHING\n    215: ['wait', 0x82], // 0xd7, PropTypes.COMMAND | EvalProps.EVAL_ALL\n    217: ['inkey', 0x80], // 0xd9, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    218: ['settings', 0x80], // 0xda, PropTypes.COMMAND | EvalProps.EVAL_NOTHING\n    220: ['to', 0x40], // 0xdc, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    222: ['pi', 0x40], // 0xde, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    223: ['right', 0x62], // 0xdf, PropTypes.FUNC | EvalProps.EVAL_ALL\n    224: ['_lf', 0xc0], // 0xe0, PropTypes.COMMAND | CommandProps.STRONG | EvalProps.EVAL_NOTHING\n    225: ['cos', 0x61], // 0xe1, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    226: ['int', 0x61], // 0xe2, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    227: ['tan', 0x61], // 0xe3, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    228: ['addr', 0x40], // 0xe4, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    229: ['sgn', 0x61], // 0xe5, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    230: ['limit', 0x62], // 0xe6, PropTypes.FUNC | EvalProps.EVAL_ALL\n    231: ['mid', 0x62], // 0xe7, PropTypes.FUNC | EvalProps.EVAL_ALL\n    232: ['step', 0x40], // 0xe8, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    233: ['fpi', 0x40], // 0xe9, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    234: ['atn', 0x61], // 0xea, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    235: ['frac', 0x61], // 0xeb, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    236: ['dpeek', 0x62], // 0xec, PropTypes.FUNC | EvalProps.EVAL_ALL\n    237: ['spc', 0x61], // 0xed, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    238: ['sin', 0x61], // 0xee, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    239: ['peek', 0x62], // 0xef, PropTypes.FUNC | EvalProps.EVAL_ALL\n    240: ['abs', 0x61], // 0xf0, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    241: ['left', 0x62], // 0xf1, PropTypes.FUNC | EvalProps.EVAL_ALL\n    242: ['rnd', 0x62], // 0xf2, PropTypes.FUNC | EvalProps.EVAL_ALL\n    243: ['when', 0x62], // 0xf3, PropTypes.FUNC | EvalProps.EVAL_ALL\n    244: ['has', 0x62], // 0xf4, PropTypes.FUNC | EvalProps.EVAL_ALL\n    245: ['tab', 0x61], // 0xf5, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    246: ['len', 0x61], // 0xf6, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    247: ['time', 0x40], // 0xf7, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    248: ['sub', 0x60], // 0xf8, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    249: ['ord', 0x61], // 0xf9, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    250: ['_sh_lf', 0x00], // 0xfa, TYPE | STR | LEN1\n    251: ['fn', 0x40], // 0xfb, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    252: ['chr', 0x61], // 0xfc, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    253: ['find', 0x60], // 0xfd, PropTypes.FUNC | EvalProps.EVAL_NOTHING\n    254: ['val', 0x61], // 0xfe, PropTypes.FUNC | EvalProps.EVAL_SINGLE\n    255: ['between', 0x62], // 0xff, PropTypes.FUNC | EvalProps.EVAL_ALL\n};\nconst GTOKEN_PROPS = [\n    0x82, //  128, 0x80, @          - locate                  PropTypes.COMMAND|EvalProps.EVAL_ALL\n    0x80, //  129, 0x81, a          - read                    PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0xc0, //  130, 0x82, b          - break                   PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0x80, //  131, 0x83, c          - call                    PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0xa0, //  132, 0x84, d          - def                     PropTypes.COMMAND|CommandProps.NEXT_ADDR|EvalProps.EVAL_NOTHING\n    0xc0, //  133, 0x85, e          - endif                   PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0xa0, //  134, 0x86, f          - for                     PropTypes.COMMAND|CommandProps.NEXT_ADDR|EvalProps.EVAL_NOTHING\n    0x81, //  135, 0x87, g          - goto                    PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x80, //  136, 0x88, h          - local                   PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0xb0, //  137, 0x89, i          - if                      PropTypes.COMMAND|CommandProps.NEXT_ADDR|CommandProps.BRANCH_ADDR|EvalProps.EVAL_NOTHING\n    0xc0, //  138, 0x8a, j          - fend                    PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0x80, //  139, 0x8b, k          - clr                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  140, 0x8c, l          - let                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x82, //  141, 0x8d, m          - memset                  PropTypes.COMMAND|EvalProps.EVAL_ALL\n    0xc0, //  142, 0x8e, n          - next                    PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0x80, //  143, 0x8f, o          - on                      PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x81, //  144, 0x90, p          - poke                    PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0xc0, //  145, 0x91, q          - continue                PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0xa0, //  146, 0x92, r          - repeat                  PropTypes.COMMAND|CommandProps.NEXT_ADDR|EvalProps.EVAL_NOTHING\n    0x80, //  147, 0x93, s          - set                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0xc0, //  148, 0x94, t          - then                    PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0x81, //  149, 0x95, u          - until                   PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x88, //  150, 0x96, v          - voice                   PropTypes.COMMAND|CommandProps.SUB_COMMAND|EvalProps.EVAL_NOTHING\n    0x81, //  151, 0x97, w          - while                   PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x81, //  152, 0x98, x          - exec                    PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x81, //  153, 0x99, y          - input                   PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x80, //  154, 0x9a, z          - sys                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x00, //  155, 0x9b, [          -                         \n    0x00, //  156, 0x9c, {POUND}    -                         \n    0x00, //  157, 0x9d, ]          -                         \n    0x00, //  158, 0x9e, {ARR UP}   -                         \n    0x00, //  159, 0x9f, {ARR LEFT} -                         \n    0x00, //  160, 0xa0,            - CHAR                    \n    0x18, //  161, 0xa1, !          - F08                     TYPE|NUM|LEN1|BYTE|USIGN|FRAC\n    0x02, //  162, 0xa2, \"          - DQUOTE                  TYPE|STR|LENX\n    0x15, //  163, 0xa3, #          - WORD                    TYPE|NUM|LEN2|WORD|SIGN|INT\n    0x11, //  164, 0xa4, $          - UWORD                   TYPE|NUM|LEN2|WORD|USIGN|INT\n    0x1e, //  165, 0xa5, %          - F2416                   TYPE|NUM|LENX|SIGN|FRAC\n    0x10, //  166, 0xa6, &          - BYTE                    TYPE|NUM|LEN1|BYTE|USIGN|INT\n    0x02, //  167, 0xa7, '          - SQUOTE                  TYPE|STR|LENX\n    0x1d, //  168, 0xa8, (          - F88                     TYPE|NUM|LEN2|WORD|SIGN|FRAC\n    0x1f, //  169, 0xa9, )          - FLOAT                   TYPE|NUM|SIGN|FRAC\n    0x01, //  170, 0xaa, *          - DCHAR                   TYPE|STR|LEN2\n    0x80, //  171, 0xab, +          - inc                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x02, //  172, 0xac, ,          - QQUOTE                  TYPE|STR|LENX\n    0x80, //  173, 0xad, -          - dec                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  174, 0xae, .          - _label                  PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  175, 0xaf, /          - rem                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x22, //  176, 0xb0, 0          - +                       OPERATOR|Precedence<2>\n    0x22, //  177, 0xb1, 1          - -                       OPERATOR|Precedence<2>\n    0x23, //  178, 0xb2, 2          - *                       OPERATOR|Precedence<3>\n    0x20, //  179, 0xb3, 3          - &&                      OPERATOR|Precedence<0>\n    0x23, //  180, 0xb4, 4          - /                       OPERATOR|Precedence<3>\n    0x20, //  181, 0xb5, 5          - ||                      OPERATOR|Precedence<0>\n    0x23, //  182, 0xb6, 6          - %                       OPERATOR|Precedence<3>\n    0x24, //  183, 0xb7, 7          - ^                       OPERATOR|Precedence<4>\n    0x24, //  184, 0xb8, 8          - &                       OPERATOR|Precedence<4>\n    0x24, //  185, 0xb9, 9          - |                       OPERATOR|Precedence<4>\n    0x21, //  186, 0xba, :          - <                       OPERATOR|Precedence<1>\n    0x21, //  187, 0xbb, ;          - =                       OPERATOR|Precedence<1>\n    0x21, //  188, 0xbc, <          - >=                      OPERATOR|Precedence<1>\n    0x21, //  189, 0xbd, =          - <>                      OPERATOR|Precedence<1>\n    0x21, //  190, 0xbe, >          - <=                      OPERATOR|Precedence<1>\n    0x21, //  191, 0xbf, ?          - >                       OPERATOR|Precedence<1>\n    0x80, //  192, 0xc0, {SH *}     - print                   PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  193, 0xc1, A          - data                    PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x88, //  194, 0xc2, B          - bitmap                  PropTypes.COMMAND|CommandProps.SUB_COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  195, 0xc3, C          - fcall                   PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0xc0, //  196, 0xc4, D          - dend                    PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0x90, //  197, 0xc5, E          - else                    PropTypes.COMMAND|CommandProps.BRANCH_ADDR|EvalProps.EVAL_NOTHING\n    0xa0, //  198, 0xc6, F          - fast                    PropTypes.COMMAND|CommandProps.NEXT_ADDR|EvalProps.EVAL_NOTHING\n    0x81, //  199, 0xc7, G          - gosub                   PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x90, //  200, 0xc8, H          - elif                    PropTypes.COMMAND|CommandProps.BRANCH_ADDR|EvalProps.EVAL_NOTHING\n    0xa0, //  201, 0xc9, I          - dim                     PropTypes.COMMAND|CommandProps.NEXT_ADDR|EvalProps.EVAL_NOTHING\n    0x80, //  202, 0xca, J          - open                    PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x82, //  203, 0xcb, K          - color                   PropTypes.COMMAND|EvalProps.EVAL_ALL\n    0xc0, //  204, 0xcc, L          - loop                    PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0x82, //  205, 0xcd, M          - memcopy                 PropTypes.COMMAND|EvalProps.EVAL_ALL\n    0xc0, //  206, 0xce, N          - end                     PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0xe0, //  207, 0xcf, O          - do                      PropTypes.COMMAND|CommandProps.STRONG|CommandProps.NEXT_ADDR|EvalProps.EVAL_NOTHING\n    0x81, //  208, 0xd0, P          - dpoke                   PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x81, //  209, 0xd1, Q          - close                   PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x81, //  210, 0xd2, R          - return                  PropTypes.COMMAND|EvalProps.EVAL_SINGLE\n    0x88, //  211, 0xd3, S          - sprite                  PropTypes.COMMAND|CommandProps.SUB_COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  212, 0xd4, T          - timer                   PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  213, 0xd5, U          - get                     PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x88, //  214, 0xd6, V          - font                    PropTypes.COMMAND|CommandProps.SUB_COMMAND|EvalProps.EVAL_NOTHING\n    0x82, //  215, 0xd7, W          - wait                    PropTypes.COMMAND|EvalProps.EVAL_ALL\n    0x00, //  216, 0xd8, X          -                         \n    0x80, //  217, 0xd9, Y          - inkey                   PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x80, //  218, 0xda, Z          - settings                PropTypes.COMMAND|EvalProps.EVAL_NOTHING\n    0x00, //  219, 0xdb, {SH +}     -                         \n    0x40, //  220, 0xdc, {CM -}     - to                      PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x00, //  221, 0xdd, {SH -}     -                         \n    0x40, //  222, 0xde, {PI}       - pi                      PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x62, //  223, 0xdf, {CM *}     - right                   PropTypes.FUNC|EvalProps.EVAL_ALL\n    0xc0, //  224, 0xe0, {SH SPACE} - _lf                     PropTypes.COMMAND|CommandProps.STRONG|EvalProps.EVAL_NOTHING\n    0x61, //  225, 0xe1, K×         - cos                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x61, //  226, 0xe2, I×         - int                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x61, //  227, 0xe3, T×         - tan                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x40, //  228, 0xe4, {CM @}     - addr                    PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x61, //  229, 0xe5, G×         - sgn                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x62, //  230, 0xe6, {CM +}     - limit                   PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x62, //  231, 0xe7, M×         - mid                     PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x40, //  232, 0xe8, {CM POUND} - step                    PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x40, //  233, 0xe9, {SH POUND} - fpi                     PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x61, //  234, 0xea, N×         - atn                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x61, //  235, 0xeb, Q×         - frac                    PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x62, //  236, 0xec, D×         - dpeek                   PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x61, //  237, 0xed, Z×         - spc                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x61, //  238, 0xee, S×         - sin                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x62, //  239, 0xef, P×         - peek                    PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x61, //  240, 0xf0, A×         - abs                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x62, //  241, 0xf1, E×         - left                    PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x62, //  242, 0xf2, R×         - rnd                     PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x62, //  243, 0xf3, W×         - when                    PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x62, //  244, 0xf4, H×         - has                     PropTypes.FUNC|EvalProps.EVAL_ALL\n    0x61, //  245, 0xf5, J×         - tab                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x61, //  246, 0xf6, L×         - len                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x40, //  247, 0xf7, Y×         - time                    PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x60, //  248, 0xf8, U×         - sub                     PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x61, //  249, 0xf9, O×         - ord                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x00, //  250, 0xfa, {SH @}     - _sh_lf                  \n    0x40, //  251, 0xfb, F×         - fn                      PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x61, //  252, 0xfc, C×         - chr                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x60, //  253, 0xfd, X×         - find                    PropTypes.FUNC|EvalProps.EVAL_NOTHING\n    0x61, //  254, 0xfe, V×         - val                     PropTypes.FUNC|EvalProps.EVAL_SINGLE\n    0x62, //  255, 0xff, B×         - between                 PropTypes.FUNC|EvalProps.EVAL_ALL\n];\nconst TOKENS_TTC = {\n    'locate': 0x80, //  128\n    'read': 0x81, //  129\n    'break': 0x82, //  130\n    'call': 0x83, //  131\n    'def': 0x84, //  132\n    'endif': 0x85, //  133\n    'for': 0x86, //  134\n    'goto': 0x87, //  135\n    'local': 0x88, //  136\n    'if': 0x89, //  137\n    'fend': 0x8a, //  138\n    'clr': 0x8b, //  139\n    'let': 0x8c, //  140\n    'memset': 0x8d, //  141\n    'next': 0x8e, //  142\n    'on': 0x8f, //  143\n    'poke': 0x90, //  144\n    'continue': 0x91, //  145\n    'repeat': 0x92, //  146\n    'set': 0x93, //  147\n    'then': 0x94, //  148\n    'until': 0x95, //  149\n    'voice': 0x96, //  150\n    'while': 0x97, //  151\n    'exec': 0x98, //  152\n    'input': 0x99, //  153\n    'sys': 0x9a, //  154\n    'CHAR': 0xa0, //  160\n    'F08': 0xa1, //  161\n    'DQUOTE': 0xa2, //  162\n    'WORD': 0xa3, //  163\n    'UWORD': 0xa4, //  164\n    'F2416': 0xa5, //  165\n    'BYTE': 0xa6, //  166\n    'SQUOTE': 0xa7, //  167\n    'F88': 0xa8, //  168\n    'FLOAT': 0xa9, //  169\n    'DCHAR': 0xaa, //  170\n    'inc': 0xab, //  171\n    'QQUOTE': 0xac, //  172\n    'dec': 0xad, //  173\n    '_label': 0xae, //  174\n    'rem': 0xaf, //  175\n    '+': 0xb0, //  176\n    '-': 0xb1, //  177\n    '*': 0xb2, //  178\n    'AND': 0xb3, //  179\n    '&&': 0xb3, //  179\n    'div': 0xb4, //  180\n    '/': 0xb4, //  180\n    'OR': 0xb5, //  181\n    '||': 0xb5, //  181\n    'mod': 0xb6, //  182\n    '%': 0xb6, //  182\n    'xor': 0xb7, //  183\n    '^': 0xb7, //  183\n    'and': 0xb8, //  184\n    '&': 0xb8, //  184\n    'or': 0xb9, //  185\n    '|': 0xb9, //  185\n    '<': 0xba, //  186\n    '==': 0xbb, //  187\n    '=': 0xbb, //  187\n    '>=': 0xbc, //  188\n    '!=': 0xbd, //  189\n    '<>': 0xbd, //  189\n    '<=': 0xbe, //  190\n    '>': 0xbf, //  191\n    'print': 0xc0, //  192\n    'data': 0xc1, //  193\n    'bitmap': 0xc2, //  194\n    'fcall': 0xc3, //  195\n    'dend': 0xc4, //  196\n    'else': 0xc5, //  197\n    'fast': 0xc6, //  198\n    'gosub': 0xc7, //  199\n    'elif': 0xc8, //  200\n    'dim': 0xc9, //  201\n    'open': 0xca, //  202\n    'color': 0xcb, //  203\n    'loop': 0xcc, //  204\n    'memcopy': 0xcd, //  205\n    'end': 0xce, //  206\n    'do': 0xcf, //  207\n    'dpoke': 0xd0, //  208\n    'close': 0xd1, //  209\n    'return': 0xd2, //  210\n    'sprite': 0xd3, //  211\n    'timer': 0xd4, //  212\n    'get': 0xd5, //  213\n    'font': 0xd6, //  214\n    'wait': 0xd7, //  215\n    'inkey': 0xd9, //  217\n    'settings': 0xda, //  218\n    'to': 0xdc, //  220\n    'pi': 0xde, //  222\n    'right': 0xdf, //  223\n    '_lf': 0xe0, //  224\n    'cos': 0xe1, //  225\n    'int': 0xe2, //  226\n    'tan': 0xe3, //  227\n    'addr': 0xe4, //  228\n    'sgn': 0xe5, //  229\n    'limit': 0xe6, //  230\n    'mid': 0xe7, //  231\n    'step': 0xe8, //  232\n    'fpi': 0xe9, //  233\n    'atn': 0xea, //  234\n    'frac': 0xeb, //  235\n    'dpeek': 0xec, //  236\n    'spc': 0xed, //  237\n    'sin': 0xee, //  238\n    'peek': 0xef, //  239\n    'abs': 0xf0, //  240\n    'left': 0xf1, //  241\n    'rnd': 0xf2, //  242\n    'when': 0xf3, //  243\n    'has': 0xf4, //  244\n    'tab': 0xf5, //  245\n    'len': 0xf6, //  246\n    'time': 0xf7, //  247\n    'sub': 0xf8, //  248\n    'ord': 0xf9, //  249\n    '_sh_lf': 0xfa, //  250\n    'fn': 0xfb, //  251\n    'chr': 0xfc, //  252\n    'find': 0xfd, //  253\n    'val': 0xfe, //  254\n    'between': 0xff, //  255\n};\nconst TOKENS_CTT = {\n    128: 'locate', // 0x82\n    129: 'read', // 0x80\n    130: 'break', // 0xc0\n    131: 'call', // 0x80\n    132: 'def', // 0xa0\n    133: 'endif', // 0xc0\n    134: 'for', // 0xa0\n    135: 'goto', // 0x81\n    136: 'local', // 0x80\n    137: 'if', // 0xb0\n    138: 'fend', // 0xc0\n    139: 'clr', // 0x80\n    140: 'let', // 0x80\n    141: 'memset', // 0x82\n    142: 'next', // 0xc0\n    143: 'on', // 0x80\n    144: 'poke', // 0x81\n    145: 'continue', // 0xc0\n    146: 'repeat', // 0xa0\n    147: 'set', // 0x80\n    148: 'then', // 0xc0\n    149: 'until', // 0x81\n    150: 'voice', // 0x88\n    151: 'while', // 0x81\n    152: 'exec', // 0x81\n    153: 'input', // 0x81\n    154: 'sys', // 0x80\n    160: 'CHAR', // 0x00\n    161: 'F08', // 0x18\n    162: 'DQUOTE', // 0x02\n    163: 'WORD', // 0x15\n    164: 'UWORD', // 0x11\n    165: 'F2416', // 0x1e\n    166: 'BYTE', // 0x10\n    167: 'SQUOTE', // 0x02\n    168: 'F88', // 0x1d\n    169: 'FLOAT', // 0x1f\n    170: 'DCHAR', // 0x01\n    171: 'inc', // 0x80\n    172: 'QQUOTE', // 0x02\n    173: 'dec', // 0x80\n    174: '_label', // 0x80\n    175: 'rem', // 0x80\n    176: '+', // 0x22\n    177: '-', // 0x22\n    178: '*', // 0x23\n    179: '&&', // 0x20\n    180: '/', // 0x23\n    181: '||', // 0x20\n    182: '%', // 0x23\n    183: '^', // 0x24\n    184: '&', // 0x24\n    185: '|', // 0x24\n    186: '<', // 0x21\n    187: '=', // 0x21\n    188: '>=', // 0x21\n    189: '<>', // 0x21\n    190: '<=', // 0x21\n    191: '>', // 0x21\n    192: 'print', // 0x80\n    193: 'data', // 0x80\n    194: 'bitmap', // 0x88\n    195: 'fcall', // 0x80\n    196: 'dend', // 0xc0\n    197: 'else', // 0x90\n    198: 'fast', // 0xa0\n    199: 'gosub', // 0x81\n    200: 'elif', // 0x90\n    201: 'dim', // 0xa0\n    202: 'open', // 0x80\n    203: 'color', // 0x82\n    204: 'loop', // 0xc0\n    205: 'memcopy', // 0x82\n    206: 'end', // 0xc0\n    207: 'do', // 0xe0\n    208: 'dpoke', // 0x81\n    209: 'close', // 0x81\n    210: 'return', // 0x81\n    211: 'sprite', // 0x88\n    212: 'timer', // 0x80\n    213: 'get', // 0x80\n    214: 'font', // 0x88\n    215: 'wait', // 0x82\n    217: 'inkey', // 0x80\n    218: 'settings', // 0x80\n    220: 'to', // 0x40\n    222: 'pi', // 0x40\n    223: 'right', // 0x62\n    224: '_lf', // 0xc0\n    225: 'cos', // 0x61\n    226: 'int', // 0x61\n    227: 'tan', // 0x61\n    228: 'addr', // 0x40\n    229: 'sgn', // 0x61\n    230: 'limit', // 0x62\n    231: 'mid', // 0x62\n    232: 'step', // 0x40\n    233: 'fpi', // 0x40\n    234: 'atn', // 0x61\n    235: 'frac', // 0x61\n    236: 'dpeek', // 0x62\n    237: 'spc', // 0x61\n    238: 'sin', // 0x61\n    239: 'peek', // 0x62\n    240: 'abs', // 0x61\n    241: 'left', // 0x62\n    242: 'rnd', // 0x62\n    243: 'when', // 0x62\n    244: 'has', // 0x62\n    245: 'tab', // 0x61\n    246: 'len', // 0x61\n    247: 'time', // 0x40\n    248: 'sub', // 0x60\n    249: 'ord', // 0x61\n    250: '_sh_lf', // 0x00\n    251: 'fn', // 0x40\n    252: 'chr', // 0x61\n    253: 'find', // 0x60\n    254: 'val', // 0x61\n    255: 'between', // 0x62\n};\n\nexport { GTOKEN_PROPS, TOKENS_BY_CODE, TOKENS_BY_NAME, TOKENS_CTT, TOKENS_LIST, TOKENS_TTC };\n//# sourceMappingURL=allTokens.js.map\n","/**Commands*/\nconst COMMANDS_BY_NAME = {\n    'print': [0xc0, 0x80], //  192, props_to_be_added\n    'locate': [0x80, 0x82], //  128, props_to_be_added\n    'inc': [0xab, 0x80], //  171, props_to_be_added\n    'dec': [0xad, 0x80], //  173, props_to_be_added\n    'let': [0x8c, 0x80], //  140, props_to_be_added\n    'set': [0x93, 0x80], //  147, props_to_be_added\n    'for': [0x86, 0xa0], //  134, props_to_be_added\n    'next': [0x8e, 0xc0], //  142, props_to_be_added\n    'repeat': [0x92, 0xa0], //  146, props_to_be_added\n    'if': [0x89, 0xb0], //  137, props_to_be_added\n    'then': [0x94, 0xc0], //  148, props_to_be_added\n    'endif': [0x85, 0xc0], //  133, props_to_be_added\n    'else': [0xc5, 0x90], //  197, props_to_be_added\n    'elif': [0xc8, 0x90], //  200, props_to_be_added\n    'do': [0xcf, 0xe0], //  207, props_to_be_added\n    'loop': [0xcc, 0xc0], //  204, props_to_be_added\n    'while': [0x97, 0x81], //  151, props_to_be_added\n    'until': [0x95, 0x81], //  149, props_to_be_added\n    'fast': [0xc6, 0xa0], //  198, props_to_be_added\n    'fcall': [0xc3, 0x80], //  195, props_to_be_added\n    'fend': [0x8a, 0xc0], //  138, props_to_be_added\n    'poke': [0x90, 0x81], //  144, props_to_be_added\n    'dpoke': [0xd0, 0x81], //  208, props_to_be_added\n    'read': [0x81, 0x80], //  129, props_to_be_added\n    'def': [0x84, 0xa0], //  132, props_to_be_added\n    'call': [0x83, 0x80], //  131, props_to_be_added\n    'dend': [0xc4, 0xc0], //  196, props_to_be_added\n    'goto': [0x87, 0x81], //  135, props_to_be_added\n    'gosub': [0xc7, 0x81], //  199, props_to_be_added\n    'on': [0x8f, 0x80], //  143, props_to_be_added\n    'return': [0xd2, 0x81], //  210, props_to_be_added\n    'end': [0xce, 0xc0], //  206, props_to_be_added\n    'clr': [0x8b, 0x80], //  139, props_to_be_added\n    'dim': [0xc9, 0xa0], //  201, props_to_be_added\n    'local': [0x88, 0x80], //  136, props_to_be_added\n    'inkey': [0xd9, 0x80], //  217, props_to_be_added\n    'sys': [0x9a, 0x80], //  154, props_to_be_added\n    'wait': [0xd7, 0x82], //  215, props_to_be_added\n    'input': [0x99, 0x81], //  153, props_to_be_added\n    'timer': [0xd4, 0x80], //  212, props_to_be_added\n    'memcopy': [0xcd, 0x82], //  205, props_to_be_added\n    'memset': [0x8d, 0x82], //  141, props_to_be_added\n    'color': [0xcb, 0x82], //  203, props_to_be_added\n    'data': [0xc1, 0x80], //  193, props_to_be_added\n    'exec': [0x98, 0x81], //  152, props_to_be_added\n    'open': [0xca, 0x80], //  202, props_to_be_added\n    'get': [0xd5, 0x80], //  213, props_to_be_added\n    'close': [0xd1, 0x81], //  209, props_to_be_added\n    'break': [0x82, 0xc0], //  130, props_to_be_added\n    'continue': [0x91, 0xc0], //  145, props_to_be_added\n    'sprite': [0xd3, 0x88], //  211, props_to_be_added\n    'voice': [0x96, 0x88], //  150, props_to_be_added\n    'bitmap': [0xc2, 0x88], //  194, props_to_be_added\n    'font': [0xd6, 0x88], //  214, props_to_be_added\n    'settings': [0xda, 0x80], //  218, props_to_be_added\n};\nconst COMMANDS_LIST = [\n    'locate', //  128, 0x80\n    'read', //  129, 0x81\n    'break', //  130, 0x82\n    'call', //  131, 0x83\n    'def', //  132, 0x84\n    'endif', //  133, 0x85\n    'for', //  134, 0x86\n    'goto', //  135, 0x87\n    'local', //  136, 0x88\n    'if', //  137, 0x89\n    'fend', //  138, 0x8a\n    'clr', //  139, 0x8b\n    'let', //  140, 0x8c\n    'memset', //  141, 0x8d\n    'next', //  142, 0x8e\n    'on', //  143, 0x8f\n    'poke', //  144, 0x90\n    'continue', //  145, 0x91\n    'repeat', //  146, 0x92\n    'set', //  147, 0x93\n    'then', //  148, 0x94\n    'until', //  149, 0x95\n    'voice', //  150, 0x96\n    'while', //  151, 0x97\n    'exec', //  152, 0x98\n    'input', //  153, 0x99\n    'sys', //  154, 0x9a\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'inc', //  171, 0xab\n    '',\n    'dec', //  173, 0xad\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'print', //  192, 0xc0\n    'data', //  193, 0xc1\n    'bitmap', //  194, 0xc2\n    'fcall', //  195, 0xc3\n    'dend', //  196, 0xc4\n    'else', //  197, 0xc5\n    'fast', //  198, 0xc6\n    'gosub', //  199, 0xc7\n    'elif', //  200, 0xc8\n    'dim', //  201, 0xc9\n    'open', //  202, 0xca\n    'color', //  203, 0xcb\n    'loop', //  204, 0xcc\n    'memcopy', //  205, 0xcd\n    'end', //  206, 0xce\n    'do', //  207, 0xcf\n    'dpoke', //  208, 0xd0\n    'close', //  209, 0xd1\n    'return', //  210, 0xd2\n    'sprite', //  211, 0xd3\n    'timer', //  212, 0xd4\n    'get', //  213, 0xd5\n    'font', //  214, 0xd6\n    'wait', //  215, 0xd7\n    '',\n    'inkey', //  217, 0xd9\n    'settings', //  218, 0xda\n];\nconst COMMANDS_BY_CODE = {\n    192: ['print', 0x80], // 0xc0, props_to_be_added\n    128: ['locate', 0x82], // 0x80, props_to_be_added\n    171: ['inc', 0x80], // 0xab, props_to_be_added\n    173: ['dec', 0x80], // 0xad, props_to_be_added\n    140: ['let', 0x80], // 0x8c, props_to_be_added\n    147: ['set', 0x80], // 0x93, props_to_be_added\n    134: ['for', 0xa0], // 0x86, props_to_be_added\n    142: ['next', 0xc0], // 0x8e, props_to_be_added\n    146: ['repeat', 0xa0], // 0x92, props_to_be_added\n    137: ['if', 0xb0], // 0x89, props_to_be_added\n    148: ['then', 0xc0], // 0x94, props_to_be_added\n    133: ['endif', 0xc0], // 0x85, props_to_be_added\n    197: ['else', 0x90], // 0xc5, props_to_be_added\n    200: ['elif', 0x90], // 0xc8, props_to_be_added\n    207: ['do', 0xe0], // 0xcf, props_to_be_added\n    204: ['loop', 0xc0], // 0xcc, props_to_be_added\n    151: ['while', 0x81], // 0x97, props_to_be_added\n    149: ['until', 0x81], // 0x95, props_to_be_added\n    198: ['fast', 0xa0], // 0xc6, props_to_be_added\n    195: ['fcall', 0x80], // 0xc3, props_to_be_added\n    138: ['fend', 0xc0], // 0x8a, props_to_be_added\n    144: ['poke', 0x81], // 0x90, props_to_be_added\n    208: ['dpoke', 0x81], // 0xd0, props_to_be_added\n    129: ['read', 0x80], // 0x81, props_to_be_added\n    132: ['def', 0xa0], // 0x84, props_to_be_added\n    131: ['call', 0x80], // 0x83, props_to_be_added\n    196: ['dend', 0xc0], // 0xc4, props_to_be_added\n    135: ['goto', 0x81], // 0x87, props_to_be_added\n    199: ['gosub', 0x81], // 0xc7, props_to_be_added\n    143: ['on', 0x80], // 0x8f, props_to_be_added\n    210: ['return', 0x81], // 0xd2, props_to_be_added\n    206: ['end', 0xc0], // 0xce, props_to_be_added\n    139: ['clr', 0x80], // 0x8b, props_to_be_added\n    201: ['dim', 0xa0], // 0xc9, props_to_be_added\n    136: ['local', 0x80], // 0x88, props_to_be_added\n    217: ['inkey', 0x80], // 0xd9, props_to_be_added\n    154: ['sys', 0x80], // 0x9a, props_to_be_added\n    215: ['wait', 0x82], // 0xd7, props_to_be_added\n    153: ['input', 0x81], // 0x99, props_to_be_added\n    212: ['timer', 0x80], // 0xd4, props_to_be_added\n    205: ['memcopy', 0x82], // 0xcd, props_to_be_added\n    141: ['memset', 0x82], // 0x8d, props_to_be_added\n    203: ['color', 0x82], // 0xcb, props_to_be_added\n    193: ['data', 0x80], // 0xc1, props_to_be_added\n    152: ['exec', 0x81], // 0x98, props_to_be_added\n    202: ['open', 0x80], // 0xca, props_to_be_added\n    213: ['get', 0x80], // 0xd5, props_to_be_added\n    209: ['close', 0x81], // 0xd1, props_to_be_added\n    130: ['break', 0xc0], // 0x82, props_to_be_added\n    145: ['continue', 0xc0], // 0x91, props_to_be_added\n    211: ['sprite', 0x88], // 0xd3, props_to_be_added\n    150: ['voice', 0x88], // 0x96, props_to_be_added\n    194: ['bitmap', 0x88], // 0xc2, props_to_be_added\n    214: ['font', 0x88], // 0xd6, props_to_be_added\n    218: ['settings', 0x80], // 0xda, props_to_be_added\n};\nconst COMMANDS_CTT = {\n    192: 'print', // 0xc0, props_to_be_added\n    128: 'locate', // 0x80, props_to_be_added\n    171: 'inc', // 0xab, props_to_be_added\n    173: 'dec', // 0xad, props_to_be_added\n    140: 'let', // 0x8c, props_to_be_added\n    147: 'set', // 0x93, props_to_be_added\n    134: 'for', // 0x86, props_to_be_added\n    142: 'next', // 0x8e, props_to_be_added\n    146: 'repeat', // 0x92, props_to_be_added\n    137: 'if', // 0x89, props_to_be_added\n    148: 'then', // 0x94, props_to_be_added\n    133: 'endif', // 0x85, props_to_be_added\n    197: 'else', // 0xc5, props_to_be_added\n    200: 'elif', // 0xc8, props_to_be_added\n    207: 'do', // 0xcf, props_to_be_added\n    204: 'loop', // 0xcc, props_to_be_added\n    151: 'while', // 0x97, props_to_be_added\n    149: 'until', // 0x95, props_to_be_added\n    198: 'fast', // 0xc6, props_to_be_added\n    195: 'fcall', // 0xc3, props_to_be_added\n    138: 'fend', // 0x8a, props_to_be_added\n    144: 'poke', // 0x90, props_to_be_added\n    208: 'dpoke', // 0xd0, props_to_be_added\n    129: 'read', // 0x81, props_to_be_added\n    132: 'def', // 0x84, props_to_be_added\n    131: 'call', // 0x83, props_to_be_added\n    196: 'dend', // 0xc4, props_to_be_added\n    135: 'goto', // 0x87, props_to_be_added\n    199: 'gosub', // 0xc7, props_to_be_added\n    143: 'on', // 0x8f, props_to_be_added\n    210: 'return', // 0xd2, props_to_be_added\n    206: 'end', // 0xce, props_to_be_added\n    139: 'clr', // 0x8b, props_to_be_added\n    201: 'dim', // 0xc9, props_to_be_added\n    136: 'local', // 0x88, props_to_be_added\n    217: 'inkey', // 0xd9, props_to_be_added\n    154: 'sys', // 0x9a, props_to_be_added\n    215: 'wait', // 0xd7, props_to_be_added\n    153: 'input', // 0x99, props_to_be_added\n    212: 'timer', // 0xd4, props_to_be_added\n    205: 'memcopy', // 0xcd, props_to_be_added\n    141: 'memset', // 0x8d, props_to_be_added\n    203: 'color', // 0xcb, props_to_be_added\n    193: 'data', // 0xc1, props_to_be_added\n    152: 'exec', // 0x98, props_to_be_added\n    202: 'open', // 0xca, props_to_be_added\n    213: 'get', // 0xd5, props_to_be_added\n    209: 'close', // 0xd1, props_to_be_added\n    130: 'break', // 0x82, props_to_be_added\n    145: 'continue', // 0x91, props_to_be_added\n    211: 'sprite', // 0xd3, props_to_be_added\n    150: 'voice', // 0x96, props_to_be_added\n    194: 'bitmap', // 0xc2, props_to_be_added\n    214: 'font', // 0xd6, props_to_be_added\n    218: 'settings', // 0xda, props_to_be_added\n};\nconst COMMANDS_TTC = {\n    'print': 0xc0, //  192, props_to_be_added\n    'locate': 0x80, //  128, props_to_be_added\n    'inc': 0xab, //  171, props_to_be_added\n    'dec': 0xad, //  173, props_to_be_added\n    'let': 0x8c, //  140, props_to_be_added\n    'set': 0x93, //  147, props_to_be_added\n    'for': 0x86, //  134, props_to_be_added\n    'next': 0x8e, //  142, props_to_be_added\n    'repeat': 0x92, //  146, props_to_be_added\n    'if': 0x89, //  137, props_to_be_added\n    'then': 0x94, //  148, props_to_be_added\n    'endif': 0x85, //  133, props_to_be_added\n    'else': 0xc5, //  197, props_to_be_added\n    'elif': 0xc8, //  200, props_to_be_added\n    'do': 0xcf, //  207, props_to_be_added\n    'loop': 0xcc, //  204, props_to_be_added\n    'while': 0x97, //  151, props_to_be_added\n    'until': 0x95, //  149, props_to_be_added\n    'fast': 0xc6, //  198, props_to_be_added\n    'fcall': 0xc3, //  195, props_to_be_added\n    'fend': 0x8a, //  138, props_to_be_added\n    'poke': 0x90, //  144, props_to_be_added\n    'dpoke': 0xd0, //  208, props_to_be_added\n    'read': 0x81, //  129, props_to_be_added\n    'def': 0x84, //  132, props_to_be_added\n    'call': 0x83, //  131, props_to_be_added\n    'dend': 0xc4, //  196, props_to_be_added\n    'goto': 0x87, //  135, props_to_be_added\n    'gosub': 0xc7, //  199, props_to_be_added\n    'on': 0x8f, //  143, props_to_be_added\n    'return': 0xd2, //  210, props_to_be_added\n    'end': 0xce, //  206, props_to_be_added\n    'clr': 0x8b, //  139, props_to_be_added\n    'dim': 0xc9, //  201, props_to_be_added\n    'local': 0x88, //  136, props_to_be_added\n    'inkey': 0xd9, //  217, props_to_be_added\n    'sys': 0x9a, //  154, props_to_be_added\n    'wait': 0xd7, //  215, props_to_be_added\n    'input': 0x99, //  153, props_to_be_added\n    'timer': 0xd4, //  212, props_to_be_added\n    'memcopy': 0xcd, //  205, props_to_be_added\n    'memset': 0x8d, //  141, props_to_be_added\n    'color': 0xcb, //  203, props_to_be_added\n    'data': 0xc1, //  193, props_to_be_added\n    'exec': 0x98, //  152, props_to_be_added\n    'open': 0xca, //  202, props_to_be_added\n    'get': 0xd5, //  213, props_to_be_added\n    'close': 0xd1, //  209, props_to_be_added\n    'break': 0x82, //  130, props_to_be_added\n    'continue': 0x91, //  145, props_to_be_added\n    'sprite': 0xd3, //  211, props_to_be_added\n    'voice': 0x96, //  150, props_to_be_added\n    'bitmap': 0xc2, //  194, props_to_be_added\n    'font': 0xd6, //  214, props_to_be_added\n    'settings': 0xda, //  218, props_to_be_added\n};\n\nexport { COMMANDS_BY_CODE, COMMANDS_BY_NAME, COMMANDS_CTT, COMMANDS_LIST, COMMANDS_TTC };\n//# sourceMappingURL=commands.js.map\n","/** Data Types for Golf Basic\n    *\n    * This file is auto-generated. Do not edit manually.\n    *\n*/\n/** Data types in Golf Basic, with the following properties:\n* - shortCode: Short code for the data type\n* - longCode: Long code for the data type\n* - tokenValue: Token value for the data type\n* - type_value: Type value for the data type, can be a number or a string\n* - rangeMin: Minimum value for the data type, null if not applicable\n* - rangeMax: Maximum value for the data type, null if not applicable\n* - description: Description of the data type\n*\n*/\nconst DATA_TYPES = {\n    BYTE: {\n        shortCode: \"b\",\n        longCode: \"BYTE\",\n        tokenValue: 166, // $a6      \n        type_value: 16,\n        rangeMin: 0,\n        rangeMax: 256,\n        description: \"8bit integer number, values: 0..255\"\n    },\n    WORD: {\n        shortCode: \"W\",\n        longCode: \"WORD\",\n        tokenValue: 163, // $a3      \n        type_value: 21,\n        rangeMin: -32768,\n        rangeMax: 32768,\n        description: \"16bit signed integer number, values: -32768..32767\"\n    },\n    UWORD: {\n        shortCode: \"w\",\n        longCode: \"UWORD\",\n        tokenValue: 164, // $a4      \n        type_value: 17,\n        rangeMin: 0,\n        rangeMax: 65536,\n        description: \"16bit unsigned integer number, values: 0..65535\"\n    },\n    F08: {\n        shortCode: \"f\",\n        longCode: \"F08\",\n        tokenValue: 0, // $00   @   @\n        type_value: 24,\n        rangeMin: 0,\n        rangeMax: 1,\n        description: \"8bit unsigned fractional number, values: 0.0..1.0\"\n    },\n    F88: {\n        shortCode: \"S\",\n        longCode: \"F88\",\n        tokenValue: 0, // $00   @   @\n        type_value: 29,\n        rangeMin: -128,\n        rangeMax: 128,\n        description: \"16bit signed fractional number, values: -128.0..128.0\"\n    },\n    F2416: {\n        shortCode: \"L\",\n        longCode: \"F2416\",\n        tokenValue: 165, // $a5      \n        type_value: 30,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"5 bytes signed number, 24bit integer and 16 bit fractional part\"\n    },\n    FLOAT: {\n        shortCode: \"%\",\n        longCode: \"FLOAT\",\n        tokenValue: 0, // $00   @   @\n        type_value: 31,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"Legacy float number\"\n    },\n    CHAR: {\n        shortCode: \"c\",\n        longCode: \"CHAR\",\n        tokenValue: 160, // $a0      \n        type_value: 0,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"8bit single character\"\n    },\n    DCHAR: {\n        shortCode: \"d\",\n        longCode: \"DCHAR\",\n        tokenValue: 0, // $00   @   @\n        type_value: 1,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"16bit, 2 characters\"\n    },\n    VARSTR: {\n        shortCode: \"$\",\n        longCode: \"VARSTR\",\n        tokenValue: -1, // $-1      \n        type_value: 2,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"Variable length string - each operation creates a new item in memory. Data: [len][STR...]\"\n    },\n    FIXSTR: {\n        shortCode: \"$\",\n        longCode: \"FIXSTR\",\n        tokenValue: -1, // $-1      \n        type_value: 3,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"Fixed length string, always uses the same memory. Data: [maxlen][len][STR...][unused...]\"\n    },\n    NONE: {\n        shortCode: \"0\",\n        longCode: \"NONE\",\n        tokenValue: 0, // $00   @   @\n        type_value: 0,\n        rangeMin: 0,\n        rangeMax: 0,\n        description: \"\"\n    },\n    UBYTE: {\n        shortCode: \"b\",\n        longCode: \"UBYTE\",\n        tokenValue: 0, // $00   @   @\n        type_value: 16,\n        rangeMin: 0,\n        rangeMax: 256,\n        description: \"\"\n    },\n    SBYTE: {\n        shortCode: \"B\",\n        longCode: \"SBYTE\",\n        tokenValue: 0, // $00   @   @\n        type_value: 20,\n        rangeMin: -128,\n        rangeMax: 128,\n        description: \"\"\n    },\n    SWORD: {\n        shortCode: \"W\",\n        longCode: \"SWORD\",\n        tokenValue: 0, // $00   @   @\n        type_value: 21,\n        rangeMin: -32768,\n        rangeMax: 32768,\n        description: \"\"\n    },\n    UF08: {\n        shortCode: \"f\",\n        longCode: \"UF08\",\n        tokenValue: 0, // $00   @   @\n        type_value: 24,\n        rangeMin: 0,\n        rangeMax: 1,\n        description: \"\"\n    },\n    SF08: {\n        shortCode: \"F\",\n        longCode: \"SF08\",\n        tokenValue: 0, // $00   @   @\n        type_value: 28,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"\"\n    },\n    UF88: {\n        shortCode: \"s\",\n        longCode: \"UF88\",\n        tokenValue: 0, // $00   @   @\n        type_value: 25,\n        rangeMin: 0,\n        rangeMax: 256,\n        description: \"\"\n    },\n    SF88: {\n        shortCode: \"S\",\n        longCode: \"SF88\",\n        tokenValue: 0, // $00   @   @\n        type_value: 29,\n        rangeMin: -128,\n        rangeMax: 128,\n        description: \"\"\n    },\n    UF2416: {\n        shortCode: \"l\",\n        longCode: \"UF2416\",\n        tokenValue: 0, // $00   @   @\n        type_value: 26,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"\"\n    },\n    SF2416: {\n        shortCode: \"L\",\n        longCode: \"SF2416\",\n        tokenValue: 0, // $00   @   @\n        type_value: 30,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"\"\n    },\n};\n/** Short codes for data types in Golf Basic, with the following properties:\n* - shortCode: Short code for the data type\n* - longCode: Long code for the data type\n* - tokenValue: Token value for the data type\n* - type_value: Type value for the data type, can be a number or a string\n* - rangeMin: Minimum value for the data type, null if not applicable\n* - rangeMax: Maximum value for the data type, null if not applicable\n* - description: Description of the data type\n*\n*/\nconst DATA_TYPES_BY_SHORT_CODE = {\n    'b': {\n        shortCode: \"b\",\n        longCode: \"UBYTE\",\n        tokenValue: 0, // $00   @   @\n        type_value: 16,\n        rangeMin: 0,\n        rangeMax: 256,\n        description: \"\"\n    },\n    'W': {\n        shortCode: \"W\",\n        longCode: \"SWORD\",\n        tokenValue: 0, // $00   @   @\n        type_value: 21,\n        rangeMin: -32768,\n        rangeMax: 32768,\n        description: \"\"\n    },\n    'w': {\n        shortCode: \"w\",\n        longCode: \"UWORD\",\n        tokenValue: 164, // $a4      \n        type_value: 17,\n        rangeMin: 0,\n        rangeMax: 65536,\n        description: \"16bit unsigned integer number, values: 0..65535\"\n    },\n    'f': {\n        shortCode: \"f\",\n        longCode: \"UF08\",\n        tokenValue: 0, // $00   @   @\n        type_value: 24,\n        rangeMin: 0,\n        rangeMax: 1,\n        description: \"\"\n    },\n    'S': {\n        shortCode: \"S\",\n        longCode: \"SF88\",\n        tokenValue: 0, // $00   @   @\n        type_value: 29,\n        rangeMin: -128,\n        rangeMax: 128,\n        description: \"\"\n    },\n    'L': {\n        shortCode: \"L\",\n        longCode: \"SF2416\",\n        tokenValue: 0, // $00   @   @\n        type_value: 30,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"\"\n    },\n    '%': {\n        shortCode: \"%\",\n        longCode: \"FLOAT\",\n        tokenValue: 0, // $00   @   @\n        type_value: 31,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"Legacy float number\"\n    },\n    'c': {\n        shortCode: \"c\",\n        longCode: \"CHAR\",\n        tokenValue: 160, // $a0      \n        type_value: 0,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"8bit single character\"\n    },\n    'd': {\n        shortCode: \"d\",\n        longCode: \"DCHAR\",\n        tokenValue: 0, // $00   @   @\n        type_value: 1,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"16bit, 2 characters\"\n    },\n    '$': {\n        shortCode: \"$\",\n        longCode: \"FIXSTR\",\n        tokenValue: -1, // $-1      \n        type_value: 3,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"Fixed length string, always uses the same memory. Data: [maxlen][len][STR...][unused...]\"\n    },\n    '0': {\n        shortCode: \"0\",\n        longCode: \"NONE\",\n        tokenValue: 0, // $00   @   @\n        type_value: 0,\n        rangeMin: 0,\n        rangeMax: 0,\n        description: \"\"\n    },\n    'B': {\n        shortCode: \"B\",\n        longCode: \"SBYTE\",\n        tokenValue: 0, // $00   @   @\n        type_value: 20,\n        rangeMin: -128,\n        rangeMax: 128,\n        description: \"\"\n    },\n    'F': {\n        shortCode: \"F\",\n        longCode: \"SF08\",\n        tokenValue: 0, // $00   @   @\n        type_value: 28,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"\"\n    },\n    's': {\n        shortCode: \"s\",\n        longCode: \"UF88\",\n        tokenValue: 0, // $00   @   @\n        type_value: 25,\n        rangeMin: 0,\n        rangeMax: 256,\n        description: \"\"\n    },\n    'l': {\n        shortCode: \"l\",\n        longCode: \"UF2416\",\n        tokenValue: 0, // $00   @   @\n        type_value: 26,\n        rangeMin: null,\n        rangeMax: null,\n        description: \"\"\n    },\n};\n/** Dictionary mapping from Full Type Names to Short Codes.\n* E.g. 'UBYTE': 'b'.\n*/\nconst DATA_TYPES_DICT_NAME_TO_SHORT_CODE = {\n    'BYTE': 'b',\n    'WORD': 'W',\n    'UWORD': 'w',\n    'F08': 'f',\n    'F88': 'S',\n    'F2416': 'L',\n    'FLOAT': '%',\n    'CHAR': 'c',\n    'DCHAR': 'd',\n    'VARSTR': '$',\n    'FIXSTR': '$',\n    'NONE': '0',\n    'UBYTE': 'b',\n    'SBYTE': 'B',\n    'SWORD': 'W',\n    'UF08': 'f',\n    'SF08': 'F',\n    'UF88': 's',\n    'SF88': 'S',\n    'UF2416': 'l',\n    'SF2416': 'L',\n};\n/** Dictionary mapping from Type Short Names to Full Type Name.\n* E.g. 'b': 'UBYTE'.\n*/\nconst DATA_TYPES_DICT_SHORT_CODE_TO_NAME = {\n    'b': 'UBYTE',\n    'W': 'SWORD',\n    'w': 'UWORD',\n    'f': 'UF08',\n    'S': 'SF88',\n    'L': 'SF2416',\n    '%': 'FLOAT',\n    'c': 'CHAR',\n    'd': 'DCHAR',\n    '$': 'FIXSTR',\n    '0': 'NONE',\n    'B': 'SBYTE',\n    'F': 'SF08',\n    's': 'UF88',\n    'l': 'UF2416',\n};\n/** Dictionary mapping from Type Short and Full Names to Type Codes.\n* E.g. 'b': 16, 'UBYTE': 16.\n*/\nconst DATA_TYPES_TYPE_NAME_TO_TYPE_CODE = {\n    'b': 16,\n    'BYTE': 16,\n    'W': 21,\n    'WORD': 21,\n    'w': 17,\n    'UWORD': 17,\n    'f': 24,\n    'F08': 24,\n    'S': 29,\n    'F88': 29,\n    'L': 30,\n    'F2416': 30,\n    '%': 31,\n    'FLOAT': 31,\n    'c': 0,\n    'CHAR': 0,\n    'd': 1,\n    'DCHAR': 1,\n    '$': 3,\n    'VARSTR': 2,\n    'FIXSTR': 3,\n    '0': 0,\n    'NONE': 0,\n    'UBYTE': 16,\n    'B': 20,\n    'SBYTE': 20,\n    'SWORD': 21,\n    'UF08': 24,\n    'F': 28,\n    'SF08': 28,\n    's': 25,\n    'UF88': 25,\n    'SF88': 29,\n    'l': 26,\n    'UF2416': 26,\n    'SF2416': 30,\n};\n\nexport { DATA_TYPES, DATA_TYPES_BY_SHORT_CODE, DATA_TYPES_DICT_NAME_TO_SHORT_CODE, DATA_TYPES_DICT_SHORT_CODE_TO_NAME, DATA_TYPES_TYPE_NAME_TO_TYPE_CODE };\n//# sourceMappingURL=dataTypes.js.map\n","/** Font commands - as code-to-text and text-to-code dictionaries*/\nconst FONT_CMD_CTT = {\n    0: 'font_set_source0_target0', // 0, 0x00,                      Sets both source and target font for font#0 ($d000-$d7ff).\n    1: 'font_set_source0_target1', // 1, 0x01,                      Sets the source font for font#0 ($d000-$d7ff) and the targe\n    4: 'font_set_source1_target0', // 4, 0x04,                      Sets the source font for font#1 ($d800-$dfff) and the targe\n    5: 'font_set_source1_target1', // 5, 0x05,                      Sets both source and target font for font#1 ($d800-$dfff).\n    8: 'font_set_source_rom_target0', // 8, 0x08,                      Sets the source font for the ROM font and the target for fo\n    9: 'font_set_source_rom_target1', // 9, 0x09,                      Sets the source font for the ROM font and the target for fo\n    16: 'font_def_uncompressed_multi', // 16, 0x10, (count,target_idx,data)  Sets `count` pieces of characters starting from `target\n    17: 'font_def_uncompressed_1', // 17, 0x11, (target_idx,data)    Sets a single character starting from `target_idx`. Data is\n    18: 'font_def_uncompressed_2', // 18, 0x12, (target_idx,data)    Sets 2 characters starting from `target_idx`. Data is the b\n    19: 'font_def_uncompressed_3', // 19, 0x13, (target_idx,data)    Sets 3 characters starting from `target_idx`. Data is the b\n    20: 'font_def_uncompressed_4', // 20, 0x14, (target_idx,data)    Sets 4 characters starting from `target_idx`. Data is the b\n    21: 'font_def_uncompressed_5', // 21, 0x15, (target_idx,data)    Sets 5 characters starting from `target_idx`. Data is the b\n    22: 'font_def_uncompressed_6', // 22, 0x16, (target_idx,data)    Sets 6 characters starting from `target_idx`. Data is the b\n    23: 'font_def_uncompressed_7', // 23, 0x17, (target_idx,data)    Sets 7 characters starting from `target_idx`. Data is the b\n    24: 'font_copy_full', // 24, 0x18,                      Copy the full source font to the target font.\n    25: 'font_copy_lo', // 25, 0x19,                      Copy characters 0x00-0x7f to the target font.\n    26: 'font_copy_hi', // 26, 0x1a,                      Copy characters 0x80-0xff to the target font.\n    27: 'font_copy_range_same_index', // 27, 0x1b, (idx,count)          Copy the full source font to the target font.\n    28: 'font_copy_range', // 28, 0x1c, (source_idx,target_idx,count)  Copy `count` items from source index to target in\n    32: 'font_create_2x1', // 32, 0x20, (source_idx,target_idx,count)  Create double wide characters starting from `sour\n    33: 'font_create_2x2', // 33, 0x21, (source_idx,target_idx,count)  Create double wide and tall characters starting f\n    35: 'font_map_4x4_from', // 35, 0x23, (idx)                Create mapping for 4x4 characters - needs 16 characters, st\n    36: 'font_map_4x4_full', // 36, 0x24, (mappings)           Create mapping for 4x4 characters - define all 16 character\n    37: 'font_map_4x8_default', // 37, 0x25,                      Use default mapping for 4x8 characters.\n    38: 'font_map_4x8_full', // 38, 0x26, (mappings)           Create mapping for 4x8 characters - define all 4 character \n    39: 'font_map_8x4_default', // 39, 0x27,                      Use default mapping for 8x4 characters.\n    40: 'font_map_8x4_full', // 40, 0x28, (mappings)           Create mapping for 8x4 characters - define all 4 character \n    41: 'font_set_8x8_fill', // 41, 0x29, (fill_char)          Define character for filling 8x8 fonts.\n    48: 'font_use_1x1', // 48, 0x30,                      Use normal 1x1 font.\n    49: 'font_use_2x1', // 49, 0x31,                      Use double wide font. Mapping is needed with CREATE_2x1!\n    50: 'font_use_2x2', // 50, 0x32,                      Use full double font.  Mapping is needed with CREATE_2x2!\n    51: 'font_use_4x4', // 51, 0x33,                      Use a 4times larger font. 16 characters is used for that.\n    52: 'font_use_4x8', // 52, 0x34,                      Use a 4x8times larger font. 4 characters is used for that.\n    53: 'font_use_8x4', // 53, 0x35,                      Use a 8x4times larger font. 4 characters is used for that.\n    54: 'font_use_8x8', // 54, 0x36,                      Use a 8x8times larger font. A single fill characters is use\n    64: 'font_invert_all', // 64, 0x40,                      Characters 0x00-0x7f will be inverted at 0x80-0xff.\n    65: 'font_invert_range', // 65, 0x41, (src_idx,count,dest_idx)  `count` pieces of characters starting from `src_idx` w\n    81: 'font_create_from_spr_3x3', // 81, 0x51, (spr_idx,dest_idx)   Copies the full sprite data of `spr_idx` to 3x3 characters \n    82: 'font_create_from_spr_3x2', // 82, 0x52, (spr_idx,dest_idx)   Copies the sprite data of `spr_idx` to 3x2 characters start\n    83: 'font_create_from_spr_2x3', // 83, 0x53, (spr_idx,dest_idx)   Copies the sprite data of `spr_idx` to 2x3 characters start\n    84: 'font_create_from_spr_2x2', // 84, 0x54, (spr_idx,dest_idx)   Copies the sprite data of `spr_idx` to 2x2 characters start\n};\nconst FONT_CMD_TTC = {\n    /** Sets both source and target font for font#0 ($d000-$d7ff). */\n    'font_set_source0_target0': 0x00,\n    /** Sets the source font for font#0 ($d000-$d7ff) and the target for font#1 at $d800-$dfff. */\n    'font_set_source0_target1': 0x01,\n    /** Sets the source font for font#1 ($d800-$dfff) and the target for font#0 at $d000-$d7ff. */\n    'font_set_source1_target0': 0x04,\n    /** Sets both source and target font for font#1 ($d800-$dfff). */\n    'font_set_source1_target1': 0x05,\n    /** Sets the source font for the ROM font and the target for font#1 at $d000-$d7ff. */\n    'font_set_source_rom_target0': 0x08,\n    /** Sets the source font for the ROM font and the target for font #1 at $d800-$7fff. */\n    'font_set_source_rom_target1': 0x09,\n    /** (count,target_idx,data)\nSets `count` pieces of characters starting from `target_idx`. Data is the bitmap defintion, containing `count`*8 bytes. */\n    'font_def_uncompressed_multi': 0x10,\n    /** (target_idx,data)\nSets a single character starting from `target_idx`. Data is the bitmap defintion, containing 8 bytes. */\n    'font_def_uncompressed_1': 0x11,\n    /** (target_idx,data)\nSets 2 characters starting from `target_idx`. Data is the bitmap defintion, containing 2*8 bytes. */\n    'font_def_uncompressed_2': 0x12,\n    /** (target_idx,data)\nSets 3 characters starting from `target_idx`. Data is the bitmap defintion, containing 3*8 bytes. */\n    'font_def_uncompressed_3': 0x13,\n    /** (target_idx,data)\nSets 4 characters starting from `target_idx`. Data is the bitmap defintion, containing 4*8 bytes. */\n    'font_def_uncompressed_4': 0x14,\n    /** (target_idx,data)\nSets 5 characters starting from `target_idx`. Data is the bitmap defintion, containing 5*8 bytes. */\n    'font_def_uncompressed_5': 0x15,\n    /** (target_idx,data)\nSets 6 characters starting from `target_idx`. Data is the bitmap defintion, containing 6*8 bytes. */\n    'font_def_uncompressed_6': 0x16,\n    /** (target_idx,data)\nSets 7 characters starting from `target_idx`. Data is the bitmap defintion, containing 7*8 bytes. */\n    'font_def_uncompressed_7': 0x17,\n    /** Copy the full source font to the target font. */\n    'font_copy_full': 0x18,\n    /** Copy characters 0x00-0x7f to the target font. */\n    'font_copy_lo': 0x19,\n    /** Copy characters 0x80-0xff to the target font. */\n    'font_copy_hi': 0x1a,\n    /** (idx,count)\nCopy the full source font to the target font. */\n    'font_copy_range_same_index': 0x1b,\n    /** (source_idx,target_idx,count)\nCopy `count` items from source index to target index. */\n    'font_copy_range': 0x1c,\n    /** (source_idx,target_idx,count)\nCreate double wide characters starting from `source_idx`, doing `count` items,and characters starting at `target_idx` will be used for that.All character require 2 characters for that! */\n    'font_create_2x1': 0x20,\n    /** (source_idx,target_idx,count)\nCreate double wide and tall characters starting from `source_idx`, doing `count` items,and characters starting at `target_idx` will be used for that.All characters require 4 characters for that! */\n    'font_create_2x2': 0x21,\n    /** (idx)\nCreate mapping for 4x4 characters - needs 16 characters, starting from `idx.`E.g. if `idx` is 0x90, 0x90 is for blank, 0x91 is upper left etc.Coordinate bit values: UL=1, UR=2, LL=4, LR=8 for upper, lower, left and right. */\n    'font_map_4x4_from': 0x23,\n    /** (mappings)\nCreate mapping for 4x4 characters - define all 16 character codes.See above for details about mapping. */\n    'font_map_4x4_full': 0x24,\n    /** Use default mapping for 4x8 characters. */\n    'font_map_4x8_default': 0x25,\n    /** (mappings)\nCreate mapping for 4x8 characters - define all 4 character codes.Coordinate bit values: L=1, R=2. */\n    'font_map_4x8_full': 0x26,\n    /** Use default mapping for 8x4 characters. */\n    'font_map_8x4_default': 0x27,\n    /** (mappings)\nCreate mapping for 8x4 characters - define all 4 character codes.Coordinate bit values: U=1, L=2. */\n    'font_map_8x4_full': 0x28,\n    /** (fill_char)\nDefine character for filling 8x8 fonts. */\n    'font_set_8x8_fill': 0x29,\n    /** Use normal 1x1 font. */\n    'font_use_1x1': 0x30,\n    /** Use double wide font. Mapping is needed with CREATE_2x1! */\n    'font_use_2x1': 0x31,\n    /** Use full double font.  Mapping is needed with CREATE_2x2! */\n    'font_use_2x2': 0x32,\n    /** Use a 4times larger font. 16 characters is used for that. */\n    'font_use_4x4': 0x33,\n    /** Use a 4x8times larger font. 4 characters is used for that. */\n    'font_use_4x8': 0x34,\n    /** Use a 8x4times larger font. 4 characters is used for that. */\n    'font_use_8x4': 0x35,\n    /** Use a 8x8times larger font. A single fill characters is used for that. */\n    'font_use_8x8': 0x36,\n    /** Characters 0x00-0x7f will be inverted at 0x80-0xff. */\n    'font_invert_all': 0x40,\n    /** (src_idx,count,dest_idx)\n`count` pieces of characters starting from `src_idx` will be inverted at `dest_idx`. */\n    'font_invert_range': 0x41,\n    /** (spr_idx,dest_idx)\nCopies the full sprite data of `spr_idx` to 3x3 characters starting from `dest_idx`. */\n    'font_create_from_spr_3x3': 0x51,\n    /** (spr_idx,dest_idx)\nCopies the sprite data of `spr_idx` to 3x2 characters starting from `dest_idx`.Only the first 16 rows will be copied! */\n    'font_create_from_spr_3x2': 0x52,\n    /** (spr_idx,dest_idx)\nCopies the sprite data of `spr_idx` to 2x3 characters starting from `dest_idx`.Only the first 16 columns will be copied! */\n    'font_create_from_spr_2x3': 0x53,\n    /** (spr_idx,dest_idx)\nCopies the sprite data of `spr_idx` to 2x2 characters starting from `dest_idx`.Only the first 16 rows and columns will be copied! */\n    'font_create_from_spr_2x2': 0x54,\n};\n\nexport { FONT_CMD_CTT, FONT_CMD_TTC };\n//# sourceMappingURL=fontCmdConsts.js.map\n","/**Functions*/\nconst FUNCTIONS_BY_NAME = {\n    'pi': [0xde, 0x40], //  222, props_to_be_added\n    'fpi': [0xe9, 0x40], //  233, props_to_be_added\n    'to': [0xdc, 0x40], //  220, props_to_be_added\n    'step': [0xe8, 0x40], //  232, props_to_be_added\n    'peek': [0xef, 0x62], //  239, props_to_be_added\n    'dpeek': [0xec, 0x62], //  236, props_to_be_added\n    'rnd': [0xf2, 0x62], //  242, props_to_be_added\n    'cos': [0xe1, 0x61], //  225, props_to_be_added\n    'sin': [0xee, 0x61], //  238, props_to_be_added\n    'tan': [0xe3, 0x61], //  227, props_to_be_added\n    'atn': [0xea, 0x61], //  234, props_to_be_added\n    'int': [0xe2, 0x61], //  226, props_to_be_added\n    'frac': [0xeb, 0x61], //  235, props_to_be_added\n    'ord': [0xf9, 0x61], //  249, props_to_be_added\n    'chr': [0xfc, 0x61], //  252, props_to_be_added\n    'when': [0xf3, 0x62], //  243, props_to_be_added\n    'addr': [0xe4, 0x40], //  228, props_to_be_added\n    'len': [0xf6, 0x61], //  246, props_to_be_added\n    'val': [0xfe, 0x61], //  254, props_to_be_added\n    'abs': [0xf0, 0x61], //  240, props_to_be_added\n    'left': [0xf1, 0x62], //  241, props_to_be_added\n    'mid': [0xe7, 0x62], //  231, props_to_be_added\n    'right': [0xdf, 0x62], //  223, props_to_be_added\n    'find': [0xfd, 0x60], //  253, props_to_be_added\n    'sub': [0xf8, 0x60], //  248, props_to_be_added\n    'time': [0xf7, 0x40], //  247, props_to_be_added\n    'tab': [0xf5, 0x61], //  245, props_to_be_added\n    'spc': [0xed, 0x61], //  237, props_to_be_added\n    'sgn': [0xe5, 0x61], //  229, props_to_be_added\n    'fn': [0xfb, 0x40], //  251, props_to_be_added\n    'has': [0xf4, 0x62], //  244, props_to_be_added\n    'between': [0xff, 0x62], //  255, props_to_be_added\n    'limit': [0xe6, 0x62], //  230, props_to_be_added\n};\nconst FUNCTIONS_LIST = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    'to', //  220, 0xdc\n    '',\n    'pi', //  222, 0xde\n    'right', //  223, 0xdf\n    '',\n    'cos', //  225, 0xe1\n    'int', //  226, 0xe2\n    'tan', //  227, 0xe3\n    'addr', //  228, 0xe4\n    'sgn', //  229, 0xe5\n    'limit', //  230, 0xe6\n    'mid', //  231, 0xe7\n    'step', //  232, 0xe8\n    'fpi', //  233, 0xe9\n    'atn', //  234, 0xea\n    'frac', //  235, 0xeb\n    'dpeek', //  236, 0xec\n    'spc', //  237, 0xed\n    'sin', //  238, 0xee\n    'peek', //  239, 0xef\n    'abs', //  240, 0xf0\n    'left', //  241, 0xf1\n    'rnd', //  242, 0xf2\n    'when', //  243, 0xf3\n    'has', //  244, 0xf4\n    'tab', //  245, 0xf5\n    'len', //  246, 0xf6\n    'time', //  247, 0xf7\n    'sub', //  248, 0xf8\n    'ord', //  249, 0xf9\n    '',\n    'fn', //  251, 0xfb\n    'chr', //  252, 0xfc\n    'find', //  253, 0xfd\n    'val', //  254, 0xfe\n    'between', //  255, 0xff\n];\nconst FUNCTIONS_BY_CODE = {\n    222: ['pi', 0x40], // 0xde, props_to_be_added\n    233: ['fpi', 0x40], // 0xe9, props_to_be_added\n    220: ['to', 0x40], // 0xdc, props_to_be_added\n    232: ['step', 0x40], // 0xe8, props_to_be_added\n    239: ['peek', 0x62], // 0xef, props_to_be_added\n    236: ['dpeek', 0x62], // 0xec, props_to_be_added\n    242: ['rnd', 0x62], // 0xf2, props_to_be_added\n    225: ['cos', 0x61], // 0xe1, props_to_be_added\n    238: ['sin', 0x61], // 0xee, props_to_be_added\n    227: ['tan', 0x61], // 0xe3, props_to_be_added\n    234: ['atn', 0x61], // 0xea, props_to_be_added\n    226: ['int', 0x61], // 0xe2, props_to_be_added\n    235: ['frac', 0x61], // 0xeb, props_to_be_added\n    249: ['ord', 0x61], // 0xf9, props_to_be_added\n    252: ['chr', 0x61], // 0xfc, props_to_be_added\n    243: ['when', 0x62], // 0xf3, props_to_be_added\n    228: ['addr', 0x40], // 0xe4, props_to_be_added\n    246: ['len', 0x61], // 0xf6, props_to_be_added\n    254: ['val', 0x61], // 0xfe, props_to_be_added\n    240: ['abs', 0x61], // 0xf0, props_to_be_added\n    241: ['left', 0x62], // 0xf1, props_to_be_added\n    231: ['mid', 0x62], // 0xe7, props_to_be_added\n    223: ['right', 0x62], // 0xdf, props_to_be_added\n    253: ['find', 0x60], // 0xfd, props_to_be_added\n    248: ['sub', 0x60], // 0xf8, props_to_be_added\n    247: ['time', 0x40], // 0xf7, props_to_be_added\n    245: ['tab', 0x61], // 0xf5, props_to_be_added\n    237: ['spc', 0x61], // 0xed, props_to_be_added\n    229: ['sgn', 0x61], // 0xe5, props_to_be_added\n    251: ['fn', 0x40], // 0xfb, props_to_be_added\n    244: ['has', 0x62], // 0xf4, props_to_be_added\n    255: ['between', 0x62], // 0xff, props_to_be_added\n    230: ['limit', 0x62], // 0xe6, props_to_be_added\n};\nconst FUNCTIONS_CTT = {\n    222: 'pi', // 0xde, props_to_be_added\n    233: 'fpi', // 0xe9, props_to_be_added\n    220: 'to', // 0xdc, props_to_be_added\n    232: 'step', // 0xe8, props_to_be_added\n    239: 'peek', // 0xef, props_to_be_added\n    236: 'dpeek', // 0xec, props_to_be_added\n    242: 'rnd', // 0xf2, props_to_be_added\n    225: 'cos', // 0xe1, props_to_be_added\n    238: 'sin', // 0xee, props_to_be_added\n    227: 'tan', // 0xe3, props_to_be_added\n    234: 'atn', // 0xea, props_to_be_added\n    226: 'int', // 0xe2, props_to_be_added\n    235: 'frac', // 0xeb, props_to_be_added\n    249: 'ord', // 0xf9, props_to_be_added\n    252: 'chr', // 0xfc, props_to_be_added\n    243: 'when', // 0xf3, props_to_be_added\n    228: 'addr', // 0xe4, props_to_be_added\n    246: 'len', // 0xf6, props_to_be_added\n    254: 'val', // 0xfe, props_to_be_added\n    240: 'abs', // 0xf0, props_to_be_added\n    241: 'left', // 0xf1, props_to_be_added\n    231: 'mid', // 0xe7, props_to_be_added\n    223: 'right', // 0xdf, props_to_be_added\n    253: 'find', // 0xfd, props_to_be_added\n    248: 'sub', // 0xf8, props_to_be_added\n    247: 'time', // 0xf7, props_to_be_added\n    245: 'tab', // 0xf5, props_to_be_added\n    237: 'spc', // 0xed, props_to_be_added\n    229: 'sgn', // 0xe5, props_to_be_added\n    251: 'fn', // 0xfb, props_to_be_added\n    244: 'has', // 0xf4, props_to_be_added\n    255: 'between', // 0xff, props_to_be_added\n    230: 'limit', // 0xe6, props_to_be_added\n};\nconst FUNCTIONS_TTC = {\n    'pi': 0xde, //  222, props_to_be_added\n    'fpi': 0xe9, //  233, props_to_be_added\n    'to': 0xdc, //  220, props_to_be_added\n    'step': 0xe8, //  232, props_to_be_added\n    'peek': 0xef, //  239, props_to_be_added\n    'dpeek': 0xec, //  236, props_to_be_added\n    'rnd': 0xf2, //  242, props_to_be_added\n    'cos': 0xe1, //  225, props_to_be_added\n    'sin': 0xee, //  238, props_to_be_added\n    'tan': 0xe3, //  227, props_to_be_added\n    'atn': 0xea, //  234, props_to_be_added\n    'int': 0xe2, //  226, props_to_be_added\n    'frac': 0xeb, //  235, props_to_be_added\n    'ord': 0xf9, //  249, props_to_be_added\n    'chr': 0xfc, //  252, props_to_be_added\n    'when': 0xf3, //  243, props_to_be_added\n    'addr': 0xe4, //  228, props_to_be_added\n    'len': 0xf6, //  246, props_to_be_added\n    'val': 0xfe, //  254, props_to_be_added\n    'abs': 0xf0, //  240, props_to_be_added\n    'left': 0xf1, //  241, props_to_be_added\n    'mid': 0xe7, //  231, props_to_be_added\n    'right': 0xdf, //  223, props_to_be_added\n    'find': 0xfd, //  253, props_to_be_added\n    'sub': 0xf8, //  248, props_to_be_added\n    'time': 0xf7, //  247, props_to_be_added\n    'tab': 0xf5, //  245, props_to_be_added\n    'spc': 0xed, //  237, props_to_be_added\n    'sgn': 0xe5, //  229, props_to_be_added\n    'fn': 0xfb, //  251, props_to_be_added\n    'has': 0xf4, //  244, props_to_be_added\n    'between': 0xff, //  255, props_to_be_added\n    'limit': 0xe6, //  230, props_to_be_added\n};\n\nexport { FUNCTIONS_BY_CODE, FUNCTIONS_BY_NAME, FUNCTIONS_CTT, FUNCTIONS_LIST, FUNCTIONS_TTC };\n//# sourceMappingURL=functions.js.map\n","/** Postfix property values*/\nconst POSTFIX_BY_KEY_READ = {\n    /**\n    Type of the variable returned as VarType byte.\n    E.g. if a is a byte, at (a.type) returns VarType.byte. */\n    't': ['type', 0x00, 0x00],\n    /**\n    Size/length of the variable.\n    1 and 2 for bytes and words,\n    number of elements for arrays (if multidimensional is possible, m*n),\n    length for string. */\n    'S': ['size', 0x00, 0x00],\n    /**\n    Address of the variable,\n    pointing to the type part (TYPE LO HI).\n    For pointers, @P×G returns the pointer. (dpeek(address+1))\n    For writing: a@=53820 sets a as a pointer to 53280. a=0 changes it as a word, ah and al the distinct bytes. */\n    '@': ['addr', 0x00, 0x00],\n    /**        Convert to word. If it is a string, decimal values are valid only! E.g. '1' will be 0x01. */\n    'w': ['word', 0x20, 0x00],\n    /**        Convert to byte. If it is a string, decimal values are valid only! */\n    'b': ['byte', 0x20, 0x00],\n    /**        Convert to fix2 */\n    'f': ['fx2', 0x20, 0x00],\n    /**        Convert to fix5 */\n    'F': ['fx5', 0x20, 0x00],\n    /**        Convert to fraction. */\n    'F×': ['frac', 0x20, 0x00],\n    /**        Convert to char */\n    '$': ['chr', 0x30, 0x10],\n    /**        Convert to string decimal value. */\n    's': ['str', 0x30, 0x10],\n    /**        Get the integer part only */\n    'i': ['int', 0x30, 0x10],\n    /**        Absolute value of the number */\n    'a': ['abs', 0x30, 0x10],\n    /**        Sign - 0x80 for minus, 0x01 for positive, 0x00 for zero. */\n    'n': ['sign', 0x30, 0x10],\n    /**        Round down number */\n    'r': ['rdn', 0x30, 0x10],\n    /**        Round up number */\n    'R': ['rup', 0x30, 0x10],\n    /**        value-1 */\n    'M×': ['minus', 0x30, 0x10],\n    /**        value+1 */\n    'P×': ['plus', 0x30, 0x10],\n    /**        value*2, using bit shift left */\n    'd': ['dbl', 0x30, 0x10],\n    /**        value div 2 using bit shift right */\n    'D': ['div2', 0x30, 0x10],\n    /**\n    Cast as byte - e.g. '1' will be a byte with value 0x31.\n    (On the other hand .byte will cast '1' as 0x01.) */\n    'o': ['ord', 0x30, 0x00],\n    /**        Change string to uppercase */\n    'C': ['ucase', 0x30, 0x00],\n    /**        Change string to lowercase */\n    'c': ['lcase', 0x30, 0x00],\n    /**        Lo byte of the value. E.g. for a word with value 0xd021, it returns 0x21. */\n    'l': ['lo', 0x00, 0x00],\n    /**        Hi byte of the value. E.g. for a word with value 0xd021, it returns 0xd0. */\n    'h': ['hi', 0x00, 0x00],\n    /**        Low nibble of lo byte, 0x04 for 0x1234. */\n    'L': ['lnib', 0x00, 0x00],\n    /**        High nibble of lo byte, 0x03 for 0x1234. */\n    'H': ['hnib', 0x00, 0x00],\n    /**        Lower nibble of hi byte, 0x02 for 0x1234. */\n    'L×': ['lnib2', 0x00, 0x00],\n    /**        High nibble of hi byte, 0x01 for 0x1234. */\n    'H×': ['hnib2', 0x00, 0x00],\n    /**        Reads memory word at the address specified by the variable. E.g. aG is the same as dpeek(a) */\n    'G': ['getw', 0x18, 0x10],\n    /**        Reads memory byte at the address specified by the variable. E.g. ag is the same as peek(a) */\n    'g': ['getb', 0x18, 0x10],\n    /**        Calculates average from an array using a[0] to a[n-1] where n is the size */\n    'A': ['avg', 0x20, 0x20],\n    /**        Calculates sum from an array using a[0] to a[n-1] where n is the size */\n    'S×': ['sum', 0x20, 0x20],\n    /**\n    Calculates min from an array using a[0] to a[n-1] where n is the size,\n    or the lowest screen value character from a string.\n    E.g. [3, 4, 5] -> 3, test -> 'e'. */\n    'm': ['min', 0xff, 0x01],\n    /**        Calculates max from an array using a[0] to a[n-1] where n is the size, or the lowest screen value character from a string. */\n    'M': ['max', 0xff, 0x01],\n    /**        Use ix as index in a string or array. a.ix returns a[ix]. */\n    'I×': ['ix', 0xff, 0x01],\n    /**        Use jx as index in a string or array. a.jx returns a[jx]. */\n    'J×': ['jx', 0xff, 0x01],\n    /**        Use kx as index in a string or array. a.ix returns a[kx]. */\n    'K×': ['kx', 0xff, 0x01],\n    /**        Pushes a value to the array.\n                 ap=10 pushes the value 10 at the current array index, or adds char to string. */\n    'p': ['push', 0xff, 0x01],\n    /**        Pops a value from the array.\n                x=aP pops the last value from the array, or removes last char from the string. */\n    'P': ['pop', 0xff, 0x01],\n    /**        Value from the current index */\n    'A×': ['ax', 0xff, 0x01],\n    /**        Value from the previous index */\n    'x': ['axm', 0xff, 0x01],\n};\nconst POSTFIX_BY_KEY_WRITE = {\n    /**\n    Address of the variable,\n    pointing to the type part (TYPE LO HI).\n    For pointers, @P×G returns the pointer. (dpeek(address+1))\n    For writing: a@=53820 sets a as a pointer to 53280. a=0 changes it as a word, ah and al the distinct bytes. */\n    '@': ['addr', 0x00, 0x00],\n    /**        Lo byte of the value. E.g. for a word with value 0xd021, it returns 0x21. */\n    'l': ['lo', 0x00, 0x00],\n    /**        Hi byte of the value. E.g. for a word with value 0xd021, it returns 0xd0. */\n    'h': ['hi', 0x00, 0x00],\n    /**        Low nibble of lo byte, 0x04 for 0x1234. */\n    'L': ['lnib', 0x00, 0x00],\n    /**        High nibble of lo byte, 0x03 for 0x1234. */\n    'H': ['hnib', 0x00, 0x00],\n    /**        Lower nibble of hi byte, 0x02 for 0x1234. */\n    'L×': ['lnib2', 0x00, 0x00],\n    /**        High nibble of hi byte, 0x01 for 0x1234. */\n    'H×': ['hnib2', 0x00, 0x00],\n    /**        Pushes a value to the array.\n                 ap=10 pushes the value 10 at the current array index, or adds char to string. */\n    'p': ['push', 0xff, 0x01],\n};\nconst POSTFIX_BY_FULL_READ = {\n    /**\n    Type of the variable returned as VarType byte.\n    E.g. if a is a byte, at (a.type) returns VarType.byte. */\n    'type': ['t', 0x00, 0x00],\n    /**\n    Size/length of the variable.\n    1 and 2 for bytes and words,\n    number of elements for arrays (if multidimensional is possible, m*n),\n    length for string. */\n    'size': ['S', 0x00, 0x00],\n    /**\n    Address of the variable,\n    pointing to the type part (TYPE LO HI).\n    For pointers, @P×G returns the pointer. (dpeek(address+1))\n    For writing: a@=53820 sets a as a pointer to 53280. a=0 changes it as a word, ah and al the distinct bytes. */\n    'addr': ['@', 0x00, 0x00],\n    /**        Convert to word. If it is a string, decimal values are valid only! E.g. '1' will be 0x01. */\n    'word': ['w', 0x20, 0x00],\n    /**        Convert to byte. If it is a string, decimal values are valid only! */\n    'byte': ['b', 0x20, 0x00],\n    /**        Convert to fix2 */\n    'fx2': ['f', 0x20, 0x00],\n    /**        Convert to fix5 */\n    'fx5': ['F', 0x20, 0x00],\n    /**        Convert to fraction. */\n    'frac': ['F×', 0x20, 0x00],\n    /**        Convert to char */\n    'chr': ['$', 0x30, 0x10],\n    /**        Convert to string decimal value. */\n    'str': ['s', 0x30, 0x10],\n    /**        Get the integer part only */\n    'int': ['i', 0x30, 0x10],\n    /**        Absolute value of the number */\n    'abs': ['a', 0x30, 0x10],\n    /**        Sign - 0x80 for minus, 0x01 for positive, 0x00 for zero. */\n    'sign': ['n', 0x30, 0x10],\n    /**        Round down number */\n    'rdn': ['r', 0x30, 0x10],\n    /**        Round up number */\n    'rup': ['R', 0x30, 0x10],\n    /**        value-1 */\n    'minus': ['M×', 0x30, 0x10],\n    /**        value+1 */\n    'plus': ['P×', 0x30, 0x10],\n    /**        value*2, using bit shift left */\n    'dbl': ['d', 0x30, 0x10],\n    /**        value div 2 using bit shift right */\n    'div2': ['D', 0x30, 0x10],\n    /**\n    Cast as byte - e.g. '1' will be a byte with value 0x31.\n    (On the other hand .byte will cast '1' as 0x01.) */\n    'ord': ['o', 0x30, 0x00],\n    /**        Change string to uppercase */\n    'ucase': ['C', 0x30, 0x00],\n    /**        Change string to lowercase */\n    'lcase': ['c', 0x30, 0x00],\n    /**        Lo byte of the value. E.g. for a word with value 0xd021, it returns 0x21. */\n    'lo': ['l', 0x00, 0x00],\n    /**        Hi byte of the value. E.g. for a word with value 0xd021, it returns 0xd0. */\n    'hi': ['h', 0x00, 0x00],\n    /**        Low nibble of lo byte, 0x04 for 0x1234. */\n    'lnib': ['L', 0x00, 0x00],\n    /**        High nibble of lo byte, 0x03 for 0x1234. */\n    'hnib': ['H', 0x00, 0x00],\n    /**        Lower nibble of hi byte, 0x02 for 0x1234. */\n    'lnib2': ['L×', 0x00, 0x00],\n    /**        High nibble of hi byte, 0x01 for 0x1234. */\n    'hnib2': ['H×', 0x00, 0x00],\n    /**        Reads memory word at the address specified by the variable. E.g. aG is the same as dpeek(a) */\n    'getw': ['G', 0x18, 0x10],\n    /**        Reads memory byte at the address specified by the variable. E.g. ag is the same as peek(a) */\n    'getb': ['g', 0x18, 0x10],\n    /**        Calculates average from an array using a[0] to a[n-1] where n is the size */\n    'avg': ['A', 0x20, 0x20],\n    /**        Calculates sum from an array using a[0] to a[n-1] where n is the size */\n    'sum': ['S×', 0x20, 0x20],\n    /**\n    Calculates min from an array using a[0] to a[n-1] where n is the size,\n    or the lowest screen value character from a string.\n    E.g. [3, 4, 5] -> 3, test -> 'e'. */\n    'min': ['m', 0xff, 0x01],\n    /**        Calculates max from an array using a[0] to a[n-1] where n is the size, or the lowest screen value character from a string. */\n    'max': ['M', 0xff, 0x01],\n    /**        Use ix as index in a string or array. a.ix returns a[ix]. */\n    'ix': ['I×', 0xff, 0x01],\n    /**        Use jx as index in a string or array. a.jx returns a[jx]. */\n    'jx': ['J×', 0xff, 0x01],\n    /**        Use kx as index in a string or array. a.ix returns a[kx]. */\n    'kx': ['K×', 0xff, 0x01],\n    /**        Pushes a value to the array.\n                 ap=10 pushes the value 10 at the current array index, or adds char to string. */\n    'push': ['p', 0xff, 0x01],\n    /**        Pops a value from the array.\n                x=aP pops the last value from the array, or removes last char from the string. */\n    'pop': ['P', 0xff, 0x01],\n    /**        Value from the current index */\n    'ax': ['A×', 0xff, 0x01],\n    /**        Value from the previous index */\n    'axm': ['x', 0xff, 0x01],\n};\nconst POSTFIX_BY_FULL_WRITE = {\n    /**\n    Address of the variable,\n    pointing to the type part (TYPE LO HI).\n    For pointers, @P×G returns the pointer. (dpeek(address+1))\n    For writing: a@=53820 sets a as a pointer to 53280. a=0 changes it as a word, ah and al the distinct bytes. */\n    'addr': ['@', 0x00, 0x00],\n    /**        Lo byte of the value. E.g. for a word with value 0xd021, it returns 0x21. */\n    'lo': ['l', 0x00, 0x00],\n    /**        Hi byte of the value. E.g. for a word with value 0xd021, it returns 0xd0. */\n    'hi': ['h', 0x00, 0x00],\n    /**        Low nibble of lo byte, 0x04 for 0x1234. */\n    'lnib': ['L', 0x00, 0x00],\n    /**        High nibble of lo byte, 0x03 for 0x1234. */\n    'hnib': ['H', 0x00, 0x00],\n    /**        Lower nibble of hi byte, 0x02 for 0x1234. */\n    'lnib2': ['L×', 0x00, 0x00],\n    /**        High nibble of hi byte, 0x01 for 0x1234. */\n    'hnib2': ['H×', 0x00, 0x00],\n    /**        Pushes a value to the array.\n                 ap=10 pushes the value 10 at the current array index, or adds char to string. */\n    'push': ['p', 0xff, 0x01],\n};\n/* eslint-disable */\nconst PFIX_CODE = {\n    /**\n    Type of the variable returned as VarType byte.\n    E.g. if a is a byte, at (a.type) returns VarType.byte. */\n    type: 0x14, // t\n    /**\n    Size/length of the variable.\n    1 and 2 for bytes and words,\n    number of elements for arrays (if multidimensional is possible, m*n),\n    length for string. */\n    size: 0x53, // S\n    /**\n    Address of the variable,\n    pointing to the type part (TYPE LO HI).\n    For pointers, @P×G returns the pointer. (dpeek(address+1))\n    For writing: a@=53820 sets a as a pointer to 53280. a=0 changes it as a word, ah and al the distinct bytes. */\n    addr: 0x00, // @\n    /**        Convert to word. If it is a string, decimal values are valid only! E.g. '1' will be 0x01. */\n    word: 0x17, // w\n    /**        Convert to byte. If it is a string, decimal values are valid only! */\n    byte: 0x02, // b\n    /**        Convert to fix2 */\n    fx2: 0x06, // f\n    /**        Convert to fix5 */\n    fx5: 0x46, // F\n    /**        Convert to fraction. */\n    frac: 0x7b, // F×\n    /**        Convert to char */\n    chr: 0x24, // $\n    /**        Convert to string decimal value. */\n    str: 0x13, // s\n    /**        Get the integer part only */\n    int: 0x09, // i\n    /**        Absolute value of the number */\n    abs: 0x01, // a\n    /**        Sign - 0x80 for minus, 0x01 for positive, 0x00 for zero. */\n    sign: 0x0e, // n\n    /**        Round down number */\n    rdn: 0x12, // r\n    /**        Round up number */\n    rup: 0x52, // R\n    /**        value-1 */\n    minus: 0x67, // M×\n    /**        value+1 */\n    plus: 0x6f, // P×\n    /**        value*2, using bit shift left */\n    dbl: 0x04, // d\n    /**        value div 2 using bit shift right */\n    div2: 0x44, // D\n    /**\n    Cast as byte - e.g. '1' will be a byte with value 0x31.\n    (On the other hand .byte will cast '1' as 0x01.) */\n    ord: 0x0f, // o\n    /**        Change string to uppercase */\n    ucase: 0x43, // C\n    /**        Change string to lowercase */\n    lcase: 0x03, // c\n    /**        Lo byte of the value. E.g. for a word with value 0xd021, it returns 0x21. */\n    lo: 0x0c, // l\n    /**        Hi byte of the value. E.g. for a word with value 0xd021, it returns 0xd0. */\n    hi: 0x08, // h\n    /**        Low nibble of lo byte, 0x04 for 0x1234. */\n    lnib: 0x4c, // L\n    /**        High nibble of lo byte, 0x03 for 0x1234. */\n    hnib: 0x48, // H\n    /**        Lower nibble of hi byte, 0x02 for 0x1234. */\n    lnib2: 0x76, // L×\n    /**        High nibble of hi byte, 0x01 for 0x1234. */\n    hnib2: 0x74, // H×\n    /**        Reads memory word at the address specified by the variable. E.g. aG is the same as dpeek(a) */\n    getw: 0x47, // G\n    /**        Reads memory byte at the address specified by the variable. E.g. ag is the same as peek(a) */\n    getb: 0x07, // g\n    /**        Calculates average from an array using a[0] to a[n-1] where n is the size */\n    avg: 0x41, // A\n    /**        Calculates sum from an array using a[0] to a[n-1] where n is the size */\n    sum: 0x6e, // S×\n    /**\n    Calculates min from an array using a[0] to a[n-1] where n is the size,\n    or the lowest screen value character from a string.\n    E.g. [3, 4, 5] -> 3, test -> 'e'. */\n    min: 0x0d, // m\n    /**        Calculates max from an array using a[0] to a[n-1] where n is the size, or the lowest screen value character from a string. */\n    max: 0x4d, // M\n    /**        Use ix as index in a string or array. a.ix returns a[ix]. */\n    ix: 0x62, // I×\n    /**        Use jx as index in a string or array. a.jx returns a[jx]. */\n    jx: 0x75, // J×\n    /**        Use kx as index in a string or array. a.ix returns a[kx]. */\n    kx: 0x61, // K×\n    /**        Pushes a value to the array.\n                 ap=10 pushes the value 10 at the current array index, or adds char to string. */\n    push: 0x10, // p\n    /**        Pops a value from the array.\n                x=aP pops the last value from the array, or removes last char from the string. */\n    pop: 0x50, // P\n    /**        Value from the current index */\n    ax: 0x70, // A×\n    /**        Value from the previous index */\n    axm: 0x18, // x\n};\n/* eslint-enable */\n\nexport { PFIX_CODE, POSTFIX_BY_FULL_READ, POSTFIX_BY_FULL_WRITE, POSTFIX_BY_KEY_READ, POSTFIX_BY_KEY_WRITE };\n//# sourceMappingURL=postfixes.js.map\n","/** Screen commands - codes as list and as dictionaries\n*/\nconst GSCR_TEXTS_0x00xx = [\n    'tab', // 128, 0x80,                       Tab to next tab column.\n    'transparent', // 129, 0x81,                       Only character printing, no recolor. \n    'recolor_only', // 130, 0x82,                       Only recoloring - characters are not changed.\n    'stop', // 131, 0x83,                       Use stop key. When printed, waits for a keypress. \n    'scroll_actual_column', // 132, 0x84,                       Set scroll window to current single column in window. \n    'white', // 133, 0x85,                       Change destination color to white. Default destination is \n    'home_current_line', // 134, 0x86,                       Move cursor to home in current line (x0 position in active\n    'end_current_line', // 135, 0x87,                       Move cursor to the last non-space character in line.      \n    'disable_c_shift', // 136, 0x88,                       Switching between upper/lowecase and gfx/uppercase is disa\n    'enable_c_shift', // 137, 0x89,                       Switching between upper/lowecase and gfx/uppercase is enab\n    'rep_next', // 138, 0x8a, (count,scr_code)      Repeats next character `count` times.         E.g.        \n    'rep_double', // 139, 0x8b, (count_lo,count_hi,scr_code)   For repeating characters more than 255 times.    \n    'rep_between', // 140, 0x8c, (bytes...)            Repeats all characters between two 'rep_between' codes the\n    'return', // 141, 0x8d,                       Moves to the first position in the next line.         If i\n    'lo_up_charset', // 142, 0x8e,                       Change to lowercase/uppercase font. \n    'scroll_circular_on', // 143, 0x8f,                       Scrolling is circular in the predefined window. \n    'scroll_actual_line', // 144, 0x90,                       Sets scroll window to current line. \n    'down', // 145, 0x91,                       Moves the cursor down once. \n    'reverse_on', // 146, 0x92,                       Characters are inverted when printing. \n    'home', // 147, 0x93,                       Set position to upper-left corner in active window. \n    'delete', // 148, 0x94,                       Deletes the character right before the active position in \n    'clear_line_content', // 149, 0x95,                       Clears the whole line (in the active window), but does not\n    'remove_line', // 150, 0x96,                       Removes the current line in the active window. \n    'scroll_left', // 151, 0x97,                       Scrolls the scroll area left. \n    'scroll_right', // 152, 0x98,                       Scrolls the scroll area right. \n    'scroll_up', // 153, 0x99,                       Scrolls the scroll area up. \n    'scroll_down', // 154, 0x9a,                       Scrolls the scroll area down. \n    'setx', // 155, 0x9b, (x_pos)               Sets the x position to `x_pos`.             E.g. {setx $02\n    'red', // 156, 0x9c,                       Change destination color to red. Default destination is in\n    'right', // 157, 0x9d,                       \n    'green', // 158, 0x9e,                       Change destination color to green. Default destination is \n    'blue', // 159, 0x9f,                       Change destination color to blue. Default destination is i\n    'stamp_set_mode', // 160, 0xa0, (width)               Sets stamp width: all prints will be limited from current \n    'stamp_use', // 161, 0xa1, (code)                Prints stamp [code] at the current position.\n    'stamp_use_last', // 162, 0xa2,                       Repeats printing the last stampcode at the current positio\n    'window_start', // 163, 0xa3, (x0,y0,x1,y1)         Start windowed mode between (x0,y0) and (x1,y1).\n    'window_stop', // 164, 0xa4,                       Stops windowed mode, uses full screen. \n    'box_set_single', // 165, 0xa5, (scr_code)            Sets window drawing to use only scr_code.\n    'box_set_style', // 166, 0xa6, (style)               Sets the style of boxes.                       0: thin nea\n    'box_user_def', // 167, 0xa7, (tl,tm,tr,ml,c,mr,bl,bm,br)   Defines drawing characters in for top, middle, bot\n    'box_draw_filled', // 168, 0xa8, (width,height)        Draws a filled box at the cursor, dimensions: width*height\n    'box_draw_empty', // 169, 0xa9, (width,height)        Draws an empty box at the cursor, dimensions: width*height\n    'box_set_sides', // 170, 0xaa, (sides)               A bitmap for which sides to draw for boxes.               \n    'box_box_filled_compr', // 171, 0xab, (dimensions)          Draws a filled box with compressed dimensions.            \n    'box_box_empty_compr', // 172, 0xac, (dimensions)          Draws an empty box with compressed dimensions.            \n    'use_fn', // 173, 0xad, (fn)                  Use function `fn`.                use_fn 0x01 is the same \n    'setxy', // 174, 0xae, (xpos,ypos)           Sets x and y position for the cursor.             {setxy x\n    'typewriter_mode', // 175, 0xaf, (speed)               Sets the typewriter mode (slowing down the display of text\n    'buffer_def', // 176, 0xb0,                       \n    'buffer_opt', // 177, 0xb1,                       \n    'buffer_copy', // 178, 0xb2,                       \n    'buffer_paste', // 179, 0xb3,                       \n    'input_rx', // 180, 0xb4,                       \n    'input_cursor', // 181, 0xb5,                       \n    'format_str', // 182, 0xb6, (format_byte)         Sets string format for printing.                     \n    'format_dec', // 183, 0xb7, (format_byte)         Sets decimal format for printing.                    word \n    'format_hex', // 184, 0xb8, (format_byte)         Sets hex format for printing.                     num form\n    'decompress', // 185, 0xb9, (len,bytes...)        decompress a compressed string.                    It uses\n    'set_mode_a', // 186, 0xba,                       Sets printing mode to mode_a, screen commands on.         \n    'set_mode_b', // 187, 0xbb,                       Sets printing mode to mode_b, escaped screen commands on. \n    'set_mode_c', // 188, 0xbc,                       Sets printing mode to mode_c, no control characters.      \n    'scroll_set_area', // 189, 0xbd, (x0,y0,x1,y1)         Sets area for scrolling. \n    'scroll_window', // 190, 0xbe,                       Sets scroll area to window. \n    'scroll_screen', // 191, 0xbf,                       Sets scroll area to whole screen. \n    'background', // 192, 0xc0,                       Sets color target to background. \n    'orange', // 193, 0xc1,                       Change destination color to orange. Default destination is\n    'border', // 194, 0xc2,                       Sets color target to border. \n    'run', // 195, 0xc3,                       Uses 'run' key. When printed, it restarts the program. \n    'sety', // 196, 0xc4, (ypos)                Sets the cursor y position to `ypos`.             E.g. {se\n    'f1', // 197, 0xc5,                       Uses f1 key. Macros can be added with def_f1. \n    'f3', // 198, 0xc6,                       Uses f3 key. Macros can be added with def_f3. \n    'f5', // 199, 0xc7,                       Uses f5 key. Macros can be added with def_f5. \n    'f7', // 200, 0xc8,                       Uses f7 key. Macros can be added with def_f7. \n    'f2', // 201, 0xc9,                       Uses f2 key. Macros can be added with def_f2. \n    'f4', // 202, 0xca,                       Uses f4 key. Macros can be added with def_f4. \n    'f6', // 203, 0xcb,                       Uses f6 key. Macros can be added with def_f6. \n    'f8', // 204, 0xcc,                       Uses f8 key. Macros can be added with def_f8. \n    'shift_return', // 205, 0xcd,                       \n    'up_gfx_charset', // 206, 0xce,                       Changes to uppercase / gfx font. \n    'scroll_circular_off', // 207, 0xcf,                       Sets circular scrolling off. \n    'black', // 208, 0xd0,                       Change destination color to black. Default destination is \n    'up', // 209, 0xd1,                       \n    'reverse_off', // 210, 0xd2,                       Turns printing in inverse off.\n    'clear', // 211, 0xd3,                       Clears the screen. \n    'insert', // 212, 0xd4,                       \n    'brown', // 213, 0xd5,                       Change destination color to brown. Default destination is \n    'pink', // 214, 0xd6,                       Change destination color to pink. Default destination is i\n    'dark_gray', // 215, 0xd7,                       Change destination color to dark grey. Default destination\n    'gray', // 216, 0xd8,                       Change destination color to grey. Default destination is i\n    'light_green', // 217, 0xd9,                       Change destination color to light green. Default destinati\n    'light_blue', // 218, 0xda,                       Change destination color to light blue. Default destinatio\n    'light_gray', // 219, 0xdb,                       Change destination color to light grey. Default destinatio\n    'purple', // 220, 0xdc,                       Change destination color to purple. Default destination is\n    'cursor_left', // 221, 0xdd,                       Moves the cursor left once. \n    'yellow', // 222, 0xde,                       Change destination color to yellow. Default destination is\n    'cyan', // 223, 0xdf,                       Change destination color to cyan. Default destination is i\n    'set_addr0', // 224, 0xe0, (lo)                  Sets the screen pointer to position 0x00`lo`.\n    'set_addr1', // 225, 0xe1, (lo)                  Sets the screen pointer to position 0x01`lo`.\n    'set_addr2', // 226, 0xe2, (lo)                  Sets the screen pointer to position 0x02`lo`.\n    'set_addr3', // 227, 0xe3, (lo)                  Sets the screen pointer to position 0x03`lo`.\n    'push_one', // 228, 0xe4, (variable)            push one numeric variable value into the stack. \t\t\tvariabl\n    'push_two', // 229, 0xe5, (var1,var2)           push two variables into stack.\n    'push_multi', // 230, 0xe6, (vars...,0x00)        push a list of variables into the stack, finished with a @\n    'print_src_var', // 231, 0xe7, (var)                 sets print source to variable `var`.                      \n    'print_src_addr', // 232, 0xe8, (addrlo,addrhi)       sets print source to memory `addr`.                       \n    'print_db', // 233, 0xe9,                       print decimal byte from variable or address.\n    'print_dw', // 234, 0xea,                       print decimal word from variable or address.\n    'print_hb', // 235, 0xeb,                       print hex byte from variable or address.\n    'print_hw', // 236, 0xec,                       print hex word from variable or address.\n    'print_s', // 237, 0xed,                       print string from variable or address.\n    'print_f', // 238, 0xee,                       print float from variable or address.\n    'format_f', // 239, 0xef, (format_byte)         format float to `format_byte`.\n    'def_f1', // 240, 0xf0, (len,bytes...)        defines a script/text for f1\n    'def_f3', // 241, 0xf1, (len,bytes...)        defines a script/text for f3\n    'def_f5', // 242, 0xf2, (len,bytes...)        defines a script/text for f5\n    'def_f7', // 243, 0xf3, (len,bytes...)        defines a script/text for f6\n    'def_f2', // 244, 0xf4, (len,bytes...)        defines a script/text for f2\n    'def_f4', // 245, 0xf5, (len,bytes...)        defines a script/text for f4\n    'def_f6', // 246, 0xf6, (len,bytes...)        defines a script/text for f6\n    'def_f8', // 247, 0xf7, (len,bytes...)        defines a script/text for f8\n    'parambuff_susp', // 248, 0xf8, (count)               Suspends param buffer use for `count` times.\n    'parambuff_on', // 249, 0xf9,                       Param buffer use is on.\n    'parambuff_off', // 250, 0xfa,                       Suspends param buffer use.\n    'set_col_bckg', // 251, 0xfb, (color)               Sets background to `color`.\n    'set_col_bord', // 252, 0xfc, (color)               Sets border to `color`.\n    'set_col_bcbd', // 253, 0xfd, (color_packed)        Sets color and border with hnib and lnib or color_packed. \n    'decode', // 254, 0xfe, (control,xor,bytes...)   decodes an encoded text.                `control`: sssl\n    'extra_ff', // 255, 0xff,                      extra codes with another byte.\n];\nconst GSCR_TEXTS_0xffxx = [\n    'pos_save', // 1, 0xff01,                       Saves position to position buffer. \n    'pos_load', // 2, 0xff02,                       Restores position from position buffer.\n    'qsys', // 3, 0xff03, (lo,hi)>              Executes a sys in current bank.\n    'qsys_bank', // 4, 0xff04, (bank,lo,hi)>         Executes a sys in predefined bank.\n    'set_tab', // 5, 0xff05, (tab)>                Sets tab multiplier to `tab`.\n    'poke_single', // 6, 0xff06, (lo,hi,value)>        Sets a single byte to a given value.\n    'set_mem', // 7, 0xff07, (lo,hi,byte_count,values...)>   Sets `byte_count` bytes in the memory starting f\n    'fill_mem', // 8, 0xff08, (lo,hi,byte_count,value)>   Sets `byte_count` bytes in the memory. Starts from l\n];\nconst GSCR_CODES = {\n    /**     Tab to next tab column.*/\n    'tab': 0x80,\n    /**     Only character printing, no recolor.*/\n    'transparent': 0x81,\n    /**     Only recoloring - characters are not changed.*/\n    'recolor_only': 0x82,\n    /**     Use stop key. When printed, waits for a keypress.*/\n    'stop': 0x83,\n    /**     Set scroll window to current single column in window.*/\n    'scroll_actual_column': 0x84,\n    /**     Change destination color to white. Default destination is ink.*/\n    'white': 0x85,\n    /**     Move cursor to home in current line (x0 position in active window).*/\n    'home_current_line': 0x86,\n    /**     Move cursor to the last non-space character in line.\n           Only 0x20 is treated as non-space!*/\n    'end_current_line': 0x87,\n    /**     Switching between upper/lowecase and gfx/uppercase is disabled.*/\n    'disable_c_shift': 0x88,\n    /**     Switching between upper/lowecase and gfx/uppercase is enabled.*/\n    'enable_c_shift': 0x89,\n    /**     (count,scr_code)\n     Repeats next character `count` times.\n            E.g.\n            print \"{ rep_next 40 asc(.) }\"\n            Repeats '.' 40 times.*/\n    'rep_next': 0x8a,\n    /**     (count_lo,count_hi,scr_code)\n     For repeating characters more than 255 times.\n            print \"{ rep_next 200 asc(.) }\n            Prints '.' 200 times. Count is in `lo` `hi` format.*/\n    'rep_double': 0x8b,\n    /**     (bytes...)\n     Repeats all characters between two 'rep_between' codes the given times.\n            E.g. print \"{rep_between 10}abc{rep_between}\"\n            Repeats 'abc' 10 times.\n            Nesting is not possible, and don't repeat F1-F8 functions with repeats.*/\n    'rep_between': 0x8c,\n    /**     Moves to the first position in the next line.\n           If it is the last line, the screen may scroll depending on the screen settings.*/\n    'return': 0x8d,\n    /**     Change to lowercase/uppercase font.*/\n    'lo_up_charset': 0x8e,\n    /**     Scrolling is circular in the predefined window.*/\n    'scroll_circular_on': 0x8f,\n    /**     Sets scroll window to current line.*/\n    'scroll_actual_line': 0x90,\n    /**     Moves the cursor down once.*/\n    'down': 0x91,\n    /**     Characters are inverted when printing.*/\n    'reverse_on': 0x92,\n    /**     Set position to upper-left corner in active window.*/\n    'home': 0x93,\n    /**     Deletes the character right before the active position in the active window.*/\n    'delete': 0x94,\n    /**     Clears the whole line (in the active window), but does not remove it.*/\n    'clear_line_content': 0x95,\n    /**     Removes the current line in the active window.*/\n    'remove_line': 0x96,\n    /**     Scrolls the scroll area left.*/\n    'scroll_left': 0x97,\n    /**     Scrolls the scroll area right.*/\n    'scroll_right': 0x98,\n    /**     Scrolls the scroll area up.*/\n    'scroll_up': 0x99,\n    /**     Scrolls the scroll area down.*/\n    'scroll_down': 0x9a,\n    /**     (x_pos)\n     Sets the x position to `x_pos`.\n                E.g. {setx $02}*/\n    'setx': 0x9b,\n    /**     Change destination color to red. Default destination is ink.*/\n    'red': 0x9c,\n    /** */\n    'right': 0x9d,\n    /**     Change destination color to green. Default destination is ink.*/\n    'green': 0x9e,\n    /**     Change destination color to blue. Default destination is ink.*/\n    'blue': 0x9f,\n    /**     (width)\n     Sets stamp width: all prints will be limited from current x to x+(width&7f).\n                           0: turn off.\n                    $80: set overflow mode on, otherwise off.*/\n    'stamp_set_mode': 0xa0,\n    /**     (code)\n     Prints stamp [code] at the current position.*/\n    'stamp_use': 0xa1,\n    /**     Repeats printing the last stampcode at the current position.*/\n    'stamp_use_last': 0xa2,\n    /**     (x0,y0,x1,y1)\n     Start windowed mode between (x0,y0) and (x1,y1).*/\n    'window_start': 0xa3,\n    /**     Stops windowed mode, uses full screen.*/\n    'window_stop': 0xa4,\n    /**     (scr_code)\n     Sets window drawing to use only scr_code.*/\n    'box_set_single': 0xa5,\n    /**     (style)\n     Sets the style of boxes.\n                          0: thin near\n                          1: thin mid\n                          2: thin mid rounded\n                          3: thin far\n                          4: half near\n                          5: half far\n                          6: thick\n                          0x80: single char\n                        0x81: user defined style*/\n    'box_set_style': 0xa6,\n    /**     (tl,tm,tr,ml,c,mr,bl,bm,br)\n     Defines drawing characters in for top, middle, bottom, left, right and center.\n                         C is used only with filled drawing.*/\n    'box_user_def': 0xa7,\n    /**     (width,height)\n     Draws a filled box at the cursor, dimensions: width*height.*/\n    'box_draw_filled': 0xa8,\n    /**     (width,height)\n     Draws an empty box at the cursor, dimensions: width*height.*/\n    'box_draw_empty': 0xa9,\n    /**     (sides)\n     A bitmap for which sides to draw for boxes.\n                          1: top\n                          2: left\n                          4: right\n                          8: bottom\n                          Skip corners if both not set, e.g.\n                          16: top-left corner will only be drawn if top+left is set as well.\n                          32: top-right\n                          64: bottom-left\n                          128: bottom-right*/\n    'box_set_sides': 0xaa,\n    /**     (dimensions)\n     Draws a filled box with compressed dimensions.\n                                 hnib: width, lnib: height\n                                 e.g. 0x54 means width = 5, height = 4.*/\n    'box_box_filled_compr': 0xab,\n    /**     (dimensions)\n     Draws an empty box with compressed dimensions.\n                                See box_box_filled_compr for more information.*/\n    'box_box_empty_compr': 0xac,\n    /**     (fn)\n     Use function `fn`.\n                   use_fn 0x01 is the same as f1.*/\n    'use_fn': 0xad,\n    /**     (xpos,ypos)\n     Sets x and y position for the cursor.\n                {setxy xpos ypos}\n                For saving space, use of set_addrx is recommended.\n                This code may be easier to use for parametric positioning (same as locate command).*/\n    'setxy': 0xae,\n    /**     (speed)\n     Sets the typewriter mode (slowing down the display of text).\n                            0: off.\n                            255: slowest.*/\n    'typewriter_mode': 0xaf,\n    /** */\n    'buffer_def': 0xb0,\n    /** */\n    'buffer_opt': 0xb1,\n    /** */\n    'buffer_copy': 0xb2,\n    /** */\n    'buffer_paste': 0xb3,\n    /** */\n    'input_rx': 0xb4,\n    /** */\n    'input_cursor': 0xb5,\n    /**     (format_byte)\n     Sets string format for printing.*/\n    'format_str': 0xb6,\n    /**     (format_byte)\n     Sets decimal format for printing.\n                       word num_format: \tssltLLLL\n                - L 4 bit: total length (0-15), 0: no leading\n                - t 1 bit: a single trailing space at the end, used for fix2 and fix5 too\n                - l 1 bit: leading spaces\n                - s 2 bit: signed / unsigned\n                    * 00: unsigned, no leading\t\t\t''\n                    * 01: unsigned, leading for plus \t\t'+'\n                    * 10: signed, no leading for plus\t\t'','-'\n                    * 11: signed, leading for plus  \t\t'+','-'*/\n    'format_dec': 0xb7,\n    /**     (format_byte)\n     Sets hex format for printing.\n                        num format: 00ltLLLL\n                        - L 4 bit: total length (0-15), 0: no leading\n                        - t 1 bit: a single trailing space at the end, used for fix2 and fix5 too\n                        - l 1 bit: leading spaces*/\n    'format_hex': 0xb8,\n    /**     (len,bytes...)\n     decompress a compressed string.\n                       It uses a built-in dictionary with the most common words, and can save some bytes.\n                       E.g. 'press any key to continue' will be reduced to a few bytes.\n                       Use the compress macro to compress text.\n                       If it can't reduce the size, it will return the original string.\n                       E.g. print\"{compress(press any key to continue)}!*/\n    'decompress': 0xb9,\n    /**     Sets printing mode to mode_a, screen commands on.\n                      Codes 0x00-0x7f will print on screen, and >= 0x80 are screen commands.*/\n    'set_mode_a': 0xba,\n    /**     Sets printing mode to mode_b, escaped screen commands on.\n                      Codes 0x01-0xff will print on screen.\n                      Code 00 (@) can be used for using commands.\n                        * 0x0000 (@@) print '@'\n                        * 0x0001 (@a) change to mode_a\n                        * 0x0003 (@c) change to mode_c\n                        * 0x0080-     execute screen command\n                        All codes between 0x0000 and 0x007f will be printed,\n                        except @@ (@ is printed), @a and @c.\n                        So @r will print @r, @@ will print @.*/\n    'set_mode_b': 0xbb,\n    /**     Sets printing mode to mode_c, no control characters.\n                      All codes will print on screen, >= 0x80 are inverted.\n                      Special codes:\n                        * 0x0000 (@@) will print '@', only for printing @a and @b sequences.\n                        * 0x0001 (@a) change to mode_a\n                        * 0x0002 (@b) change to mode_b\n                        If you want to print @a or @b, you should use @@a and @@b.\n                        All other codes starting with 00 will be printed normally.*/\n    'set_mode_c': 0xbc,\n    /**     (x0,y0,x1,y1)\n     Sets area for scrolling.*/\n    'scroll_set_area': 0xbd,\n    /**     Sets scroll area to window.*/\n    'scroll_window': 0xbe,\n    /**     Sets scroll area to whole screen.*/\n    'scroll_screen': 0xbf,\n    /**     Sets color target to background.*/\n    'background': 0xc0,\n    /**     Change destination color to orange. Default destination is ink.*/\n    'orange': 0xc1,\n    /**     Sets color target to border.*/\n    'border': 0xc2,\n    /**     Uses 'run' key. When printed, it restarts the program.*/\n    'run': 0xc3,\n    /**     (ypos)\n     Sets the cursor y position to `ypos`.\n                E.g. {sety $01}.*/\n    'sety': 0xc4,\n    /**     Uses f1 key. Macros can be added with def_f1.*/\n    'f1': 0xc5,\n    /**     Uses f3 key. Macros can be added with def_f3.*/\n    'f3': 0xc6,\n    /**     Uses f5 key. Macros can be added with def_f5.*/\n    'f5': 0xc7,\n    /**     Uses f7 key. Macros can be added with def_f7.*/\n    'f7': 0xc8,\n    /**     Uses f2 key. Macros can be added with def_f2.*/\n    'f2': 0xc9,\n    /**     Uses f4 key. Macros can be added with def_f4.*/\n    'f4': 0xca,\n    /**     Uses f6 key. Macros can be added with def_f6.*/\n    'f6': 0xcb,\n    /**     Uses f8 key. Macros can be added with def_f8.*/\n    'f8': 0xcc,\n    /** */\n    'shift_return': 0xcd,\n    /**     Changes to uppercase / gfx font.*/\n    'up_gfx_charset': 0xce,\n    /**     Sets circular scrolling off.*/\n    'scroll_circular_off': 0xcf,\n    /**     Change destination color to black. Default destination is ink.*/\n    'black': 0xd0,\n    /** */\n    'up': 0xd1,\n    /**     Turns printing in inverse off.*/\n    'reverse_off': 0xd2,\n    /**     Clears the screen.*/\n    'clear': 0xd3,\n    /** */\n    'insert': 0xd4,\n    /**     Change destination color to brown. Default destination is ink.*/\n    'brown': 0xd5,\n    /**     Change destination color to pink. Default destination is ink.*/\n    'pink': 0xd6,\n    /**     Change destination color to dark grey. Default destination is ink.*/\n    'dark_gray': 0xd7,\n    /**     Change destination color to grey. Default destination is ink.*/\n    'gray': 0xd8,\n    /**     Change destination color to light green. Default destination is ink.*/\n    'light_green': 0xd9,\n    /**     Change destination color to light blue. Default destination is ink.*/\n    'light_blue': 0xda,\n    /**     Change destination color to light grey. Default destination is ink.*/\n    'light_gray': 0xdb,\n    /**     Change destination color to purple. Default destination is ink.*/\n    'purple': 0xdc,\n    /**     Moves the cursor left once.*/\n    'cursor_left': 0xdd,\n    /**     Change destination color to yellow. Default destination is ink.*/\n    'yellow': 0xde,\n    /**     Change destination color to cyan. Default destination is ink.*/\n    'cyan': 0xdf,\n    /**     (lo)\n     Sets the screen pointer to position 0x00`lo`.*/\n    'set_addr0': 0xe0,\n    /**     (lo)\n     Sets the screen pointer to position 0x01`lo`.*/\n    'set_addr1': 0xe1,\n    /**     (lo)\n     Sets the screen pointer to position 0x02`lo`.*/\n    'set_addr2': 0xe2,\n    /**     (lo)\n     Sets the screen pointer to position 0x03`lo`.*/\n    'set_addr3': 0xe3,\n    /**     (variable)\n     push one numeric variable value into the stack.\n                variable name: use as a byte (low byte)\n                $28-$2e\t\t\t\t\t\tŁ0-Ł6 '()*+,-.'\n                $30-$39\t\t\t\t\t\t@0-@9\n                128+variable index \t\tuse as a word, lo.hi format\n                E.g.\n                    PUSH_ONE VB(a) BOX_SET_STYLE\n                    Sets box style from variable 'a'*/\n    'push_one': 0xe4,\n    /**     (var1,var2)\n     push two variables into stack.*/\n    'push_two': 0xe5,\n    /**     (vars...,0x00)\n     push a list of variables into the stack, finished with a @(0x00).*/\n    'push_multi': 0xe6,\n    /**     (var)\n     sets print source to variable `var`.*/\n    'print_src_var': 0xe7,\n    /**     (addrlo,addrhi)\n     sets print source to memory `addr`.*/\n    'print_src_addr': 0xe8,\n    /**     print decimal byte from variable or address.*/\n    'print_db': 0xe9,\n    /**     print decimal word from variable or address.*/\n    'print_dw': 0xea,\n    /**     print hex byte from variable or address.*/\n    'print_hb': 0xeb,\n    /**     print hex word from variable or address.*/\n    'print_hw': 0xec,\n    /**     print string from variable or address.*/\n    'print_s': 0xed,\n    /**     print float from variable or address.*/\n    'print_f': 0xee,\n    /**     (format_byte)\n     format float to `format_byte`.*/\n    'format_f': 0xef,\n    /**     (len,bytes...)\n     defines a script/text for f1*/\n    'def_f1': 0xf0,\n    /**     (len,bytes...)\n     defines a script/text for f3*/\n    'def_f3': 0xf1,\n    /**     (len,bytes...)\n     defines a script/text for f5*/\n    'def_f5': 0xf2,\n    /**     (len,bytes...)\n     defines a script/text for f6*/\n    'def_f7': 0xf3,\n    /**     (len,bytes...)\n     defines a script/text for f2*/\n    'def_f2': 0xf4,\n    /**     (len,bytes...)\n     defines a script/text for f4*/\n    'def_f4': 0xf5,\n    /**     (len,bytes...)\n     defines a script/text for f6*/\n    'def_f6': 0xf6,\n    /**     (len,bytes...)\n     defines a script/text for f8*/\n    'def_f8': 0xf7,\n    /**     (count)\n     Suspends param buffer use for `count` times.*/\n    'parambuff_susp': 0xf8,\n    /**     Param buffer use is on.*/\n    'parambuff_on': 0xf9,\n    /**     Suspends param buffer use.*/\n    'parambuff_off': 0xfa,\n    /**     (color)\n     Sets background to `color`.*/\n    'set_col_bckg': 0xfb,\n    /**     (color)\n     Sets border to `color`.*/\n    'set_col_bord': 0xfc,\n    /**     (color_packed)\n     Sets color and border with hnib and lnib or color_packed.\n                          E.g. 0x14 will mean color 0x01 and color 0x04.*/\n    'set_col_bcbd': 0xfd,\n    /**     (control,xor,bytes...)\n     decodes an encoded text.\n                   `control`: ssslllll\n                   * lllll: 0-31, length of encoded text\n                   * sss: 0-7, number of bits to be shifted\n                   `xor`: value to be xored with\n                   `bytes`: encoded text.*/\n    'decode': 0xfe,\n    /**     extra codes with another byte.*/\n    'extra_ff': 0xff,\n    /**     Saves position to position buffer.*/\n    'pos_save': 0xff01,\n    /**     Restores position from position buffer.*/\n    'pos_load': 0xff02,\n    /**     (lo,hi)>\n     Executes a sys in current bank.*/\n    'qsys': 0xff03,\n    /**     (bank,lo,hi)>\n     Executes a sys in predefined bank.*/\n    'qsys_bank': 0xff04,\n    /**     (tab)>\n     Sets tab multiplier to `tab`.*/\n    'set_tab': 0xff05,\n    /**     (lo,hi,value)>\n     Sets a single byte to a given value.*/\n    'poke_single': 0xff06,\n    /**     (lo,hi,byte_count,values...)>\n     Sets `byte_count` bytes in the memory starting from lo.hi to `values...`*/\n    'set_mem': 0xff07,\n    /**     (lo,hi,byte_count,value)>\n     Sets `byte_count` bytes in the memory. Starts from lo.hi, uses the same value of `value`.*/\n    'fill_mem': 0xff08,\n};\n\nexport { GSCR_CODES, GSCR_TEXTS_0x00xx, GSCR_TEXTS_0xffxx };\n//# sourceMappingURL=scrCmdConsts.js.map\n","/** Screen codes - as lists and as dictionaries */\nconst scrCodesCTT = { 0: '@', 1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 27: '[', 29: ']', 32: ' ', 33: '!', 34: '\"', 35: '#', 36: '$', 37: '%', 38: '&', 39: \"'\", 40: '(', 41: ')', 42: '*', 43: '+', 44: ',', 45: '-', 46: '.', 47: '/', 48: '0', 49: '1', 50: '2', 51: '3', 52: '4', 53: '5', 54: '6', 55: '7', 56: '8', 57: '9', 58: ':', 59: ';', 60: '<', 61: '=', 62: '>', 63: '?', 65: 'A', 66: 'B', 67: 'C', 68: 'D', 69: 'E', 70: 'F', 71: 'G', 72: 'H', 73: 'I', 74: 'J', 75: 'K', 76: 'L', 77: 'M', 78: 'N', 79: 'O', 80: 'P', 81: 'Q', 82: 'R', 83: 'S', 84: 'T', 85: 'U', 86: 'V', 87: 'W', 88: 'X', 89: 'Y', 90: 'Z', 97: 'K×', 98: 'I×', 99: 'T×', 101: 'G×', 103: 'M×', 106: 'N×', 107: 'Q×', 108: 'D×', 109: 'Z×', 110: 'S×', 111: 'P×', 112: 'A×', 113: 'E×', 114: 'R×', 115: 'W×', 116: 'H×', 117: 'J×', 118: 'L×', 119: 'Y×', 120: 'U×', 121: 'O×', 123: 'F×', 124: 'C×', 125: 'X×', 126: 'V×', 127: 'B×', 28: '{POUND}', 30: '{ARR UP}', 31: '{ARR LEFT}', 64: '{SH *}', 91: '{SH +}', 92: '{CM -}', 93: '{SH -}', 94: '{PI}', 95: '{CM *}', 96: '{SH SPACE}', 100: '{CM @}', 102: '{CM +}', 104: '{CM POUND}', 105: '{SH POUND}', 122: '{SH @}' };\nconst scrTokensTTC = { '@': 0, 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26, '[': 27, ']': 29, ' ': 32, '!': 33, '\"': 34, '#': 35, '$': 36, '%': 37, '&': 38, \"'\": 39, '(': 40, ')': 41, '*': 42, '+': 43, ',': 44, '-': 45, '.': 46, '/': 47, '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57, ':': 58, ';': 59, '<': 60, '=': 61, '>': 62, '?': 63, 'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, 'K×': 97, 'I×': 98, 'T×': 99, 'G×': 101, 'M×': 103, 'N×': 106, 'Q×': 107, 'D×': 108, 'Z×': 109, 'S×': 110, 'P×': 111, 'A×': 112, 'E×': 113, 'R×': 114, 'W×': 115, 'H×': 116, 'J×': 117, 'L×': 118, 'Y×': 119, 'U×': 120, 'O×': 121, 'F×': 123, 'C×': 124, 'X×': 125, 'V×': 126, 'B×': 127, '{POUND}': 28, '{ARR UP}': 30, '{ARR LEFT}': 31, '{SH *}': 64, '{SH +}': 91, '{CM -}': 92, '{SH -}': 93, '{PI}': 94, '{CM *}': 95, '{SH SPACE}': 96, '{CM @}': 100, '{CM +}': 102, '{CM POUND}': 104, '{SH POUND}': 105, '{SH @}': 122, 'Ł': 28, '^': 30, '~': 31, '<==': 31, '<_': 31, '<--': 31 };\nconst displayCodesLow = `@abcdefghijklmnopqrstuvwxyz[£]↑← !\"#$%&'()*+,-./0123456789:;<=>?━ABCDEFGHIJKLMNOPQRSTUVWXYZ➕⡇|π◥ ▌▄‾▁▎▒▕⣤◤▕┣▗┗┓▂┏┻┳┫▎▍▐‾▀▃⅃▖▝┛▘▚`;\nconst displayCodesGfx = `@ABCDEFGHIJKLMNOPQRSTUVWXYZ[£]↑← !\"#$%&'()*+,-./0123456789:;<=>?━♠│─▔▔▁▍▕╮╰╯└╲╱┌┐●▁♥▏╭╳○♣▕♦➕⡇|.. ▌▄‾▁▎▒▕⣤.▕┣▗┗┓▂┏┻┳┫▎▍▐‾▀▃.▖▝┛▘▚`;\n\nexport { displayCodesGfx, displayCodesLow, scrCodesCTT, scrTokensTTC };\n//# sourceMappingURL=scrCodes.js.map\n","/** Sprite commands - codes as list and as dictionaries*/\nconst GSPR_TEXTS = [\n    'spr_autoinc_0', // 0, 0x00,                      Set autoincrease mode after commands - sets {TS} to autoinc\n    'spr_copy_idx', // 3, 0x03,                      Sets {TS} from {!TS} \n    'spr_rot_fill', // 4, 0x04,                                            Creates rotated values for actual sin\n    'spr_mirr_fill_multi', // 5, 0x05,                                                   Creates mirrored values for ac\n    'spr_mirr_fill_sing', // 6, 0x06,                      Creates mirrored values for actual single color sprite. { s\n    'spr_spec', // 15, 0x0f,                      \n    'spr_mirr_h_mult', // 16, 0x10,                      Mirrors multicolor sprite horizontally, from S to T.\n    'spr_mirr_h_sing', // 17, 0x11,                      Mirrors single color sprite horizontally, from S to T.\n    'spr_mirr_v', // 18, 0x12,                      Mirrors sprite vertically, from S to T.\n    'spr_rot90', // 19, 0x13,                      Rotates single color sprite 90 degrees, from S to T. (No mu\n    'spr_rot180_sing', // 20, 0x14,                      Rotates single color sprite 180 degrees, from S to T. \n    'spr_rot180_mult', // 21, 0x15,                      Rotates multicolor sprite 180 degrees, from S to T.\n    'spr_rot270', // 22, 0x16,                      Rotates single color sprite 270 degrees, from S to T. (No m\n    'spr_rot90_mirr_h_sing', // 23, 0x17,                      Rotates single color sprite 90 degrees, then mirrors horizo\n    'spr_rot90_mirr_v_sing', // 24, 0x18,                      Rotates single color sprite 90 degrees, then mirrors vertic\n    'spr_sh_left_mult', // 26, 0x1a,                      Shifts multicolor sprite left, from S to T. \n    'spr_sh_right_mult', // 27, 0x1b,                      Shifts multicolor sprite right, from S to T. \n    'spr_sh_left_sing', // 28, 0x1c,                      Shifts single color sprite left, from S to T. \n    'spr_sh_right_sing', // 29, 0x1d,                      Shifts single color sprite right, from S to T. \n    'spr_sh_up', // 30, 0x1e,                      Shifts sprite up, from S to T. \n    'spr_sh_down', // 31, 0x1f,                      Shifts sprite down, from S to T. \n    'spr_def_raw', // 33, 0x21,                      Defines a raw sprite at T. Definition is terminated only by\n    'spr_copy', // 34, 0x22,                      Copies sprite S to T.\n    'spr_def_cmp0', // 35, 0x23,                      Create an empty based sprite. Command ends when output has \n    'spr_def_cmp_base', // 36, 0x24, (base_spr_no)        Create a sprite based on sprite #`base_spr_no`.            \n    'spr_double_x', // 41, 0x29,                      Double sprite T on X axis (width).\n    'spr_double_y', // 42, 0x2a,                      Double sprite T on Y axis (height).\n    'spr_double_xy', // 43, 0x2b,                      Double sprite T on X and Y axis.\n    'spr_use_predef0', // 48, 0x30,                      Use predefined function #0. (Use spr_set_predef to define i\n    'spr_use_predef1', // 49, 0x31,                      Use predefined function #1. (Use spr_set_predef to define i\n    'spr_use_predef2', // 50, 0x32,                      Use predefined function #2. (Use spr_set_predef to define i\n    'spr_use_predef3', // 51, 0x33,                      Use predefined function #3. (Use spr_set_predef to define i\n    'spr_use_predef4', // 52, 0x34,                      Use predefined function #4. (Use spr_set_predef to define i\n    'spr_use_predef5', // 53, 0x35,                      Use predefined function #5. (Use spr_set_predef to define i\n    'spr_use_predef6', // 54, 0x36,                      Use predefined function #6. (Use spr_set_predef to define i\n    'spr_use_predef7', // 55, 0x37,                      Use predefined function #7. (Use spr_set_predef to define i\n    'spr_set_predef0', // 56, 0x38, (len,code...)        Set predefined function #0 with predefined code.           \n    'spr_set_predef1', // 57, 0x39, (len,code...)        Set predefined function #1 with predefined code.\n    'spr_set_predef2', // 58, 0x3a, (len,code...)        Set predefined function #2 with predefined code.\n    'spr_set_predef3', // 59, 0x3b, (len,code...)        Set predefined function #3 with predefined code.\n    'spr_set_predef4', // 60, 0x3c, (len,code...)        Set predefined function #4 with predefined code.\n    'spr_set_predef5', // 61, 0x3d, (len,code...)        Set predefined function #5 with predefined code.\n    'spr_set_predef6', // 62, 0x3e, (len,code...)        Set predefined function #6 with predefined code.\n    'spr_set_predef7', // 63, 0x3f, (len,code...)        Set predefined function #7 with predefined code.\n    'spr_autoinc_S', // 64, 0x40, (S)                  Sets index S. Set autoincrease mode after commands - sets S\n    'spr_inc_S', // 65, 0x41, (S)                  Increases S by 1. \n    'spr_dec_S', // 66, 0x42, (S)                  Decreases S by 1. \n    'spr_copy_idx_S', // 67, 0x43, (S)                  Sets S from T \n    'spr_rot_fill_S', // 68, 0x44, (S)                  Sets index S.                       Creates rotated values \n    'spr_mirr_fill_multi_S', // 69, 0x45, (S)                  Sets index S.                              Creates mirrored\n    'spr_mirr_fill_sing_S', // 70, 0x46, (S)                  Sets index S. Creates mirrored values for actual single col\n    'spr_spec_S', // 79, 0x4f, (S)                  Sets index S. \n    'spr_mirr_h_mult_S', // 80, 0x50, (S)                  Sets index S. Mirrors multicolor sprite horizontally, from \n    'spr_mirr_h_sing_S', // 81, 0x51, (S)                  Sets index S. Mirrors single color sprite horizontally, fro\n    'spr_mirr_v_S', // 82, 0x52, (S)                  Sets index S. Mirrors sprite vertically, from S to T.\n    'spr_rot90_S', // 83, 0x53, (S)                  Sets index S. Rotates single color sprite 90 degrees, from \n    'spr_rot180_sing_S', // 84, 0x54, (S)                  Sets index S. Rotates single color sprite 180 degrees, from\n    'spr_rot180_mult_S', // 85, 0x55, (S)                  Sets index S. Rotates multicolor sprite 180 degrees, from S\n    'spr_rot270_S', // 86, 0x56, (S)                  Sets index S. Rotates single color sprite 270 degrees, from\n    'spr_rot90_mirr_h_sing_S', // 87, 0x57, (S)                  Sets index S. Rotates single color sprite 90 degrees, then \n    'spr_rot90_mirr_v_sing_S', // 88, 0x58, (S)                  Sets index S. Rotates single color sprite 90 degrees, then \n    'spr_sh_left_mult_S', // 90, 0x5a, (S)                  Sets index S. Shifts multicolor sprite left, from S to T. \n    'spr_sh_right_mult_S', // 91, 0x5b, (S)                  Sets index S. Shifts multicolor sprite right, from S to T. \n    'spr_sh_left_sing_S', // 92, 0x5c, (S)                  Sets index S. Shifts single color sprite left, from S to T.\n    'spr_sh_right_sing_S', // 93, 0x5d, (S)                  Sets index S. Shifts single color sprite right, from S to T\n    'spr_sh_up_S', // 94, 0x5e, (S)                  Sets index S. Shifts sprite up, from S to T. \n    'spr_sh_down_S', // 95, 0x5f, (S)                  Sets index S. Shifts sprite down, from S to T. \n    'spr_set_idx_S', // 96, 0x60, (S)                  Sets sprite indexes for S.\n    'spr_def_raw_S', // 97, 0x61, (S)                  Sets index S. Defines a raw sprite at T. Definition is term\n    'spr_copy_S', // 98, 0x62, (S)                  Sets index S. Copies sprite S to T.\n    'spr_def_cmp0_S', // 99, 0x63, (S)                  Sets index S. Create an empty based sprite. Command ends wh\n    'spr_def_cmp_base_S', // 100, 0x64, (S,base_spr_no)      Sets index S. Create a sprite based on sprite #`base_spr_no\n    'spr_double_x_S', // 105, 0x69, (S)                  Sets index S. Double sprite T on X axis (width).\n    'spr_double_y_S', // 106, 0x6a, (S)                  Sets index S. Double sprite T on Y axis (height).\n    'spr_double_xy_S', // 107, 0x6b, (S)                  Sets index S. Double sprite T on X and Y axis.\n    'spr_use_predef0_S', // 112, 0x70, (S)                  Sets index S. Use predefined function #0. (Use spr_set_pred\n    'spr_use_predef1_S', // 113, 0x71, (S)                  Sets index S. Use predefined function #1. (Use spr_set_pred\n    'spr_use_predef2_S', // 114, 0x72, (S)                  Sets index S. Use predefined function #2. (Use spr_set_pred\n    'spr_use_predef3_S', // 115, 0x73, (S)                  Sets index S. Use predefined function #3. (Use spr_set_pred\n    'spr_use_predef4_S', // 116, 0x74, (S)                  Sets index S. Use predefined function #4. (Use spr_set_pred\n    'spr_use_predef5_S', // 117, 0x75, (S)                  Sets index S. Use predefined function #5. (Use spr_set_pred\n    'spr_use_predef6_S', // 118, 0x76, (S)                  Sets index S. Use predefined function #6. (Use spr_set_pred\n    'spr_use_predef7_S', // 119, 0x77, (S)                  Sets index S. Use predefined function #7. (Use spr_set_pred\n    'spr_set_predef0_S', // 120, 0x78, (S,len,code...)      Sets index S. Set predefined function #0 with predefined co\n    'spr_set_predef1_S', // 121, 0x79, (S,len,code...)      Sets index S. Set predefined function #1 with predefined co\n    'spr_set_predef2_S', // 122, 0x7a, (S,len,code...)      Sets index S. Set predefined function #2 with predefined co\n    'spr_set_predef3_S', // 123, 0x7b, (S,len,code...)      Sets index S. Set predefined function #3 with predefined co\n    'spr_set_predef4_S', // 124, 0x7c, (S,len,code...)      Sets index S. Set predefined function #4 with predefined co\n    'spr_set_predef5_S', // 125, 0x7d, (S,len,code...)      Sets index S. Set predefined function #5 with predefined co\n    'spr_set_predef6_S', // 126, 0x7e, (S,len,code...)      Sets index S. Set predefined function #6 with predefined co\n    'spr_set_predef7_S', // 127, 0x7f, (S,len,code...)      Sets index S. Set predefined function #7 with predefined co\n    'spr_autoinc_T', // 128, 0x80, (T)                  Sets index T. Set autoincrease mode after commands - sets T\n    'spr_inc_T', // 129, 0x81, (T)                  Increases T by 1. \n    'spr_dec_T', // 130, 0x82, (T)                  Decreases T by 1. \n    'spr_copy_idx_T', // 131, 0x83, (T)                  Sets T from S \n    'spr_rot_fill_T', // 132, 0x84, (T)                  Sets index T.                       Creates rotated values \n    'spr_mirr_fill_multi_T', // 133, 0x85, (T)                  Sets index T.                              Creates mirrored\n    'spr_mirr_fill_sing_T', // 134, 0x86, (T)                  Sets index T. Creates mirrored values for actual single col\n    'spr_spec_T', // 143, 0x8f, (T)                  Sets index T. \n    'spr_mirr_h_mult_T', // 144, 0x90, (T)                  Sets index T. Mirrors multicolor sprite horizontally, from \n    'spr_mirr_h_sing_T', // 145, 0x91, (T)                  Sets index T. Mirrors single color sprite horizontally, fro\n    'spr_mirr_v_T', // 146, 0x92, (T)                  Sets index T. Mirrors sprite vertically, from S to T.\n    'spr_rot90_T', // 147, 0x93, (T)                  Sets index T. Rotates single color sprite 90 degrees, from \n    'spr_rot180_sing_T', // 148, 0x94, (T)                  Sets index T. Rotates single color sprite 180 degrees, from\n    'spr_rot180_mult_T', // 149, 0x95, (T)                  Sets index T. Rotates multicolor sprite 180 degrees, from S\n    'spr_rot270_T', // 150, 0x96, (T)                  Sets index T. Rotates single color sprite 270 degrees, from\n    'spr_rot90_mirr_h_sing_T', // 151, 0x97, (T)                  Sets index T. Rotates single color sprite 90 degrees, then \n    'spr_rot90_mirr_v_sing_T', // 152, 0x98, (T)                  Sets index T. Rotates single color sprite 90 degrees, then \n    'spr_sh_left_mult_T', // 154, 0x9a, (T)                  Sets index T. Shifts multicolor sprite left, from S to T. \n    'spr_sh_right_mult_T', // 155, 0x9b, (T)                  Sets index T. Shifts multicolor sprite right, from S to T. \n    'spr_sh_left_sing_T', // 156, 0x9c, (T)                  Sets index T. Shifts single color sprite left, from S to T.\n    'spr_sh_right_sing_T', // 157, 0x9d, (T)                  Sets index T. Shifts single color sprite right, from S to T\n    'spr_sh_up_T', // 158, 0x9e, (T)                  Sets index T. Shifts sprite up, from S to T. \n    'spr_sh_down_T', // 159, 0x9f, (T)                  Sets index T. Shifts sprite down, from S to T. \n    'spr_set_idx_T', // 160, 0xa0, (T)                  Sets sprite indexes for T.\n    'spr_def_raw_T', // 161, 0xa1, (T)                  Sets index T. Defines a raw sprite at T. Definition is term\n    'spr_copy_T', // 162, 0xa2, (T)                  Sets index T. Copies sprite S to T.\n    'spr_def_cmp0_T', // 163, 0xa3, (T)                  Sets index T. Create an empty based sprite. Command ends wh\n    'spr_def_cmp_base_T', // 164, 0xa4, (T,base_spr_no)      Sets index T. Create a sprite based on sprite #`base_spr_no\n    'spr_double_x_T', // 169, 0xa9, (T)                  Sets index T. Double sprite T on X axis (width).\n    'spr_double_y_T', // 170, 0xaa, (T)                  Sets index T. Double sprite T on Y axis (height).\n    'spr_double_xy_T', // 171, 0xab, (T)                  Sets index T. Double sprite T on X and Y axis.\n    'spr_use_predef0_T', // 176, 0xb0, (T)                  Sets index T. Use predefined function #0. (Use spr_set_pred\n    'spr_use_predef1_T', // 177, 0xb1, (T)                  Sets index T. Use predefined function #1. (Use spr_set_pred\n    'spr_use_predef2_T', // 178, 0xb2, (T)                  Sets index T. Use predefined function #2. (Use spr_set_pred\n    'spr_use_predef3_T', // 179, 0xb3, (T)                  Sets index T. Use predefined function #3. (Use spr_set_pred\n    'spr_use_predef4_T', // 180, 0xb4, (T)                  Sets index T. Use predefined function #4. (Use spr_set_pred\n    'spr_use_predef5_T', // 181, 0xb5, (T)                  Sets index T. Use predefined function #5. (Use spr_set_pred\n    'spr_use_predef6_T', // 182, 0xb6, (T)                  Sets index T. Use predefined function #6. (Use spr_set_pred\n    'spr_use_predef7_T', // 183, 0xb7, (T)                  Sets index T. Use predefined function #7. (Use spr_set_pred\n    'spr_set_predef0_T', // 184, 0xb8, (T,len,code...)      Sets index T. Set predefined function #0 with predefined co\n    'spr_set_predef1_T', // 185, 0xb9, (T,len,code...)      Sets index T. Set predefined function #1 with predefined co\n    'spr_set_predef2_T', // 186, 0xba, (T,len,code...)      Sets index T. Set predefined function #2 with predefined co\n    'spr_set_predef3_T', // 187, 0xbb, (T,len,code...)      Sets index T. Set predefined function #3 with predefined co\n    'spr_set_predef4_T', // 188, 0xbc, (T,len,code...)      Sets index T. Set predefined function #4 with predefined co\n    'spr_set_predef5_T', // 189, 0xbd, (T,len,code...)      Sets index T. Set predefined function #5 with predefined co\n    'spr_set_predef6_T', // 190, 0xbe, (T,len,code...)      Sets index T. Set predefined function #6 with predefined co\n    'spr_set_predef7_T', // 191, 0xbf, (T,len,code...)      Sets index T. Set predefined function #7 with predefined co\n    'spr_autoinc_TS', // 192, 0xc0, (TS)                 Sets index T and S. Set autoincrease mode after commands - \n    'spr_inc_TS', // 193, 0xc1, (TS)                 Increases T and S by 1. \n    'spr_dec_TS', // 194, 0xc2, (TS)                 Decreases T and S by 1. \n    'spr_copy_idx_TS', // 195, 0xc3, (TS)                 Sets T and S from each other \n    'spr_rot_fill_TS', // 196, 0xc4, (TS)                 Sets index T and S.                       Creates rotated v\n    'spr_mirr_fill_multi_TS', // 197, 0xc5, (TS)                 Sets index T and S.                              Creates mi\n    'spr_mirr_fill_sing_TS', // 198, 0xc6, (TS)                 Sets index T and S. Creates mirrored values for actual sing\n    'spr_spec_TS', // 207, 0xcf, (TS)                 Sets index T and S. \n    'spr_mirr_h_mult_TS', // 208, 0xd0, (TS)                 Sets index T and S. Mirrors multicolor sprite horizontally,\n    'spr_mirr_h_sing_TS', // 209, 0xd1, (TS)                 Sets index T and S. Mirrors single color sprite horizontall\n    'spr_mirr_v_TS', // 210, 0xd2, (TS)                 Sets index T and S. Mirrors sprite vertically, from S to T.\n    'spr_rot90_TS', // 211, 0xd3, (TS)                 Sets index T and S. Rotates single color sprite 90 degrees,\n    'spr_rot180_sing_TS', // 212, 0xd4, (TS)                 Sets index T and S. Rotates single color sprite 180 degrees\n    'spr_rot180_mult_TS', // 213, 0xd5, (TS)                 Sets index T and S. Rotates multicolor sprite 180 degrees, \n    'spr_rot270_TS', // 214, 0xd6, (TS)                 Sets index T and S. Rotates single color sprite 270 degrees\n    'spr_rot90_mirr_h_sing_TS', // 215, 0xd7, (TS)                 Sets index T and S. Rotates single color sprite 90 degrees,\n    'spr_rot90_mirr_v_sing_TS', // 216, 0xd8, (TS)                 Sets index T and S. Rotates single color sprite 90 degrees,\n    'spr_sh_left_mult_TS', // 218, 0xda, (TS)                 Sets index T and S. Shifts multicolor sprite left, from S t\n    'spr_sh_right_mult_TS', // 219, 0xdb, (TS)                 Sets index T and S. Shifts multicolor sprite right, from S \n    'spr_sh_left_sing_TS', // 220, 0xdc, (TS)                 Sets index T and S. Shifts single color sprite left, from S\n    'spr_sh_right_sing_TS', // 221, 0xdd, (TS)                 Sets index T and S. Shifts single color sprite right, from \n    'spr_sh_up_TS', // 222, 0xde, (TS)                 Sets index T and S. Shifts sprite up, from S to T. \n    'spr_sh_down_TS', // 223, 0xdf, (TS)                 Sets index T and S. Shifts sprite down, from S to T. \n    'spr_set_idx_TS', // 224, 0xe0, (TS)                 Sets sprite indexes for T and S.\n    'spr_def_raw_TS', // 225, 0xe1, (TS)                 Sets index T and S. Defines a raw sprite at T. Definition i\n    'spr_copy_TS', // 226, 0xe2, (TS)                 Sets index T and S. Copies sprite S to T.\n    'spr_def_cmp0_TS', // 227, 0xe3, (TS)                 Sets index T and S. Create an empty based sprite. Command e\n    'spr_def_cmp_base_TS', // 228, 0xe4, (TS,base_spr_no)     Sets index T and S. Create a sprite based on sprite #`base_\n    'spr_double_x_TS', // 233, 0xe9, (TS)                 Sets index T and S. Double sprite T on X axis (width).\n    'spr_double_y_TS', // 234, 0xea, (TS)                 Sets index T and S. Double sprite T on Y axis (height).\n    'spr_double_xy_TS', // 235, 0xeb, (TS)                 Sets index T and S. Double sprite T on X and Y axis.\n    'spr_use_predef0_TS', // 240, 0xf0, (TS)                 Sets index T and S. Use predefined function #0. (Use spr_se\n    'spr_use_predef1_TS', // 241, 0xf1, (TS)                 Sets index T and S. Use predefined function #1. (Use spr_se\n    'spr_use_predef2_TS', // 242, 0xf2, (TS)                 Sets index T and S. Use predefined function #2. (Use spr_se\n    'spr_use_predef3_TS', // 243, 0xf3, (TS)                 Sets index T and S. Use predefined function #3. (Use spr_se\n    'spr_use_predef4_TS', // 244, 0xf4, (TS)                 Sets index T and S. Use predefined function #4. (Use spr_se\n    'spr_use_predef5_TS', // 245, 0xf5, (TS)                 Sets index T and S. Use predefined function #5. (Use spr_se\n    'spr_use_predef6_TS', // 246, 0xf6, (TS)                 Sets index T and S. Use predefined function #6. (Use spr_se\n    'spr_use_predef7_TS', // 247, 0xf7, (TS)                 Sets index T and S. Use predefined function #7. (Use spr_se\n    'spr_set_predef0_TS', // 248, 0xf8, (TS,len,code...)     Sets index T and S. Set predefined function #0 with predefi\n    'spr_set_predef1_TS', // 249, 0xf9, (TS,len,code...)     Sets index T and S. Set predefined function #1 with predefi\n    'spr_set_predef2_TS', // 250, 0xfa, (TS,len,code...)     Sets index T and S. Set predefined function #2 with predefi\n    'spr_set_predef3_TS', // 251, 0xfb, (TS,len,code...)     Sets index T and S. Set predefined function #3 with predefi\n    'spr_set_predef4_TS', // 252, 0xfc, (TS,len,code...)     Sets index T and S. Set predefined function #4 with predefi\n    'spr_set_predef5_TS', // 253, 0xfd, (TS,len,code...)     Sets index T and S. Set predefined function #5 with predefi\n    'spr_set_predef6_TS', // 254, 0xfe, (TS,len,code...)     Sets index T and S. Set predefined function #6 with predefi\n    'spr_set_predef7_TS', // 255, 0xff, (TS,len,code...)     Sets index T and S. Set predefined function #7 with predefi\n];\nconst GSPR_CODES = {\n    /** Set autoincrease mode after commands - sets {TS} to autoincrease.  */\n    'spr_autoinc_0': 0x00,\n    /** Sets {TS} from {!TS}  */\n    'spr_copy_idx': 0x03,\n    /**\n                     Creates rotated values for actual single_color sprite.\n                     spr_rot90, spr_rot180_sing, spr_rot270.\n                     Uses source as the base image, and autoincrements T.\n                      */\n    'spr_rot_fill': 0x04,\n    /**\n                            Creates mirrored values for actual multicolor sprite.\n                            ( spr_mirr_h_multi spr_mirr_v spr_rot180_mult ) */\n    'spr_mirr_fill_multi': 0x05,\n    /** Creates mirrored values for actual single color sprite. { spr_mirr_h_sing spr_mirr_v spr_rot180_sing }  */\n    'spr_mirr_fill_sing': 0x06,\n    /**  */\n    'spr_spec': 0x0f,\n    /** Mirrors multicolor sprite horizontally, from S to T. */\n    'spr_mirr_h_mult': 0x10,\n    /** Mirrors single color sprite horizontally, from S to T. */\n    'spr_mirr_h_sing': 0x11,\n    /** Mirrors sprite vertically, from S to T. */\n    'spr_mirr_v': 0x12,\n    /** Rotates single color sprite 90 degrees, from S to T. (No multicolor support!) */\n    'spr_rot90': 0x13,\n    /** Rotates single color sprite 180 degrees, from S to T.  */\n    'spr_rot180_sing': 0x14,\n    /** Rotates multicolor sprite 180 degrees, from S to T. */\n    'spr_rot180_mult': 0x15,\n    /** Rotates single color sprite 270 degrees, from S to T. (No multicolor support!)  */\n    'spr_rot270': 0x16,\n    /** Rotates single color sprite 90 degrees, then mirrors horizontally from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_h_sing': 0x17,\n    /** Rotates single color sprite 90 degrees, then mirrors vertically from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_v_sing': 0x18,\n    /** Shifts multicolor sprite left, from S to T.  */\n    'spr_sh_left_mult': 0x1a,\n    /** Shifts multicolor sprite right, from S to T.  */\n    'spr_sh_right_mult': 0x1b,\n    /** Shifts single color sprite left, from S to T.  */\n    'spr_sh_left_sing': 0x1c,\n    /** Shifts single color sprite right, from S to T.  */\n    'spr_sh_right_sing': 0x1d,\n    /** Shifts sprite up, from S to T.  */\n    'spr_sh_up': 0x1e,\n    /** Shifts sprite down, from S to T.  */\n    'spr_sh_down': 0x1f,\n    /** Defines a raw sprite at T. Definition is terminated only by the end of string. */\n    'spr_def_raw': 0x21,\n    /** Copies sprite S to T. */\n    'spr_copy': 0x22,\n    /** Create an empty based sprite. Command ends when output has 63 bytes.\n                     To assure that code is executed correctly, start another sprite command after definitions. */\n    'spr_def_cmp0': 0x23,\n    /** (base_spr_no)\nCreate a sprite based on sprite #`base_spr_no`.\n                         Only the differences has to be added. */\n    'spr_def_cmp_base': 0x24,\n    /** Double sprite T on X axis (width). */\n    'spr_double_x': 0x29,\n    /** Double sprite T on Y axis (height). */\n    'spr_double_y': 0x2a,\n    /** Double sprite T on X and Y axis. */\n    'spr_double_xy': 0x2b,\n    /** Use predefined function #0. (Use spr_set_predef to define it.) */\n    'spr_use_predef0': 0x30,\n    /** Use predefined function #1. (Use spr_set_predef to define it.) */\n    'spr_use_predef1': 0x31,\n    /** Use predefined function #2. (Use spr_set_predef to define it.) */\n    'spr_use_predef2': 0x32,\n    /** Use predefined function #3. (Use spr_set_predef to define it.) */\n    'spr_use_predef3': 0x33,\n    /** Use predefined function #4. (Use spr_set_predef to define it.) */\n    'spr_use_predef4': 0x34,\n    /** Use predefined function #5. (Use spr_set_predef to define it.) */\n    'spr_use_predef5': 0x35,\n    /** Use predefined function #6. (Use spr_set_predef to define it.) */\n    'spr_use_predef6': 0x36,\n    /** Use predefined function #7. (Use spr_set_predef to define it.) */\n    'spr_use_predef7': 0x37,\n    /** (len,code...)\nSet predefined function #0 with predefined code.\n                        E.g.\n                        Definining fn 0: { spr_set_predef0 1 spr_rot270 }\n                        Using fn0: { spr_use_predef0 } */\n    'spr_set_predef0': 0x38,\n    /** (len,code...)\nSet predefined function #1 with predefined code. */\n    'spr_set_predef1': 0x39,\n    /** (len,code...)\nSet predefined function #2 with predefined code. */\n    'spr_set_predef2': 0x3a,\n    /** (len,code...)\nSet predefined function #3 with predefined code. */\n    'spr_set_predef3': 0x3b,\n    /** (len,code...)\nSet predefined function #4 with predefined code. */\n    'spr_set_predef4': 0x3c,\n    /** (len,code...)\nSet predefined function #5 with predefined code. */\n    'spr_set_predef5': 0x3d,\n    /** (len,code...)\nSet predefined function #6 with predefined code. */\n    'spr_set_predef6': 0x3e,\n    /** (len,code...)\nSet predefined function #7 with predefined code. */\n    'spr_set_predef7': 0x3f,\n    /** (S)\nSets index S.\nSet autoincrease mode after commands - sets S to autoincrease.  */\n    'spr_autoinc_S': 0x40,\n    /** (S)\nIncreases S by 1.  */\n    'spr_inc_S': 0x41,\n    /** (S)\nDecreases S by 1.  */\n    'spr_dec_S': 0x42,\n    /** (S)\nSets S from T  */\n    'spr_copy_idx_S': 0x43,\n    /** (S)\nSets index S.\n                     Creates rotated values for actual single_color sprite.\n                     spr_rot90, spr_rot180_sing, spr_rot270.\n                     Uses source as the base image, and autoincrements T.\n                      */\n    'spr_rot_fill_S': 0x44,\n    /** (S)\nSets index S.\n                            Creates mirrored values for actual multicolor sprite.\n                            ( spr_mirr_h_multi spr_mirr_v spr_rot180_mult ) */\n    'spr_mirr_fill_multi_S': 0x45,\n    /** (S)\nSets index S.\nCreates mirrored values for actual single color sprite. { spr_mirr_h_sing spr_mirr_v spr_rot180_sing }  */\n    'spr_mirr_fill_sing_S': 0x46,\n    /** (S)\nSets index S.\n */\n    'spr_spec_S': 0x4f,\n    /** (S)\nSets index S.\nMirrors multicolor sprite horizontally, from S to T. */\n    'spr_mirr_h_mult_S': 0x50,\n    /** (S)\nSets index S.\nMirrors single color sprite horizontally, from S to T. */\n    'spr_mirr_h_sing_S': 0x51,\n    /** (S)\nSets index S.\nMirrors sprite vertically, from S to T. */\n    'spr_mirr_v_S': 0x52,\n    /** (S)\nSets index S.\nRotates single color sprite 90 degrees, from S to T. (No multicolor support!) */\n    'spr_rot90_S': 0x53,\n    /** (S)\nSets index S.\nRotates single color sprite 180 degrees, from S to T.  */\n    'spr_rot180_sing_S': 0x54,\n    /** (S)\nSets index S.\nRotates multicolor sprite 180 degrees, from S to T. */\n    'spr_rot180_mult_S': 0x55,\n    /** (S)\nSets index S.\nRotates single color sprite 270 degrees, from S to T. (No multicolor support!)  */\n    'spr_rot270_S': 0x56,\n    /** (S)\nSets index S.\nRotates single color sprite 90 degrees, then mirrors horizontally from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_h_sing_S': 0x57,\n    /** (S)\nSets index S.\nRotates single color sprite 90 degrees, then mirrors vertically from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_v_sing_S': 0x58,\n    /** (S)\nSets index S.\nShifts multicolor sprite left, from S to T.  */\n    'spr_sh_left_mult_S': 0x5a,\n    /** (S)\nSets index S.\nShifts multicolor sprite right, from S to T.  */\n    'spr_sh_right_mult_S': 0x5b,\n    /** (S)\nSets index S.\nShifts single color sprite left, from S to T.  */\n    'spr_sh_left_sing_S': 0x5c,\n    /** (S)\nSets index S.\nShifts single color sprite right, from S to T.  */\n    'spr_sh_right_sing_S': 0x5d,\n    /** (S)\nSets index S.\nShifts sprite up, from S to T.  */\n    'spr_sh_up_S': 0x5e,\n    /** (S)\nSets index S.\nShifts sprite down, from S to T.  */\n    'spr_sh_down_S': 0x5f,\n    /** (S)\nSets sprite indexes for S. */\n    'spr_set_idx_S': 0x60,\n    /** (S)\nSets index S.\nDefines a raw sprite at T. Definition is terminated only by the end of string. */\n    'spr_def_raw_S': 0x61,\n    /** (S)\nSets index S.\nCopies sprite S to T. */\n    'spr_copy_S': 0x62,\n    /** (S)\nSets index S.\nCreate an empty based sprite. Command ends when output has 63 bytes.\n                     To assure that code is executed correctly, start another sprite command after definitions. */\n    'spr_def_cmp0_S': 0x63,\n    /** (S,base_spr_no)\nSets index S.\nCreate a sprite based on sprite #`base_spr_no`.\n                         Only the differences has to be added. */\n    'spr_def_cmp_base_S': 0x64,\n    /** (S)\nSets index S.\nDouble sprite T on X axis (width). */\n    'spr_double_x_S': 0x69,\n    /** (S)\nSets index S.\nDouble sprite T on Y axis (height). */\n    'spr_double_y_S': 0x6a,\n    /** (S)\nSets index S.\nDouble sprite T on X and Y axis. */\n    'spr_double_xy_S': 0x6b,\n    /** (S)\nSets index S.\nUse predefined function #0. (Use spr_set_predef to define it.) */\n    'spr_use_predef0_S': 0x70,\n    /** (S)\nSets index S.\nUse predefined function #1. (Use spr_set_predef to define it.) */\n    'spr_use_predef1_S': 0x71,\n    /** (S)\nSets index S.\nUse predefined function #2. (Use spr_set_predef to define it.) */\n    'spr_use_predef2_S': 0x72,\n    /** (S)\nSets index S.\nUse predefined function #3. (Use spr_set_predef to define it.) */\n    'spr_use_predef3_S': 0x73,\n    /** (S)\nSets index S.\nUse predefined function #4. (Use spr_set_predef to define it.) */\n    'spr_use_predef4_S': 0x74,\n    /** (S)\nSets index S.\nUse predefined function #5. (Use spr_set_predef to define it.) */\n    'spr_use_predef5_S': 0x75,\n    /** (S)\nSets index S.\nUse predefined function #6. (Use spr_set_predef to define it.) */\n    'spr_use_predef6_S': 0x76,\n    /** (S)\nSets index S.\nUse predefined function #7. (Use spr_set_predef to define it.) */\n    'spr_use_predef7_S': 0x77,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #0 with predefined code.\n                        E.g.\n                        Definining fn 0: { spr_set_predef0 1 spr_rot270 }\n                        Using fn0: { spr_use_predef0 } */\n    'spr_set_predef0_S': 0x78,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #1 with predefined code. */\n    'spr_set_predef1_S': 0x79,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #2 with predefined code. */\n    'spr_set_predef2_S': 0x7a,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #3 with predefined code. */\n    'spr_set_predef3_S': 0x7b,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #4 with predefined code. */\n    'spr_set_predef4_S': 0x7c,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #5 with predefined code. */\n    'spr_set_predef5_S': 0x7d,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #6 with predefined code. */\n    'spr_set_predef6_S': 0x7e,\n    /** (S,len,code...)\nSets index S.\nSet predefined function #7 with predefined code. */\n    'spr_set_predef7_S': 0x7f,\n    /** (T)\nSets index T.\nSet autoincrease mode after commands - sets T to autoincrease.  */\n    'spr_autoinc_T': 0x80,\n    /** (T)\nIncreases T by 1.  */\n    'spr_inc_T': 0x81,\n    /** (T)\nDecreases T by 1.  */\n    'spr_dec_T': 0x82,\n    /** (T)\nSets T from S  */\n    'spr_copy_idx_T': 0x83,\n    /** (T)\nSets index T.\n                     Creates rotated values for actual single_color sprite.\n                     spr_rot90, spr_rot180_sing, spr_rot270.\n                     Uses source as the base image, and autoincrements T.\n                      */\n    'spr_rot_fill_T': 0x84,\n    /** (T)\nSets index T.\n                            Creates mirrored values for actual multicolor sprite.\n                            ( spr_mirr_h_multi spr_mirr_v spr_rot180_mult ) */\n    'spr_mirr_fill_multi_T': 0x85,\n    /** (T)\nSets index T.\nCreates mirrored values for actual single color sprite. { spr_mirr_h_sing spr_mirr_v spr_rot180_sing }  */\n    'spr_mirr_fill_sing_T': 0x86,\n    /** (T)\nSets index T.\n */\n    'spr_spec_T': 0x8f,\n    /** (T)\nSets index T.\nMirrors multicolor sprite horizontally, from S to T. */\n    'spr_mirr_h_mult_T': 0x90,\n    /** (T)\nSets index T.\nMirrors single color sprite horizontally, from S to T. */\n    'spr_mirr_h_sing_T': 0x91,\n    /** (T)\nSets index T.\nMirrors sprite vertically, from S to T. */\n    'spr_mirr_v_T': 0x92,\n    /** (T)\nSets index T.\nRotates single color sprite 90 degrees, from S to T. (No multicolor support!) */\n    'spr_rot90_T': 0x93,\n    /** (T)\nSets index T.\nRotates single color sprite 180 degrees, from S to T.  */\n    'spr_rot180_sing_T': 0x94,\n    /** (T)\nSets index T.\nRotates multicolor sprite 180 degrees, from S to T. */\n    'spr_rot180_mult_T': 0x95,\n    /** (T)\nSets index T.\nRotates single color sprite 270 degrees, from S to T. (No multicolor support!)  */\n    'spr_rot270_T': 0x96,\n    /** (T)\nSets index T.\nRotates single color sprite 90 degrees, then mirrors horizontally from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_h_sing_T': 0x97,\n    /** (T)\nSets index T.\nRotates single color sprite 90 degrees, then mirrors vertically from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_v_sing_T': 0x98,\n    /** (T)\nSets index T.\nShifts multicolor sprite left, from S to T.  */\n    'spr_sh_left_mult_T': 0x9a,\n    /** (T)\nSets index T.\nShifts multicolor sprite right, from S to T.  */\n    'spr_sh_right_mult_T': 0x9b,\n    /** (T)\nSets index T.\nShifts single color sprite left, from S to T.  */\n    'spr_sh_left_sing_T': 0x9c,\n    /** (T)\nSets index T.\nShifts single color sprite right, from S to T.  */\n    'spr_sh_right_sing_T': 0x9d,\n    /** (T)\nSets index T.\nShifts sprite up, from S to T.  */\n    'spr_sh_up_T': 0x9e,\n    /** (T)\nSets index T.\nShifts sprite down, from S to T.  */\n    'spr_sh_down_T': 0x9f,\n    /** (T)\nSets sprite indexes for T. */\n    'spr_set_idx_T': 0xa0,\n    /** (T)\nSets index T.\nDefines a raw sprite at T. Definition is terminated only by the end of string. */\n    'spr_def_raw_T': 0xa1,\n    /** (T)\nSets index T.\nCopies sprite S to T. */\n    'spr_copy_T': 0xa2,\n    /** (T)\nSets index T.\nCreate an empty based sprite. Command ends when output has 63 bytes.\n                     To assure that code is executed correctly, start another sprite command after definitions. */\n    'spr_def_cmp0_T': 0xa3,\n    /** (T,base_spr_no)\nSets index T.\nCreate a sprite based on sprite #`base_spr_no`.\n                         Only the differences has to be added. */\n    'spr_def_cmp_base_T': 0xa4,\n    /** (T)\nSets index T.\nDouble sprite T on X axis (width). */\n    'spr_double_x_T': 0xa9,\n    /** (T)\nSets index T.\nDouble sprite T on Y axis (height). */\n    'spr_double_y_T': 0xaa,\n    /** (T)\nSets index T.\nDouble sprite T on X and Y axis. */\n    'spr_double_xy_T': 0xab,\n    /** (T)\nSets index T.\nUse predefined function #0. (Use spr_set_predef to define it.) */\n    'spr_use_predef0_T': 0xb0,\n    /** (T)\nSets index T.\nUse predefined function #1. (Use spr_set_predef to define it.) */\n    'spr_use_predef1_T': 0xb1,\n    /** (T)\nSets index T.\nUse predefined function #2. (Use spr_set_predef to define it.) */\n    'spr_use_predef2_T': 0xb2,\n    /** (T)\nSets index T.\nUse predefined function #3. (Use spr_set_predef to define it.) */\n    'spr_use_predef3_T': 0xb3,\n    /** (T)\nSets index T.\nUse predefined function #4. (Use spr_set_predef to define it.) */\n    'spr_use_predef4_T': 0xb4,\n    /** (T)\nSets index T.\nUse predefined function #5. (Use spr_set_predef to define it.) */\n    'spr_use_predef5_T': 0xb5,\n    /** (T)\nSets index T.\nUse predefined function #6. (Use spr_set_predef to define it.) */\n    'spr_use_predef6_T': 0xb6,\n    /** (T)\nSets index T.\nUse predefined function #7. (Use spr_set_predef to define it.) */\n    'spr_use_predef7_T': 0xb7,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #0 with predefined code.\n                        E.g.\n                        Definining fn 0: { spr_set_predef0 1 spr_rot270 }\n                        Using fn0: { spr_use_predef0 } */\n    'spr_set_predef0_T': 0xb8,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #1 with predefined code. */\n    'spr_set_predef1_T': 0xb9,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #2 with predefined code. */\n    'spr_set_predef2_T': 0xba,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #3 with predefined code. */\n    'spr_set_predef3_T': 0xbb,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #4 with predefined code. */\n    'spr_set_predef4_T': 0xbc,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #5 with predefined code. */\n    'spr_set_predef5_T': 0xbd,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #6 with predefined code. */\n    'spr_set_predef6_T': 0xbe,\n    /** (T,len,code...)\nSets index T.\nSet predefined function #7 with predefined code. */\n    'spr_set_predef7_T': 0xbf,\n    /** (TS)\nSets index T and S.\nSet autoincrease mode after commands - sets T and S to autoincrease.  */\n    'spr_autoinc_TS': 0xc0,\n    /** (TS)\nIncreases T and S by 1.  */\n    'spr_inc_TS': 0xc1,\n    /** (TS)\nDecreases T and S by 1.  */\n    'spr_dec_TS': 0xc2,\n    /** (TS)\nSets T and S from each other  */\n    'spr_copy_idx_TS': 0xc3,\n    /** (TS)\nSets index T and S.\n                     Creates rotated values for actual single_color sprite.\n                     spr_rot90, spr_rot180_sing, spr_rot270.\n                     Uses source as the base image, and autoincrements T.\n                      */\n    'spr_rot_fill_TS': 0xc4,\n    /** (TS)\nSets index T and S.\n                            Creates mirrored values for actual multicolor sprite.\n                            ( spr_mirr_h_multi spr_mirr_v spr_rot180_mult ) */\n    'spr_mirr_fill_multi_TS': 0xc5,\n    /** (TS)\nSets index T and S.\nCreates mirrored values for actual single color sprite. { spr_mirr_h_sing spr_mirr_v spr_rot180_sing }  */\n    'spr_mirr_fill_sing_TS': 0xc6,\n    /** (TS)\nSets index T and S.\n */\n    'spr_spec_TS': 0xcf,\n    /** (TS)\nSets index T and S.\nMirrors multicolor sprite horizontally, from S to T. */\n    'spr_mirr_h_mult_TS': 0xd0,\n    /** (TS)\nSets index T and S.\nMirrors single color sprite horizontally, from S to T. */\n    'spr_mirr_h_sing_TS': 0xd1,\n    /** (TS)\nSets index T and S.\nMirrors sprite vertically, from S to T. */\n    'spr_mirr_v_TS': 0xd2,\n    /** (TS)\nSets index T and S.\nRotates single color sprite 90 degrees, from S to T. (No multicolor support!) */\n    'spr_rot90_TS': 0xd3,\n    /** (TS)\nSets index T and S.\nRotates single color sprite 180 degrees, from S to T.  */\n    'spr_rot180_sing_TS': 0xd4,\n    /** (TS)\nSets index T and S.\nRotates multicolor sprite 180 degrees, from S to T. */\n    'spr_rot180_mult_TS': 0xd5,\n    /** (TS)\nSets index T and S.\nRotates single color sprite 270 degrees, from S to T. (No multicolor support!)  */\n    'spr_rot270_TS': 0xd6,\n    /** (TS)\nSets index T and S.\nRotates single color sprite 90 degrees, then mirrors horizontally from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_h_sing_TS': 0xd7,\n    /** (TS)\nSets index T and S.\nRotates single color sprite 90 degrees, then mirrors vertically from S to T. (No multicolor support!) */\n    'spr_rot90_mirr_v_sing_TS': 0xd8,\n    /** (TS)\nSets index T and S.\nShifts multicolor sprite left, from S to T.  */\n    'spr_sh_left_mult_TS': 0xda,\n    /** (TS)\nSets index T and S.\nShifts multicolor sprite right, from S to T.  */\n    'spr_sh_right_mult_TS': 0xdb,\n    /** (TS)\nSets index T and S.\nShifts single color sprite left, from S to T.  */\n    'spr_sh_left_sing_TS': 0xdc,\n    /** (TS)\nSets index T and S.\nShifts single color sprite right, from S to T.  */\n    'spr_sh_right_sing_TS': 0xdd,\n    /** (TS)\nSets index T and S.\nShifts sprite up, from S to T.  */\n    'spr_sh_up_TS': 0xde,\n    /** (TS)\nSets index T and S.\nShifts sprite down, from S to T.  */\n    'spr_sh_down_TS': 0xdf,\n    /** (TS)\nSets sprite indexes for T and S. */\n    'spr_set_idx_TS': 0xe0,\n    /** (TS)\nSets index T and S.\nDefines a raw sprite at T. Definition is terminated only by the end of string. */\n    'spr_def_raw_TS': 0xe1,\n    /** (TS)\nSets index T and S.\nCopies sprite S to T. */\n    'spr_copy_TS': 0xe2,\n    /** (TS)\nSets index T and S.\nCreate an empty based sprite. Command ends when output has 63 bytes.\n                     To assure that code is executed correctly, start another sprite command after definitions. */\n    'spr_def_cmp0_TS': 0xe3,\n    /** (TS,base_spr_no)\nSets index T and S.\nCreate a sprite based on sprite #`base_spr_no`.\n                         Only the differences has to be added. */\n    'spr_def_cmp_base_TS': 0xe4,\n    /** (TS)\nSets index T and S.\nDouble sprite T on X axis (width). */\n    'spr_double_x_TS': 0xe9,\n    /** (TS)\nSets index T and S.\nDouble sprite T on Y axis (height). */\n    'spr_double_y_TS': 0xea,\n    /** (TS)\nSets index T and S.\nDouble sprite T on X and Y axis. */\n    'spr_double_xy_TS': 0xeb,\n    /** (TS)\nSets index T and S.\nUse predefined function #0. (Use spr_set_predef to define it.) */\n    'spr_use_predef0_TS': 0xf0,\n    /** (TS)\nSets index T and S.\nUse predefined function #1. (Use spr_set_predef to define it.) */\n    'spr_use_predef1_TS': 0xf1,\n    /** (TS)\nSets index T and S.\nUse predefined function #2. (Use spr_set_predef to define it.) */\n    'spr_use_predef2_TS': 0xf2,\n    /** (TS)\nSets index T and S.\nUse predefined function #3. (Use spr_set_predef to define it.) */\n    'spr_use_predef3_TS': 0xf3,\n    /** (TS)\nSets index T and S.\nUse predefined function #4. (Use spr_set_predef to define it.) */\n    'spr_use_predef4_TS': 0xf4,\n    /** (TS)\nSets index T and S.\nUse predefined function #5. (Use spr_set_predef to define it.) */\n    'spr_use_predef5_TS': 0xf5,\n    /** (TS)\nSets index T and S.\nUse predefined function #6. (Use spr_set_predef to define it.) */\n    'spr_use_predef6_TS': 0xf6,\n    /** (TS)\nSets index T and S.\nUse predefined function #7. (Use spr_set_predef to define it.) */\n    'spr_use_predef7_TS': 0xf7,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #0 with predefined code.\n                        E.g.\n                        Definining fn 0: { spr_set_predef0 1 spr_rot270 }\n                        Using fn0: { spr_use_predef0 } */\n    'spr_set_predef0_TS': 0xf8,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #1 with predefined code. */\n    'spr_set_predef1_TS': 0xf9,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #2 with predefined code. */\n    'spr_set_predef2_TS': 0xfa,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #3 with predefined code. */\n    'spr_set_predef3_TS': 0xfb,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #4 with predefined code. */\n    'spr_set_predef4_TS': 0xfc,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #5 with predefined code. */\n    'spr_set_predef5_TS': 0xfd,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #6 with predefined code. */\n    'spr_set_predef6_TS': 0xfe,\n    /** (TS,len,code...)\nSets index T and S.\nSet predefined function #7 with predefined code. */\n    'spr_set_predef7_TS': 0xff,\n};\n\nexport { GSPR_CODES, GSPR_TEXTS };\n//# sourceMappingURL=sprCmdConsts.js.map\n","/** Token properties */\nconst TOK_PROP = {\n    SUPERSTRONG: 0xc0, // Commands - Superstrong command - a single token. Terminates previous command and starts a new one.\n    STRONG: 0x80, // Commands - Strong command. Terminates previous command.\n    SUPER: 0x40, // Commands - Super property of the command\n    NEXT_ADDR: 0x20, // Commands - Next address is stored following the token\n    BRANCH_ADDR: 0x10, // Commands - Address for special branching is stored (else branches)\n    SUB_COMMAND: 0x08, // Commands - Sub command is needed for the command\n    FN_WITH_BRACKET: 0x20, // Functions - Function starts with a bracket - included in the token\n    EVAL_SINGLE: 0x01, // Evaluation - Single expression is evaluated\n    EVAL_ALL: 0x02, // Evaluation - All expressions are evaluated\n    EVAL_NOTHING: 0x00, // Evaluation - Nothing is evaluated\n    COMMAND: 0x80, // Type - 0x80 - Token is a command, e.g. \"print\".\n    COMMAND_STRONG: 0xc0, // Type - 0xc0 - Strong command\n    FUNC: 0x40, // Type - 0x40 - Token is a function, e.g. \"abs\".\n    OPERATOR: 0x20, // Type - 0x20 - Token is an operator, e.g. \"+\".\n    TYPE: 0x00, // Type - 0x00 - Token is a type, e.g. \"BYTE\".\n    MASK: 0xc4, // Type - 0xc0 - Mask for detecting main types\n    MASK_LONG: 0xe0, // Type - 0xe0 - Mask for detecting operator and type\n};\n\nexport { TOK_PROP };\n//# sourceMappingURL=tokenProps.js.map\n","/** Variable index table.\n*\n* input index: scr_code XOR 0x40        * output: index of variable, or $ff for invalid code.        *\n* E.g. 'c', scr_code = 0x03, xored = 0x43,        * output = 0x06, $cf06: type, $cf07: lo, $cf08: hi\n*\n*/\nconst GVAR_IDX_TABLE = [\n    0xff, 0x4e, 0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, // 0x00-0x07       A    B    C    D    E    F    G    \n    0x63, 0x66, 0x69, 0x6c, 0x6f, 0x72, 0x75, 0x78, // 0x08-0x0f  H    I    J    K    L    M    N    O    \n    0x7b, 0x7e, 0x81, 0x84, 0x87, 0x8a, 0x8d, 0x90, // 0x10-0x17  P    Q    R    S    T    U    V    W    \n    0x93, 0x96, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x18-0x1f  X    Y    Z                             \n    0xff, 0xba, 0xb4, 0xd5, 0xff, 0xae, 0xff, 0xc0, // 0x20-0x27       Kx   Ix   Tx        Gx        Mx   \n    0xff, 0xff, 0xc3, 0xcc, 0xa5, 0xe7, 0xd2, 0xc9, // 0x28-0x2f            Nx   Qx   Dx   Zx   Sx   Px   \n    0x9c, 0xa8, 0xcf, 0xde, 0xb1, 0xb7, 0xbd, 0xe4, // 0x30-0x37  Ax   Ex   Rx   Wx   Hx   Jx   Lx   Yx   \n    0xd8, 0xc6, 0xff, 0xab, 0xa2, 0xe1, 0xdb, 0x9f, // 0x38-0x3f  Ux   Ox        Fx   Cx   Xx   Vx   Bx   \n    0xff, 0x00, 0x03, 0x06, 0x09, 0x0c, 0x0f, 0x12, // 0x40-0x47       a    b    c    d    e    f    g    \n    0x15, 0x18, 0x1b, 0x1e, 0x21, 0x24, 0x27, 0x2a, // 0x48-0x4f  h    i    j    k    l    m    n    o    \n    0x2d, 0x30, 0x33, 0x36, 0x39, 0x3c, 0x3f, 0x42, // 0x50-0x57  p    q    r    s    t    u    v    w    \n    0x45, 0x48, 0x4b, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x58-0x5f  x    y    z                             \n];\n/** Variable short to code dictionary.\n*\n* Maps variable short names to their code.\n* E.g. 'a' -> 0x01, 'A' -> 0x1b, 'Ax' -> 0x35\n*/\nconst GVAR_SHORT_TO_CODE_DICT = {\n    'a': 0x01,\n    'b': 0x02,\n    'c': 0x03,\n    'd': 0x04,\n    'e': 0x05,\n    'f': 0x06,\n    'g': 0x07,\n    'h': 0x08,\n    'i': 0x09,\n    'j': 0x0a,\n    'k': 0x0b,\n    'l': 0x0c,\n    'm': 0x0d,\n    'n': 0x0e,\n    'o': 0x0f,\n    'p': 0x10,\n    'q': 0x11,\n    'r': 0x12,\n    's': 0x13,\n    't': 0x14,\n    'u': 0x15,\n    'v': 0x16,\n    'w': 0x17,\n    'x': 0x18,\n    'y': 0x19,\n    'z': 0x1a,\n    'A': 0x1b,\n    'B': 0x1c,\n    'C': 0x1d,\n    'D': 0x1e,\n    'E': 0x1f,\n    'F': 0x20,\n    'G': 0x21,\n    'H': 0x22,\n    'I': 0x23,\n    'J': 0x24,\n    'K': 0x25,\n    'L': 0x26,\n    'M': 0x27,\n    'N': 0x28,\n    'O': 0x29,\n    'P': 0x2a,\n    'Q': 0x2b,\n    'R': 0x2c,\n    'S': 0x2d,\n    'T': 0x2e,\n    'U': 0x2f,\n    'V': 0x30,\n    'W': 0x31,\n    'X': 0x32,\n    'Y': 0x33,\n    'Z': 0x34,\n    'Ax': 0x35,\n    'Bx': 0x36,\n    'Cx': 0x37,\n    'Dx': 0x38,\n    'Ex': 0x39,\n    'Fx': 0x3a,\n    'Gx': 0x3b,\n    'Hx': 0x3c,\n    'Ix': 0x3d,\n    'Jx': 0x3e,\n    'Kx': 0x3f,\n    'Lx': 0x40,\n    'Mx': 0x41,\n    'Nx': 0x42,\n    'Ox': 0x43,\n    'Px': 0x44,\n    'Qx': 0x45,\n    'Rx': 0x46,\n    'Sx': 0x47,\n    'Tx': 0x48,\n    'Ux': 0x49,\n    'Vx': 0x4a,\n    'Wx': 0x4b,\n    'Xx': 0x4c,\n    'Yx': 0x4d,\n    'Zx': 0x4e,\n};\n/** Variable code to short dictionary.\n*\n* Maps variable codes to their short names.\n* E.g. 0x01 -> 'a', 0x1b -> 'A', 0x35 -> 'Ax'\n*/\nconst GVAR_CODE_TO_SHORT_DICT = {\n    1: 'a',\n    2: 'b',\n    3: 'c',\n    4: 'd',\n    5: 'e',\n    6: 'f',\n    7: 'g',\n    8: 'h',\n    9: 'i',\n    10: 'j',\n    11: 'k',\n    12: 'l',\n    13: 'm',\n    14: 'n',\n    15: 'o',\n    16: 'p',\n    17: 'q',\n    18: 'r',\n    19: 's',\n    20: 't',\n    21: 'u',\n    22: 'v',\n    23: 'w',\n    24: 'x',\n    25: 'y',\n    26: 'z',\n    27: 'A',\n    28: 'B',\n    29: 'C',\n    30: 'D',\n    31: 'E',\n    32: 'F',\n    33: 'G',\n    34: 'H',\n    35: 'I',\n    36: 'J',\n    37: 'K',\n    38: 'L',\n    39: 'M',\n    40: 'N',\n    41: 'O',\n    42: 'P',\n    43: 'Q',\n    44: 'R',\n    45: 'S',\n    46: 'T',\n    47: 'U',\n    48: 'V',\n    49: 'W',\n    50: 'X',\n    51: 'Y',\n    52: 'Z',\n    53: 'Ax',\n    54: 'Bx',\n    55: 'Cx',\n    56: 'Dx',\n    57: 'Ex',\n    58: 'Fx',\n    59: 'Gx',\n    60: 'Hx',\n    61: 'Ix',\n    62: 'Jx',\n    63: 'Kx',\n    64: 'Lx',\n    65: 'Mx',\n    66: 'Nx',\n    67: 'Ox',\n    68: 'Px',\n    69: 'Qx',\n    70: 'Rx',\n    71: 'Sx',\n    72: 'Tx',\n    73: 'Ux',\n    74: 'Vx',\n    75: 'Wx',\n    76: 'Xx',\n    77: 'Yx',\n    78: 'Zx',\n};\n\nexport { GVAR_CODE_TO_SHORT_DICT, GVAR_IDX_TABLE, GVAR_SHORT_TO_CODE_DICT };\n//# sourceMappingURL=varIndexes.js.map\n","import {\n    COMMANDS_BY_NAME,\n    GSCR_CODES,\n    GSPR_CODES,\n    FONT_CMD_TTC,\n    TOKENS_BY_CODE,\n    TOKENS_BY_NAME,\n    TOK_PROP,\n} from '@zoli8000/gb-consts'\n\nexport class GB {\n    static readonly CTT_COMMAND_TOKENS: Record<number, any> = TOKENS_BY_CODE\n    static readonly TTC_COMMAND_TOKENS: Record<string, any> = Object.fromEntries(\n        Object.entries(TOKENS_BY_NAME).map(([key, value]) => [key, value[0]]),\n    )\n\n    static readonly TTC_SCREEN_TOKENS: Record<string, number> = {\n        ...GSCR_CODES,\n        ...GSPR_CODES,\n        ...FONT_CMD_TTC,\n    }\n\n    static readonly TTC_STRING_TOKENS: Record<string, number> = GB.TTC_SCREEN_TOKENS\n\n    static readonly TTC_STRING_TOKENS_UPPER: Record<string, number> = Object.fromEntries(\n        Object.entries(GB.TTC_STRING_TOKENS).map(([key, value]) => [key.toUpperCase(), value]),\n    )\n\n    static readonly CTT_STRING_TOKENS: Record<string, string> = Object.fromEntries(\n        Object.entries(GB.TTC_STRING_TOKENS)\n            .filter(([key, _value]) => key.indexOf('spr_') !== 0)\n            .map(([key, value]) => [value, key]),\n    )\n\n    static readonly EXTRA_ZEROS: Record<string, number> = Object.fromEntries(\n        Object.entries(TOKENS_BY_NAME).map(([key, value]) => {\n            let bytes = 0\n            if (\n                value[1] & TOK_PROP.COMMAND &&\n                value[1] & (TOK_PROP.NEXT_ADDR | TOK_PROP.BRANCH_ADDR)\n            ) {\n                if (value[1] & TOK_PROP.NEXT_ADDR) {\n                    bytes++\n                }\n                if (value[1] & TOK_PROP.BRANCH_ADDR) {\n                    bytes++\n                }\n            }\n            return [key, bytes * 2]\n        }),\n    )\n\n    static readonly IS_COMMAND: Record<string, boolean> = Object.fromEntries(\n        Object.entries(TOKENS_BY_NAME).map(([key, value]) => {\n            return [key, value[1] & TOK_PROP.COMMAND ? true : false]\n        }),\n    )\n    static readonly CTT_SPRITE_TOKENS: Record<string, string> = Object.fromEntries(\n        Object.entries(GB.TTC_STRING_TOKENS)\n            .filter(([key, _value]) => key.indexOf('spr_') == 0)\n            .map(([key, value]) => [value, key]),\n    )\n\n    static blockEndToken = this.TTC_COMMAND_TOKENS._lf\n    static finalToken = this.TTC_COMMAND_TOKENS.end\n\n    static strDQuote = this.TTC_COMMAND_TOKENS.DQUOTE\n    static strSQuote = this.TTC_COMMAND_TOKENS.SQUOTE\n    static strBQuote = this.TTC_COMMAND_TOKENS.SQUOTE\n    static strQQuote = this.TTC_COMMAND_TOKENS.QQUOTE\n\n    static cmdParams = { ...COMMANDS_BY_NAME }\n\n    static gbFuncs = {\n        SETPOS(x: string, y: string): number[] {\n            const pos = parseInt(x, 10) + parseInt(y, 10) * 40\n            return [GB.TTC_SCREEN_TOKENS.set_addr0 + (pos >> 8), pos & 0xff]\n        },\n    }\n}\n","import { LanguageDecoder, DECODER_SCOPE } from '../language-decoder'\nimport { TokenArray } from '../token-array'\n\nimport { C64Chr } from './c64-chr'\nimport { GB } from './gb-consts'\n\nexport class GBDecoder implements LanguageDecoder {\n    static STR_CODES = {\n        print: GB.CTT_STRING_TOKENS,\n        sprite: GB.CTT_SPRITE_TOKENS,\n        font: GB.CTT_STRING_TOKENS, // TODO!!!!\n    }\n    static getTokensFromMemory(data: number[], start = 0x801): TokenArray {\n        const getWord = function (lo: number, hi: number): number {\n            return lo + hi * 0x100\n        }\n\n        const tokens: TokenArray = []\n\n        let idx = 0\n        let nextAddr = start\n        let lastCommand = ''\n\n        while (idx < data.length) {\n            if (nextAddr < idx + start || nextAddr < start || nextAddr > start + data.length) {\n                console.log(`Invalid address ${nextAddr}`)\n                break\n            }\n\n            idx = nextAddr - start\n\n            nextAddr = getWord(data[idx], data[idx + 1])\n            if (nextAddr == 0) break\n\n            const line = getWord(data[idx + 2], data[idx + 3])\n            tokens.push({ key: 'label', value: line.toString(10), pos: idx + start })\n\n            idx += 4\n\n            let scope: DECODER_SCOPE\n            scope = DECODER_SCOPE.scopeCommand\n\n            const item = { key: 'error', value: 'error', escapedMode: '', escapedValue: '' }\n            let byte: number = 0\n\n            function setCommandFunction(item: Record<string, string>) {\n                if (byte >= 128) {\n                    const text = GB.CTT_COMMAND_TOKENS[byte]\n\n                    if (!text) return\n\n                    item.key = byte > 162 ? 'func' : 'command'\n                    item.value = text\n                    lastCommand = text\n                }\n\n                if (byte >= 65 && byte <= 90) {\n                    item.key = 'identifier'\n                    item.value = item.escapedValue\n                }\n\n                if (byte == 32) {\n                    item.key = 'whiteSpc'\n                    item.value = item.escapedValue\n                }\n            }\n\n            while (idx + start < nextAddr) {\n                byte = data[idx]\n\n                if (byte == 0) {\n                    break\n                }\n\n                item.value = 'error'\n                item.key = 'error'\n                ;[item.escapedMode, item.escapedValue] = C64Chr.petsciiCodeToEscaped(byte)\n\n                switch (scope) {\n                    case DECODER_SCOPE.scopeCommand:\n                        setCommandFunction(item)\n\n                        scope = DECODER_SCOPE.scopeArgs\n                        if (item.value == 'rem') scope = DECODER_SCOPE.scopeRem\n                        break\n\n                    case DECODER_SCOPE.scopeRem:\n                        item.key = 'rem'\n                        item.value = item.escapedValue\n                        break\n\n                    case DECODER_SCOPE.scopeString:\n                        if (item.escapedValue == '\"') {\n                            scope = DECODER_SCOPE.scopeArgs\n                            item.key = 'other'\n                        } else {\n                            item.key = 'strDQuote'\n                        }\n\n                        if (item.escapedMode == 'code') {\n                            const CTT =\n                                GBDecoder.STR_CODES[\n                                    lastCommand as keyof typeof GBDecoder.STR_CODES\n                                ] || GBDecoder.STR_CODES.print\n                            item.value = CTT[byte] ? `{${CTT[byte]}}` : `{${item.escapedValue}}`\n                        } else {\n                            item.value = item.escapedValue\n                        }\n                        break\n                    case DECODER_SCOPE.scopeArgs:\n                        item.value = item.escapedValue\n                        item.key = 'other'\n\n                        setCommandFunction(item)\n\n                        if (item.value == '\"') {\n                            scope = DECODER_SCOPE.scopeString\n                        } else if (item.value == ':') {\n                            scope = DECODER_SCOPE.scopeCommand\n                        } else if ((item.value >= '0' && item.value <= '9') || item.value == '.') {\n                            item.key = 'floatNum'\n                        }\n                        break\n                }\n\n                tokens.push({ key: item.key, value: item.value, pos: idx + start })\n                idx++\n            }\n            tokens.push({ key: 'newLines', value: '\\n', pos: idx + start })\n        }\n\n        return tokens\n    }\n\n    static tokenArrayToRepr(tokens: TokenArray): string {\n        let text = ''\n        tokens.forEach((token) => {\n            text += token.value\n        })\n        return text\n    }\n}\n","export class StringTokenizer {\n    static getGroups(match: RegExpMatchArray): Record<string, string> {\n        const groups: Record<string, string> = {}\n\n        if (match === undefined || match?.groups === undefined) {\n            // console.log(\"Empty.\")\n            return {}\n        }\n\n        Object.keys(match.groups).forEach((key) => {\n            if (match.groups && match.groups[key] !== undefined && match.groups[key] !== '') {\n                const value = match.groups![key]\n                groups[key] = value\n            }\n        })\n        return groups\n    }\n\n    static verboseRegexp(regexpStr: string, flags: string): RegExp {\n        const rx = /(?<!\\\\)\\s|[/][/].*|[/][*][\\s\\S]*[*][/]/g\n        const result = regexpStr.replace(rx, '')\n\n        return new RegExp(result, flags)\n    }\n\n    static STRING_PARSER = StringTokenizer.verboseRegexp(\n        String.raw`\n         (\\s*?)(\n          (?<rem>(([-]{2}|[/]{2}).*$)|[/][*][\\s\\S]*?[*][/]) |\n\n          ( (?<str_extra_fn>\\w+\\s*)[(]\n            (?<str_extra_fnparam>[^)][^)]*?)\n            (?<str_extra_end>[)])\n          ) |\n\n          (\n            (?<code>[a-zA-Z_][a-zA-Z_0-9]*) |\n            (?<hexa>(?:[$]|0x)[0-9a-fA-F]+[w]{0,1}) |\n            (?<deci>[0-9]+[w]{0,1})\n\n          )?\n          (?:[*]?)\n          (?<multi>[0-9]+)?\n          (?<sep>[,;]\\s*|$|\\s+)?\n        )\n        `,\n        'gm',\n    )\n\n    /** Converts special text to bytes.\n     * Returns:\n     *  {byteArray, status, invalidCodes}\n     *   * byteArray: result.\n     *    * status: OK / ERROR\n     *    * invalidCodes: array containing errors\n     *\n     *   Props:\n     *    * tokens: <token name - code number> Records\n     *    * funcs:  <function name - function> Records\n     *    * worldLH: boolean, default=Lo.HI. LO.HI or HI.LO order\n     *    * useUppercase: use uppercase or not for codes - default: not. Use this with uppercase token dict to make case insensitive\n     *    * normalConverter: function to convert characters, default: String.charCodeAt\n     */\n    static convertSpecToBytes(str: string, props: any): Record<string, any> {\n        const tokens: Record<string, number> = props.tokens || {}\n        const funcs: Record<string, any> = props.funcs || {}\n        const wordLH: boolean = props.worldLH === undefined ? true : props.worldLH\n        const _useUppercase: boolean = props.useUppercase === undefined ? false : props.useUppercase\n\n        const byteArray: number[] = []\n\n        let match: RegExpExecArray | null\n\n        // Remove single and multiline remarks\n        // str = str.replace(/[/][/].*$|[/][*].*?[*][/]/gm, \"\")\n\n        function getWord(num: number, forceWord: boolean = false): Array<number> {\n            if (!forceWord && num < 0x100) return [num]\n\n            if (wordLH) return [num & 0xff, (num >> 8) & 0xff]\n\n            return [(num >> 8) & 0xff, num & 0xff]\n        }\n\n        StringTokenizer.STRING_PARSER.lastIndex = 0\n        let catcher = 10000\n\n        const invalidCodes: any[] = []\n\n        while ((match = StringTokenizer.STRING_PARSER.exec(str))) {\n            catcher--\n\n            if (catcher < 0) {\n                throw `Too many iterations!`\n            }\n            // console.log(match)\n\n            const gr = StringTokenizer.getGroups(match)\n            // console.log(gr)\n\n            const rxTotal = match[0]\n\n            if (rxTotal === '' || rxTotal == undefined) break\n\n            let val: Array<number> | number = []\n\n            if (gr.deci !== undefined) {\n                const rawStr = gr.deci.trim()\n                val = getWord(parseInt(rawStr, 10), rawStr.slice(-1).toLowerCase() == 'w')\n                // console.log(`${gr.deci} -> ${val}`)\n            } else if (gr.hexa !== undefined) {\n                const rawStr = gr.hexa.replace(/[$]|(0x)/, '')\n\n                val = getWord(parseInt(rawStr, 16), rawStr.slice(-1).toLowerCase() == 'w')\n                // console.log(`${gr.hexa} -> ${val}`)\n            } else if (gr.str_extra_fn !== undefined) {\n                if (funcs[gr.str_extra_fn] === undefined) {\n                    const lowercaseFuncs = Object.keys(funcs).map((x) => x.toLowerCase())\n                    const lowercaseCalled = gr.str_extra_fn.toLowerCase()\n                    if (lowercaseFuncs.includes(lowercaseCalled)) {\n                        const correctFunction =\n                            Object.keys(funcs)[lowercaseFuncs.indexOf(lowercaseCalled)]\n                        val = funcs[correctFunction](...gr.str_extra_fnparam.split(/,\\s*/g))\n\n                        // throw new Error(`Function not implemented: ${gr.str_extra_fn}.\\nDid you mean to call ${correctFunction} instead?`)\n                    } else {\n                        throw new Error(`Function not implemented: ${gr.str_extra_fn}`)\n                    }\n                } else {\n                    val = funcs[gr.str_extra_fn](...gr.str_extra_fnparam.split(/,\\s*/g))\n                }\n            } else if (gr.code !== undefined) {\n                if (tokens[gr.code] !== undefined) {\n                    val = tokens[gr.code]\n                } else {\n                    val = tokens['undefined']\n                    const lowercaseCode = gr.code.toLowerCase()\n                    const lowercaseCodes = Object.keys(tokens).map((x) => x.toLowerCase())\n                    const index = lowercaseCodes.indexOf(lowercaseCode)\n\n                    if (index >= 0) {\n                        val = Object.values(tokens)[index]\n                    }\n                }\n\n                if (val === undefined) {\n                    invalidCodes.push({ code: gr.code, pos: (props.pos || 0) + match.index })\n                    val = [63]\n                    // throw new Error(`Undefined code: ${gr.code}!`)\n                }\n            } else if (gr.sep && gr.sep.trim() == ',') {\n                // console.log(`Sep: ${gr.sep}`)\n                val = [0]\n            }\n            let multi = 1\n\n            if (gr.multi) {\n                multi = parseInt(gr.multi, 10)\n                // console.log(`Multi: ${gr.multi} -> ${multi}`)\n            }\n\n            if (typeof val === 'number') val = [val]\n\n            for (let idx = 0; idx < multi; idx++) {\n                byteArray.push(...val)\n            }\n\n            // console.log(`Adding [${val}] ${multi} times, collected: ${byteArray}`)\n        }\n\n        const status = invalidCodes.length > 0 ? 'ERROR' : 'OK'\n        return { byteArray, status, invalidCodes }\n    }\n\n    /** Converts text to bytes - special text must be {} bracketed.\n     *   Returns:\n     *      { result, statusFinal, statusDetails }\n     *   Props:\n     *    * tokens: <token name - code number> pairs\n     *    * funcs:  <function name - function> pairs\n     *    * worldLH: LO.HI or HI.LO order\n     *    * useUppercase: use uppercase or not for codes - default: not. Use this with uppercase token dict to make case insensitive\n     *    * normalConverter: function to convert characters, default: String.charCodeAt\n     */\n    static convertStringToBytes(text: string, props: any): Record<string, any> {\n        const result: number[] = []\n        const statusDetails: any[] = []\n\n        let match, value\n        let statusFinal: string = 'OK'\n\n        const convertNormal =\n            props.normalConverter || ((str: string) => String.prototype.charCodeAt.bind(str)(0))\n\n        const re = /({[^}]+})|(.)/g\n\n        while ((match = re.exec(text))) {\n            const [_full, bracket, normal] = match\n\n            if (bracket) {\n                props.pos = match.index\n                const { byteArray, status, invalidCodes } = StringTokenizer.convertSpecToBytes(\n                    bracket.slice(1, -1),\n                    props,\n                )\n\n                if (status !== 'OK') {\n                    statusFinal = status\n                    statusDetails.push(...invalidCodes)\n                }\n                result.push(...byteArray)\n            } else {\n                value = convertNormal(normal)\n                result.push(value)\n            }\n        }\n        return { byteArray: result, status: statusFinal, invalidCodes: statusDetails }\n    }\n}\n","/** Token array class */\nexport class TokenArray extends Array {}\n","import { Token } from './token'\nimport { TokenArray } from './token-array'\nimport { TokenizerSettings } from './tokenizer-settings'\n\n/** Tokenizer definitions.\n * Records: key: [orderId, regexp pattern]\n */\nexport type TokenizerDefinition = Record<string, [number, string]>\n\n/** A string, Regexp or a function returning the final string */\nexport type TokenizerFunction = string | RegExp | ((key: string, value: string) => [string, string])\n\nexport enum TokenBuilderItem {\n    remark = 'remark',\n    docstr = 'docstr',\n    remMulti = 'remMulti',\n    strDQuote = 'strDQuote',\n    strSQuote = 'strSQuote',\n    strBQuote = 'strBQuote',\n    whiteSpc = 'whiteSpc',\n    numHex = 'hexNum',\n    numFloat = 'floatNum',\n    numInt = 'intNum',\n\n    identifier = 'identifier',\n\n    other = 'other',\n}\n\nconst rxTokenConsts: TokenizerDefinition = {\n    // Remarks\n    remark: [1100, String.raw`(?<remark>\\/\\/.*$)`],\n    remDash: [1150, String.raw`(?<remark>[\\-]{2}.*$)`],\n    docstr: [1200, String.raw`(?<docstr>\\/[*]{2}[\\S\\s]*?[*]\\/)`],\n    remMulti: [1300, String.raw`(?<rem_multi>\\/[*][\\S\\s]*?[*]\\/)`],\n\n    // Strings\n    strDQuote: [2100, String.raw`(?<other__strDO>\\\")(?<strDQuote>[^\\\"]*?)(?<other__strDC>\\\")`],\n    strSQuote: [2200, String.raw`(?<other__strSO>\\')(?<strSQuote>[^\\']*?)(?<other__strSC>\\')`],\n    strBQuote: [2300, String.raw`(?<other__strBO>\\`)(?<strBQuote>[^\\`]*?)(?<other__strBC>\\`)`],\n\n    // Whitespace\n    whiteSpc: [3100, String.raw`(?<whiteSpc>\\s+)`],\n\n    // Numbers:\n    hexNum: [4100, String.raw`(?<hexNum>(0x[0-9a-f]+))`],\n    floatNum: [4200, String.raw`(?<floatNum>(\\d*[.]\\d*))`],\n    intNum: [4300, String.raw`(?<intNum>(\\d+))`],\n\n    // Identifier:\n    identifier: [8100, String.raw`(?<identifier>[\\w.]+)`],\n}\n\n/** Tokenizer class\n *\n */\nexport class Tokenizer {\n    /** Settings */\n    settings: TokenizerSettings\n\n    /** Regexp used for tokenizing. */\n    rxPattern: RegExp\n\n    /** Subregexps for formatting only. */\n    subFormatPatterns: Record<string, TokenizerFunction>\n\n    /** Raw input text */\n    rawText: string\n\n    /* Token class */\n    TokenClass: typeof Token\n\n    /**  Output: tokens */\n    tokens: TokenArray\n\n    /** Helper table for determining line and position from character number */\n    linePosTable: { start: number; end: number }[]\n\n    /** Helper string for checking possible character leakage */\n    tokenizedRaw: string\n\n    /** Creates a new Tokenizer.\n     * @param settings     A TokenizerSettings instance with settings for the tokenizer.\n     */\n    constructor(settings: TokenizerSettings) {\n        if (!settings.TokenClass || !settings.splitFunc || !settings.rxPattern) {\n            throw Error('Invalid TokenizerSettings object. Use class to create one!')\n        }\n\n        this.settings = settings\n        this.TokenClass = this.settings.TokenClass\n        this.rxPattern = new RegExp(this.settings.rxPattern, 'gm')\n\n        if (Object.keys(settings.subFormatPatterns).length > 0) {\n            this.subFormatPatterns = Object.fromEntries(\n                Object.entries(settings.subFormatPatterns).map(([key, value]) => [\n                    key,\n                    Tokenizer.convertTokenizerFunction(value),\n                ]),\n            )\n        } else {\n            this.subFormatPatterns = {}\n        }\n\n        this.rawText = ''\n        this.tokens = new TokenArray()\n        this.linePosTable = []\n        this.tokenizedRaw = ''\n    }\n\n    reset() {\n        this.tokens = []\n        this.linePosTable = []\n    }\n\n    static convertTokenizerFunction(tokenizerFunction: TokenizerFunction): TokenizerFunction {\n        if (typeof tokenizerFunction == 'string') {\n            return Tokenizer.verboseRegexp(tokenizerFunction, 'gm')\n        }\n\n        return tokenizerFunction\n    }\n\n    static verboseRegexp(regexpStr: string, flags: string): RegExp {\n        const rx = /(?<!\\\\)\\s|[/][/].*|[/][*][\\s\\S]*[*][/]/g\n        const result = regexpStr.replace(rx, '')\n\n        return new RegExp(result, flags)\n    }\n\n    /** Builds a regexp from building blocks\n     *\n     * @param items: regexp group names, can be TokenBuilderItem values and keys from extraDict\n     * @param extraDict additional regexp items\n     * @param guard: string for adding guards for uncaptured text. Default value captures each single character. Use '' to disable and use _guard blocks instead during tokenization.\n     * @returns regexp string\n     */\n    static buildRxString(\n        items: string[],\n        extraDict: TokenizerDefinition | null = null,\n        guard: string = '(?<other>.)',\n    ) {\n        const rxItems: [number, string][] = []\n\n        items.forEach((item) => {\n            let value = extraDict?.[item]\n\n            if (!value) value = rxTokenConsts[item]\n\n            if (!value) {\n                throw Error(`Invalid item: ${item}`)\n            }\n            rxItems.push(value)\n        })\n\n        const orderedList = rxItems.sort((a, b) => a[0] - b[0]).map((a) => a[1])\n        if (guard) orderedList.push(guard)\n\n        const rxRawString = orderedList.join(' | ')\n        return Tokenizer.verboseRegexp(rxRawString, 'gm')\n    }\n    static noSplitter(\n        token: Token,\n        _settings: TokenizerSettings,\n        _TokenClass: typeof Token,\n    ): Token[] {\n        return [token]\n    }\n\n    static lineSplitter(\n        token: Token,\n        settings: TokenizerSettings,\n        TokenClass: typeof Token,\n    ): Token[] {\n        const tokenValues = token.value.split(/\\r\\n|\\r|\\n/gm)\n\n        if (tokenValues.length == 1) return [token]\n        const tokens: Token[] = []\n\n        tokenValues.forEach((tokenValue: string, index: number) => {\n            if (index) {\n                const newLine = Tokenizer.createToken(\n                    'addNewLine',\n                    '',\n                    token.pos,\n                    settings,\n                    TokenClass,\n                )\n                tokens.push(newLine)\n            }\n\n            const ofs = 0\n            const position = token.pos + ofs\n            const newToken = Tokenizer.createToken(\n                token.key,\n                tokenValue,\n                position,\n                settings,\n                TokenClass,\n            )\n            tokens.push(newToken)\n        })\n        return tokens\n    }\n\n    getRxString(): string {\n        return this.rxPattern.toString()\n    }\n\n    /** Add a token to the tokenized list */\n    addToken(key: string, value: string, position: any) {\n        const t = Tokenizer.createToken(key, value, position, this.settings, this.TokenClass)\n        this.tokens.push(t)\n    }\n\n    static createToken(\n        key: string,\n        value: string,\n        position: any,\n        settings: TokenizerSettings,\n        TokenClass: typeof Token,\n    ): Token {\n        const category = settings.mapper[key] || key\n        const spanClass = settings.htmlClassPrefix + category\n\n        const repr = value\n        const reprPretty = settings.PrettifierClass.prettifyToken(key, category, repr)\n\n        const t = new TokenClass(\n            key,\n            value,\n            position,\n            repr,\n            reprPretty,\n            category,\n            spanClass,\n            settings.tokenTypeMapper,\n        )\n\n        return t\n    }\n\n    /** Position of the last token */\n    get currentPos() {\n        const pos = this.tokens[this.tokens.length - 1].pos\n        return this.posToString(pos)\n    }\n\n    /** Tokenize the raw string */\n    tokenizeString(rawText: string) {\n        this.rawText = rawText\n        this.reset()\n        this.tokenizedRaw = ''\n\n        this.collectLineInfo()\n        let result: RegExpMatchArray\n\n        this.rxPattern.lastIndex = 0\n        let lastPos = -1\n        let lastLen = 1\n\n        while ((result = this.rxPattern.exec(this.rawText) as RegExpMatchArray)) {\n            let key, value\n            if (!result.groups) {\n                throw Error('Use named capturing blocks!')\n            }\n\n            const resultList = Object.entries(result.groups).filter(([_k, v]) => v != undefined)\n\n            const capturedLength = Object.values(resultList).reduce((t, c) => t + c[1].length, 0)\n\n            if (capturedLength !== result[0].length) {\n                throw Error(`Use named capturing blocks - not captured completely: ${result[0]}`)\n            }\n\n            if (result.index == lastPos) {\n                throw Error(\n                    'Invalid regexp - do not use elements which can return empty values, e.g. (?<value>.*) !',\n                )\n            }\n\n            if (result.index != lastPos + lastLen) {\n                const missingValue = rawText.slice(lastPos + lastLen, result.index)\n\n                if (lastPos == -1) lastPos = 0\n\n                this.addToken('_guard', missingValue, lastPos)\n                this.tokenizedRaw += missingValue\n            }\n\n            resultList.forEach((resultItem) => {\n                ;[key, value] = resultItem as [string, string]\n\n                key = key.replace(/__.*$/, '')\n\n                if (!this.settings.skipEmpty || value) {\n                    this.addToken(key, value, result.index)\n                    this.tokenizedRaw += value\n                }\n            })\n\n            lastPos = result.index || 0\n            lastLen = result[0].length || 0\n        }\n\n        if (lastPos + lastLen < rawText.length) {\n            const missingValue = rawText.slice(lastPos + lastLen)\n            this.addToken('_guard', missingValue, lastPos)\n            this.tokenizedRaw += missingValue\n        }\n\n        if (this.tokenizedRaw.length != rawText.length) {\n            throw Error('Invalid regexp - characters are missing!')\n        }\n    }\n\n    /** Creates the linePosTable list for determining positions. */\n    collectLineInfo() {\n        this.linePosTable = []\n        const lines = this.rawText.split('\\n')\n\n        let lineStart = 0\n        let lineEnd = 0\n\n        lines.forEach((line: string) => {\n            lineEnd = lineStart + line.length\n            const lineData = { start: lineStart, end: lineEnd }\n            this.linePosTable.push(lineData)\n\n            lineStart = lineEnd + 1\n        })\n    }\n\n    /** Returns a line and column number from the position. */\n    getLineInfo(pos: number): [number, number] {\n        let lineEndPos = -1\n        let line = -1\n\n        while (pos > lineEndPos) {\n            line++\n            lineEndPos = this.linePosTable[line].end\n        }\n\n        return [line, this.linePosTable[line--].start]\n    }\n\n    /** String representation of a position.\n     * @param pos       Position\n     * @param formatStr Template string. Possible values: %ln: line, %col: column, %pos: position.\n     * @param ofs       Starting index for columns and lines. (Default: +1. Use 0 for 0-based line and column numbers.)\n     *\n     */\n    posToString(pos: number, formatStr: string = 'ln %ln col %col', ofs = 1): string {\n        const [line, lineStartPos] = this.getLineInfo(pos)\n        const char = pos - lineStartPos\n        const posString = formatStr\n            .replace('%ln', (line + ofs).toString())\n            .replace('%pos', pos.toString())\n            .replace('%col', (char + ofs).toString())\n        return posString\n    }\n\n    /*\n    toString() {\n        const str = this.tokens.map((t: Token) =>\n            `<${t.key} p='${t.pos}' c='${t.category}'>${t.value}</${t.key}>\\n`\n        ).join('')\n\n        return str\n    }\n\n    toFormattedHtml() {\n        const str = this.tokens.map((t: Token) =>\n            `<span class='${t.spanClass}'>${t.value}</span>\\n`\n        ).join('')\n\n        return str\n\n    }\n    */\n\n    static getNewLines(t: Token): number {\n        if (t.key !== 'whiteSpc') return 0\n\n        return t.value.match(/\\r\\n|\\n|\\r/g)?.length || 0\n    }\n\n    getFormattedFromTokens(_field: 'value' | 'repr' | 'reprPretty' = 'reprPretty') {\n        const tokenData: TokenArray = this.tokens\n        const allFormattedHTML: string[] = ['']\n        const allTexts: string[] = ['']\n\n        const allValues: string[] = ['']\n        const allRepr: string[] = ['']\n        const allReprPretty: string[] = ['']\n\n        tokenData.forEach((t: Token, i: number, a: any[]) => {\n            const [token, newLines]: [Token | null, number] =\n                this.settings.PrettifierClass.getNewLineCountFunction(t, a, i)\n\n            if (newLines) addNewLines(newLines)\n            else if (token) {\n                const splittedTokens = this.settings.splitFunc(\n                    token,\n                    this.settings,\n                    this.TokenClass,\n                )\n\n                splittedTokens.forEach((splittedToken: Token, _index: number) => {\n                    if (splittedToken.key == 'addNewLine') {\n                        addNewLines(1)\n                    } else {\n                        if (splittedToken.value != '' || !this.settings.skipEmpty)\n                            addToken(splittedToken, this)\n                    }\n                })\n            }\n\n            function addNewLines(count: number) {\n                for (let i = 0; i < count; i++) {\n                    allFormattedHTML.push('')\n                    allTexts.push('')\n                    allValues.push('')\n                    allRepr.push('')\n                    allReprPretty.push('')\n                }\n            }\n\n            function getHtmlFormat(\n                arr: any[],\n                key: string,\n                value: string,\n                rxs: Record<string, TokenizerFunction>,\n                settings: TokenizerSettings,\n            ) {\n                if (key in rxs) {\n                    const rx = rxs[key]\n\n                    if (typeof rx == 'function') {\n                        const [newKey, newValue] = rx(key, value)\n\n                        getHtmlFormat(arr, newKey, newValue, rxs, settings)\n                        return arr\n                    }\n\n                    if (!(rx instanceof RegExp)) {\n                        throw Error('Not a regexp value!')\n                    }\n                    let match: RegExpMatchArray | null\n\n                    rx.lastIndex = 0\n                    let textUsedLength = 0\n\n                    let _textUsed = ''\n                    let lastValue = 0\n\n                    function addError(sliceFrom: number, sliceTo: number) {\n                        const miss = value.slice(sliceFrom, sliceTo)\n                        textUsedLength += miss.length\n                        _textUsed += miss\n                        getHtmlFormat(arr, 'error', miss, rxs, settings)\n                    }\n\n                    while ((match = rx.exec(value))) {\n                        if (\n                            !match ||\n                            !match.groups ||\n                            !match[0].length ||\n                            match.index == undefined\n                        ) {\n                            throw Error('Update regexp - empty result!')\n                        }\n\n                        Object.entries(match.groups!).forEach(([subKey, subValue]) => {\n                            if (!subValue) return\n\n                            textUsedLength += subValue.length\n                            _textUsed += subValue\n                            getHtmlFormat(arr, subKey, subValue, rxs, settings)\n                        })\n\n                        if (match.index != lastValue) addError(lastValue, match.index)\n\n                        lastValue = match.index + match[0].length\n                    }\n\n                    if (lastValue != value.length) addError(lastValue, value.length)\n\n                    if (textUsedLength != value.length) {\n                        throw Error('Update regexp - characters are missing!')\n                    }\n\n                    return arr\n                } else {\n                    const category =\n                        settings.mapper[key.replace(/__.*$/, '')] || key.replace(/__.*$/, '')\n                    const spanClass = settings.htmlClassPrefix + category\n\n                    const htmlString = value.replace(/ /g, String.fromCharCode(160))\n                    const splitted = htmlString.split('\\n')\n\n                    splitted.forEach((splitHtmlText, index) => {\n                        if (index > 0) {\n                            addNewLines(1)\n                        }\n                        if (splitHtmlText.length > 0) {\n                            const element = `<span class='${spanClass}'>${splitHtmlText}</span>`\n                            allFormattedHTML[allFormattedHTML.length - 1] += element\n                            allTexts[allTexts.length - 1] += splitHtmlText //t[field]\n                            allValues[allValues.length - 1] += splitHtmlText //t.value\n                            allRepr[allRepr.length - 1] += splitHtmlText //t.repr\n                            allReprPretty[allReprPretty.length - 1] += splitHtmlText //t.reprPretty\n                        }\n                    })\n\n                    return arr\n                }\n            }\n\n            function addToken(t: Token, self: Tokenizer) {\n                if (token != null) {\n                    const newArr = [[]]\n                    getHtmlFormat(newArr, t.key, t.value, self.subFormatPatterns, self.settings)\n                }\n            }\n        })\n\n        return { allFormattedHTML, allTexts, allRepr, allReprPretty, allValues }\n    }\n}\n\n/*\nfunction tester() {\n    const text = fs.readFileSync(String.raw`C:\\Users\\zolta\\Documents\\GitHub\\golfbasic\\webapp\\golfb\\golfb-screen.ts`).toString()\n    const processedText = new Preprocessor(text).getProcessed()\n\n    fs.writeFileSync(String.raw`C:\\Users\\zolta\\OneDrive\\Dokumentumok\\GitHub\\ts-to-gasm\\dst\\preprocessed\\golfb-screen.ts`, processedText )\n    const t = new Tokenizer(processedText)\n    t.tokenize()\n\n    console.log(t.tokens)\n}\n\n*/\n","/**\n * 0-9: digits (if digits is allowed)\n * 10..255, -128..-1: byte\n * -32767..65535: word\n * -128.0..256.0  f0.8\n *\n * 3w -> force word\n * 3b -> force byte\n * 3. -> 3.0 as f8.8\n * 3.1f -> as f24.16\n *\n */\n\nimport { C64Chr } from './c64-chr'\nimport { GB } from './gb-consts'\n\nexport const enum NumberType {\n    digit,\n    byte,\n    word,\n    fixed08,\n    fixed88,\n}\n\nexport type TypeCodeMapping = Record<NumberType, number[]>\n\nexport const GBTypeCodes: TypeCodeMapping = {\n    [NumberType.digit]: [],\n    [NumberType.byte]: [GB.TTC_COMMAND_TOKENS['BYTE']],\n    [NumberType.word]: [GB.TTC_COMMAND_TOKENS['WORD']],\n    [NumberType.fixed08]: [GB.TTC_COMMAND_TOKENS['F08']],\n    [NumberType.fixed88]: [GB.TTC_COMMAND_TOKENS['F88']],\n}\n\nexport type NumberTokenizerFunction = (text: string) => number[]\n\nexport type NumberEncoderSettings = {\n    allowDigits: boolean\n    allowTokens: boolean\n    integerEncoders: NumberTokenizerFunction[]\n}\n\nexport class NumberTokenizer {\n    constructor(\n        public typeCodes: TypeCodeMapping,\n        public settings: NumberEncoderSettings,\n    ) {}\n\n    /** Convert to digit */\n    digitToArray(text: string): number[] {\n        const byteValue = parseInt(text)\n\n        if (byteValue < 0 || byteValue > 9) {\n            throw TypeError(`Invalid digit for byte parsing: ${text}`)\n        }\n\n        return [C64Chr.textToScreen(text)]\n    }\n\n    /** Convert byte */\n    byteToArray(text: string): number[] {\n        const byteValue = parseInt(text)\n\n        if (byteValue < -128 || byteValue > 255) {\n            throw TypeError(`Invalid value for byte parsing: ${text}`)\n        }\n\n        return [...this.typeCodes[NumberType.byte], (byteValue + 0x100) & 0xff]\n    }\n\n    /** Convert byte */\n    wordToArray(text: string): number[] {\n        const numberValue = parseInt(text)\n\n        if (numberValue < -32768 || numberValue > 65535) {\n            throw TypeError(`Invalid value for word parsing: ${text}`)\n        }\n\n        const wordValue = (numberValue + 0x10000) & 0xffff\n\n        return [...this.typeCodes[NumberType.word], wordValue & 0xff, wordValue >> 8]\n    }\n\n    integerToArray(text: string): number[] {\n        const _intValue = parseInt(text)\n\n        const bytes = this.settings.integerEncoders\n            .map((encoderFn) => {\n                try {\n                    return encoderFn.bind(this)(text)\n                } catch {\n                    return []\n                }\n            })\n            .filter((value) => value.length > 0)[0]\n\n        return bytes\n    }\n}\n\nexport const defaultNumberEncoder: NumberEncoderSettings = {\n    allowDigits: true,\n    allowTokens: true,\n    integerEncoders: [\n        NumberTokenizer.prototype.digitToArray,\n        NumberTokenizer.prototype.byteToArray,\n        NumberTokenizer.prototype.wordToArray,\n    ],\n}\n","import {\n    TOKENS_BY_NAME,\n    DATA_TYPES,\n    DATA_TYPES_BY_SHORT_CODE,\n    DataTypeDetails,\n    scrTokensTTC,\n    GVAR_SHORT_TO_CODE_DICT,\n} from '@zoli8000/gb-consts'\n\nimport { StringTokenizer } from '../string-tokenizer'\nimport { Token } from '../token'\nimport { Tokenizer } from '../tokenizer'\n\nimport { DEFAULT_STRING_TOKENIZER_PROPS } from './gb-encoder'\nimport { NumberTokenizer, defaultNumberEncoder, GBTypeCodes } from './gb-number-encoder'\n\nexport type SizeDetails = {\n    dataLength: number\n    memBytes: number\n}\n\nexport type DataTypeDetailsWithSize = DataTypeDetails & SizeDetails\n\nexport const DEFAULT_STRING_LENGTH = 254\n\n/** Custom error for invalid variable names */\nexport class InvalidVariableNameError extends Error {\n    constructor(varName: string, errorSubtype: string) {\n        const errorMessage = `Invalid variable name: ${varName}. ${errorSubtype}`\n\n        super(errorMessage)\n        this.name = 'InvalidVariableNameError'\n\n        Object.setPrototypeOf(this, new.target.prototype)\n    }\n}\n\nfunction getSVarList(vars: string[]): string {\n    const sorted = vars.sort((a, b) => GVAR_SHORT_TO_CODE_DICT[a] - GVAR_SHORT_TO_CODE_DICT[b])\n\n    // Step 2: Group consecutive items using reduce\n    const groups = sorted.reduce<string[][]>((acc, curr) => {\n        if (acc.length === 0) return [[curr]]\n\n        const lastGroup = acc[acc.length - 1]\n        const prev = lastGroup[lastGroup.length - 1]\n\n        if (GVAR_SHORT_TO_CODE_DICT[curr] === GVAR_SHORT_TO_CODE_DICT[prev] + 1) {\n            lastGroup.push(curr)\n        } else {\n            acc.push([curr])\n        }\n\n        return acc\n    }, [])\n\n    return groups\n        .map((group) =>\n            group.length > 2 ? `${group[0]}-${group[group.length - 1]}` : group.join(''),\n        )\n        .join('')\n}\n\nexport class DimTokenizer {\n    numberTokenizer: NumberTokenizer\n    variableMapping: Record<string, any>\n\n    constructor() {\n        this.numberTokenizer = new NumberTokenizer(GBTypeCodes, defaultNumberEncoder)\n        this.variableMapping = {}\n    }\n\n    getDimText(tokens: Token[]): string {\n        let dimText = ''\n        tokens.forEach((token) => {\n            if (token.category === 'dimDetailsLong') {\n                dimText += token.value + '\\n'\n            }\n        })\n        return dimText\n    }\n\n    getType(typeStr: string): DataTypeDetailsWithSize | null {\n        const sizeDetails: SizeDetails = { dataLength: 1, memBytes: 1 }\n\n        const rxSizeSplit = /^(?<baseType>\\$|FIXSTR|.*)[.]?(?<dataLength>\\d+)?$/\n        const match = typeStr.match(rxSizeSplit)\n        let dataLength = 1\n\n        if (!match?.groups) {\n            throw new Error(`Invalid type string format: ${typeStr}`)\n        }\n\n        if (match.groups.baseType === '$' || match.groups.baseType === 'FIXSTR') {\n            if (match?.groups.dataLength) {\n                dataLength = Number(match.groups.dataLength)\n            } else {\n                dataLength = DEFAULT_STRING_LENGTH\n            }\n\n            sizeDetails.dataLength = dataLength\n            sizeDetails.memBytes = dataLength + 2\n        }\n\n        const baseType = match.groups.baseType\n\n        if (baseType in DATA_TYPES_BY_SHORT_CODE) {\n            return { ...DATA_TYPES_BY_SHORT_CODE[baseType], ...sizeDetails }\n        }\n\n        if (baseType.toUpperCase() in DATA_TYPES) {\n            return { ...DATA_TYPES[baseType.toUpperCase()], ...sizeDetails }\n        }\n\n        throw new Error(`Invalid type string format: ${typeStr}`)\n    }\n\n    rxTypesLong = Object.keys(DATA_TYPES).join('|')\n    rxTypesShort = Object.keys(DATA_TYPES_BY_SHORT_CODE).join('').replace(/0/, '') // bWwfSL%cd$BFsl\n\n    parseDimShort(_dimText: string) {\n        throw Error('Not implemented dim short parse!')\n    }\n\n    /** Parse dim string, create variable mapping */\n    parseDimLong(dimText: string, isShortVarKept: boolean) {\n        const rx = Tokenizer.verboseRegexp(\n            String.raw`\n            (?<wspc3>^\\s*)(?<type>\n                ${this.rxTypesLong} |\n                ([$]\\d+) |\n                [${this.rxTypesShort}]\n            )\n            (?<arr_sign>(<[=-]{1,2}))?\n            (?<arr_size>\\d*)\n            (?=$|\\s+) |\n            (\n                (?<var_name>\n                    [a-zA-Z][a-zA-Z_×]*\n                )\n                (?<wspc1>\\s*[,;]?\\s*)\n                (\n                    (?<comment>[-|\\/]{2}.*?$) |\n                    (?<break>,|$)\n                )\n            ) |\n            (?<wspc2>[\\t\\x20]+\\n?|\\n) |\n\n            (?<error_word>\\w+) |\n            (?<error>.)`,\n            'gmi',\n        )\n\n        // TODO: move this to utility function\n        rx.lastIndex = 0\n        let match: RegExpExecArray | null\n        let textUsedLength = 0\n        let lastValue = 0\n\n        const errors: any[] = []\n        const vars: Record<string, any> = {}\n\n        let currentType = null as DataTypeDetailsWithSize | null\n        let currentArrLength = 0 as number | null\n        let currentVarName = null as string | null\n        let idx = 0\n\n        while ((match = rx.exec(dimText))) {\n            if (!match || !match.groups || !match[0].length || match.index == undefined) {\n                throw Error('Update regexp - empty result!')\n            }\n\n            Object.entries(match.groups!).forEach(([subKey, subValue]) => {\n                if (!subValue) return\n\n                textUsedLength += subValue.length\n\n                if (subKey === 'type') {\n                    currentType = this.getType(subValue)\n                    currentArrLength = 0\n                }\n\n                if (subKey === 'arr_size') {\n                    currentArrLength = parseInt(subValue, 10)\n                }\n                if (subKey === 'var_name') {\n                    // Allow single-char or char+× if short vars, else require at least 2 chars, no × allowed\n                    this.assertVarNameValid(subValue, isShortVarKept, true)\n\n                    currentVarName = subValue\n                    const currentVarNameNormalized = currentVarName.replace(/×/g, 'x')\n\n                    const idxScore = GVAR_SHORT_TO_CODE_DICT[currentVarNameNormalized] || idx + 100\n                    vars[currentVarName] = {\n                        type: currentType,\n                        arr_size: currentArrLength,\n                        comment: '',\n                        idx: idx,\n                        idxScore,\n                    }\n                    idx++\n                }\n\n                if (subKey === 'comment') {\n                    if (currentVarName) {\n                        vars[currentVarName].comment = subValue.replace(/^--\\s*/g, '') || ''\n                    }\n                }\n\n                if (subKey === 'error') {\n                    errors.push([lastValue, match?.index, subValue])\n                }\n\n                if (subKey === 'error_word') {\n                    errors.push([lastValue, match?.index, `Invalid word: ${subValue}`])\n                }\n                // console.log(`Found: ${subKey} = ${subValue} at index ${match?.index}`)\n            })\n\n            if (match.index != lastValue) {\n                errors.push([lastValue, match.index, match[0]])\n            }\n\n            lastValue = match.index + match[0].length\n\n            if (textUsedLength != lastValue) {\n                errors.push([lastValue, match?.index, dimText.substring(lastValue, match?.index)])\n            }\n        }\n\n        if (lastValue != dimText.length) {\n            errors.push([lastValue, 0])\n        }\n\n        if (textUsedLength != dimText.length) {\n            throw Error('Update regexp - characters are missing!')\n        }\n\n        this.variableMapping = vars\n        return { vars, errors }\n    }\n\n    /** Get variable mapping */\n    getVariableMapping(): Record<string, any> {\n        return this.variableMapping\n    }\n\n    private assertVarNameValid(varName: string, isShortVarKept: boolean, isVerbose: boolean): void {\n        const isShortVar = /^[a-zA-Z]×?$/.test(varName)\n        const isLongVar = /^[a-zA-Z][a-zA-Z_]{1,}$/.test(varName)\n\n        if (!isVerbose && !isShortVar) {\n            throw new InvalidVariableNameError(\n                varName,\n                'Only a single letter or a letter with × is allowed.',\n            )\n        } else if (varName in TOKENS_BY_NAME) {\n            throw new InvalidVariableNameError(varName, 'Variable name cannot be a keyword.')\n        } else if (isVerbose && !isShortVarKept && isShortVar) {\n            throw new InvalidVariableNameError(\n                varName,\n                'No single letter variable names are allowed. Use #directshort directive to allow them.',\n            )\n        } else if (\n            (isVerbose && isLongVar) ||\n            (isVerbose && isShortVarKept && isShortVar) ||\n            (!isVerbose && isShortVar)\n        ) {\n            return\n        }\n\n        throw new InvalidVariableNameError(\n            varName,\n            'Invalid variable name, ony a-z,A-Z, A×-Z×, _ are allowed.',\n        )\n    }\n    /**\n     * Assigns/translates variable names and returns a mapping:\n     * { transformedVarName: { ...varData, transformedVarName } }\n     */\n    assignVariableNames(dimData: Record<string, any>): Record<string, any> {\n        const sortedDimData = Object.entries(dimData).sort((a, b) => a[1].idxScore - b[1].idxScore)\n        const possibleVars = [...Object.keys(GVAR_SHORT_TO_CODE_DICT)]\n        const mappedVars: Record<string, any> = {}\n\n        sortedDimData.forEach(([varName, varDetails]) => {\n            const isShortVar = varDetails.idxScore < 100\n            let transformedVarName = varName\n\n            if (isShortVar) {\n                const shortVarIndex = possibleVars.indexOf(varName)\n                if (shortVarIndex !== -1) {\n                    possibleVars.splice(shortVarIndex, 1)\n                } else {\n                    throw new InvalidVariableNameError(\n                        varName,\n                        'Short variable name not found in possible variables.',\n                    )\n                }\n            } else {\n                transformedVarName = possibleVars.shift() || ''\n                if (!transformedVarName) {\n                    throw new InvalidVariableNameError(\n                        varName,\n                        'No more short variable names available.',\n                    )\n                }\n            }\n\n            mappedVars[transformedVarName] = {\n                ...varDetails,\n                varName,\n                transformedVarName,\n                isShortVar,\n            }\n        })\n\n        return mappedVars\n    }\n\n    /**\n     * Encodes the variable mapping (from assignVariableNames) to bytes.\n     */\n    encodeDimLong(mappedVars: Record<string, any>): number[] {\n        const encoded: number[] = []\n        const skipType = null\n\n        const varsByType: Record<string, any[]> = {}\n\n        Object.values(mappedVars).forEach((varData: any) => {\n            const { type, arr_size } = varData\n            const { encodedType, encodedTypeBytes } = this.getTypeCode(type, arr_size)\n            varData.typeCode = encodedType\n            varData.encodedTypeBytes = encodedTypeBytes\n            const typeCode = encodedType\n            varsByType[typeCode] = varsByType[typeCode] || []\n            varsByType[typeCode].push(varData)\n        })\n\n        const orderedTypes = Object.values(mappedVars)\n            .sort((a: any, b: any) => a.idx - b.idx)\n            .map((data: any) => data.typeCode)\n            .filter((type, index, self) => self.indexOf(type) === index)\n\n        const encodedBytesByType: Record<string, number[]> = {}\n\n        Object.entries(varsByType).forEach(([typeCode, vars]) => {\n            if (typeCode === skipType) return\n\n            const encodedData: number[] = []\n\n            if (vars[0].type == skipType) return\n\n            encodedData.push(...vars[0].encodedTypeBytes)\n            encodedBytesByType[typeCode] = encodedData\n\n            const varNames = vars.map((varData: any) => varData.transformedVarName)\n            const varNamesShortened = getSVarList(varNames)\n\n            const byteData = StringTokenizer.convertStringToBytes(\n                varNamesShortened,\n                DEFAULT_STRING_TOKENIZER_PROPS,\n            ).byteArray\n            encodedData.push(...byteData)\n        })\n\n        orderedTypes.forEach((typeCode) => {\n            const encodedValues = encodedBytesByType[typeCode]\n            encoded.push(...encodedValues, scrTokensTTC[','])\n        })\n\n        encoded.pop()\n        return encoded\n    }\n\n    defaultSizePostfix = {\n        128: '$',\n        254: '',\n    }\n\n    /** Type code.\n     * A single byte for normal types with short code.\n     * For strings, it can contain a length index.\n     * Also for arrays it can contain a length index.\n     * For example, $10 is a string of length 10, $ is a string of default length.\n     * Arrays:\n     * - w10 is an array of 10 words\n     * - $20 is a string of length 20\n     * - $20<-3 is an array of 3 strings of length 20\n     */\n    getTypeCode(\n        typeDetails: DataTypeDetailsWithSize,\n        arrSize: number,\n    ): { encodedType: string; encodedTypeBytes: number[] } {\n        let encodedType = ''\n        const encodedTypeBytes: number[] = []\n\n        if (typeDetails.shortCode != '$') {\n            encodedType += typeDetails.shortCode\n            encodedTypeBytes.push(scrTokensTTC[typeDetails.shortCode as keyof typeof scrTokensTTC])\n        } else {\n            if (\n                Object.keys(this.defaultSizePostfix).includes(typeDetails.dataLength.toString(10))\n            ) {\n                const postfix =\n                    this.defaultSizePostfix[\n                        typeDetails.dataLength as keyof typeof this.defaultSizePostfix\n                    ]\n                encodedType += `$${postfix}`\n                encodedTypeBytes.push(\n                    scrTokensTTC['$'],\n                    ...StringTokenizer.convertStringToBytes(postfix, DEFAULT_STRING_TOKENIZER_PROPS)\n                        .byteArray,\n                )\n            } else {\n                encodedType += `$${typeDetails.dataLength}`\n                encodedTypeBytes.push(\n                    scrTokensTTC['$'],\n                    ...this.numberTokenizer.integerToArray(typeDetails.dataLength.toString(10)),\n                )\n            }\n        }\n\n        if (arrSize > 0) {\n            encodedType += `{'<=='}${arrSize.toString()}}`\n            if (typeDetails.shortCode == '$') {\n                encodedTypeBytes.push(scrTokensTTC['<=='])\n            }\n            encodedTypeBytes.push(...this.numberTokenizer.integerToArray(arrSize.toString(10)))\n        }\n        return { encodedType, encodedTypeBytes }\n    }\n}\n","export const enum SpecialBoolType {\n    unset,\n    mutableTrue,\n    mutableFalse,\n    finalTrue,\n    finalFalse,\n}\n\nexport class SpecialBool {\n    _value: SpecialBoolType = SpecialBoolType.unset\n\n    constructor(initValue: SpecialBoolType = SpecialBoolType.unset) {\n        this._value = initValue\n    }\n\n    isTrue() {\n        return (\n            this._value === SpecialBoolType.mutableTrue || this._value === SpecialBoolType.finalTrue\n        )\n    }\n\n    isFalse() {\n        return (\n            this._value === SpecialBoolType.mutableFalse ||\n            this._value === SpecialBoolType.finalFalse\n        )\n    }\n\n    isFinal() {\n        return (\n            this._value === SpecialBoolType.finalTrue || this._value === SpecialBoolType.finalFalse\n        )\n    }\n\n    set value(value: SpecialBoolType | boolean) {\n        if (this.isFinal()) {\n            return\n        }\n\n        if (value === true) {\n            this._value = SpecialBoolType.mutableTrue\n        } else if (value === false) {\n            this._value = SpecialBoolType.mutableFalse\n        } else {\n            this._value = value\n        }\n    }\n}\n","import { GbDirectives } from './languages/gb-preprocessor'\nimport { SpecialBool } from './special-bool'\n\nexport class LanguagePreprocessor {\n    directives: Record<string, any> = {}\n    directiveValues: string[]\n    directiveFunctions: Record<string, () => void>\n\n    constructor(private text: string) {\n        this.directiveValues = []\n        this.directiveFunctions = {}\n    }\n\n    process() {\n        this.readGlobalDirectiveValues()\n    }\n\n    analyzeVarsFromTokenized(tokens: any[]) {}\n\n    /** Read directives.\n     * All lines that start with a # are considered directives if the # is followed by a word without a space.\n     * The first line can contain global directives that changes global behavior.\n     *\n     * The directive is considered valid if it is one of the following:\n     * #for: for loop-\n     * #console: write to console\n     * #start: a block of code that will be executed\n     * #end:\n     *\n\n    */\n    readGlobalDirectiveValues() {\n        // Get the first line that starts with a # and is followed directly by a word without a space for directives\n\n        const directiveRx = /(?:^[\\n\\s]*)((#\\S*\\s*)+)/m\n\n        const match = this.text.match(directiveRx)\n\n        if (!match) {\n            return { result: [], error: null }\n        }\n\n        const directivesFound = match[1]\n            .split(/\\s+/)\n            .map((directive: string) => directive.trim().replace(/#/g, ''))\n            .filter((directive: string) => directive.length > 0)\n\n        const invalidDirectives: string[] = []\n        directivesFound.forEach((directive: string) => {\n            if (Object.keys(this.directives).indexOf(directive) === -1) {\n                invalidDirectives.push(directive)\n            }\n        })\n\n        if (invalidDirectives.length > 0) {\n            return { result: [], error: `Invalid directive(s): ${invalidDirectives.join(', ')}` }\n        }\n\n        return { result: directivesFound, error: null }\n    }\n\n    useGlobalDirectives() {\n        const directiveResult = this.readGlobalDirectiveValues()\n        if (directiveResult.error) {\n            throw new Error(directiveResult.error)\n        }\n\n        this.directiveValues = directiveResult.result\n\n        this.directiveValues.forEach((directive: string) => {\n            this.directiveFunctions[directive]()\n        })\n    }\n\n    getFinalDirectives(): GbDirectives {\n        const transformedDirectives: GbDirectives = {} as GbDirectives\n\n        Object.entries(this.directives).forEach(([key, value]) => {\n            if (value instanceof SpecialBool) {\n                value = value.isTrue()\n            }\n\n            transformedDirectives[key as keyof GbDirectives] = value\n        })\n\n        return transformedDirectives\n    }\n}\n","import { Token } from './token'\nimport { TokenArray } from './token-array'\n\nexport abstract class Prettifier {\n    /** Prettify a token based on its type and value. (E.g. add spaces before and after.) */\n    static prettifyToken(_type: string, _category: string, _value: string): string {\n        return ''\n    }\n\n    /** Get indentation offset from the current type and value.\n     * Returns: [offsetThisLine, offsetNextLine]\n     */\n    static getIndentOffset(_type: string, _value: string): [number, number] {\n        return [0, 0]\n    }\n\n    /** How many new lines to be added based on the new token\n     * (e.g. whitespace block with multiple enters)\n     *\n     * @param token The current Token\n     * @param array The complete Token array\n     * @param idx   The current index in the array\n     *\n     * Returns Token: token to be displayed (usually null)\n     *          number: number of empty lines to be added (0: no line-break, 1: continue in next line etc.)\n     * */\n    static getNewLineCountFunction(\n        token: Token,\n        _array: TokenArray,\n        _idx: number,\n    ): [Token | null, number] {\n        return [token, 0]\n    }\n}\n\nexport class BasePrettifier extends Prettifier {\n    static prettifyToken(_type: string, _category: string, value: string): string {\n        return value\n    }\n\n    static getIndentOffset(_type: string, _value: string): [number, number] {\n        return [0, 0]\n    }\n\n    static getNewLineCountFunction(\n        token: Token,\n        _array: TokenArray,\n        _idx: number,\n    ): [Token | null, number] {\n        if (token.key !== 'whiteSpc') return [token, 0]\n\n        return [null, token.value.match(/\\r\\n|\\n|\\r/g)?.length || 0]\n    }\n}\n","/** A single Token */\nexport class Token {\n    typeMapper: Record<string, string[]>\n\n    static defaultMapper = {\n        remark: ['remark', 'rem_multi', 'docstr'],\n        number: ['hexNum', 'floatNum', 'intNum'],\n        string: ['strDQuote', 'strSQuote', 'strBQuote'],\n        binaryOp: [\n            '+',\n            '-',\n            '<',\n            '<=',\n            '==',\n            '>',\n            '>=',\n            '!=',\n            '!==',\n            '===',\n            '||',\n            '&&',\n            '*',\n            '/',\n            '%',\n            '|',\n            '&',\n        ],\n        unaryOp: ['(', '-', '~'],\n        assignment: ['=', '|=', '&=', '+=', '-=', '*=', '/=', '^='],\n    }\n\n    constructor(\n        public key: string,\n        public value: string,\n        public pos: number,\n        public repr: string,\n        public reprPretty: string,\n        public category: string,\n        public spanClass: string,\n        typeMapper: Record<string, string[]> | null = null,\n    ) {\n        this.typeMapper = typeMapper || Token.defaultMapper\n    }\n\n    /** Is the token a remark? */\n    isRemark() {\n        return this.typeMapper.remark.indexOf(this.key) >= 0\n    }\n\n    /** Is the token a number? */\n    isNumber() {\n        return this.typeMapper.number.indexOf(this.key) >= 0\n    }\n\n    /** Is the token a string? */\n    isString() {\n        return this.typeMapper.string.indexOf(this.key) >= 0\n    }\n\n    /** Is the token a unary operator? */\n    isUnaryOperation() {\n        return this.typeMapper.unaryOp.indexOf(this.value) >= 0\n    }\n\n    /** Is the token a binary operator? */\n    isBinaryOperation() {\n        return this.typeMapper.binaryOp.indexOf(this.value) >= 0\n    }\n\n    /** Is the token an assignment operator? */\n    isAssignment() {\n        return this.typeMapper.assignment.indexOf(this.value) >= 0\n    }\n\n    /** Is the token of a given type? */\n    isType(typeName: string) {\n        return (\n            this.typeMapper[typeName].indexOf(this.key) >= 0 ||\n            this.typeMapper[typeName].indexOf(this.value) >= 0\n        )\n    }\n}\n","import { Prettifier, BasePrettifier } from './prettifier'\nimport { Token } from './token'\nimport { TokenArray } from './token-array'\nimport { TokenizerFunction, Tokenizer } from './tokenizer'\n\nexport type TokenizerSettingKeys =\n    | 'rxPattern'\n    | 'skipEmpty'\n    | 'TokenClass'\n    | 'mapper'\n    | 'PrettifierClass'\n    | 'htmlClassPrefix'\n    | 'splitFunc'\n    | 'subFormatPatterns'\n    | 'getNewLineCountFunction'\n    | 'tokenTypeMapper'\n\nexport class TokenizerSettings {\n    /** Regexp used for tokenizing. The default tokenizes each character as a symbol. */\n    rxPattern: RegExp\n\n    /** Further tokenization for given tokens */\n    subFormatPatterns: Record<string, TokenizerFunction>\n\n    /** Skip adding empty token results. Default: true.*/\n    skipEmpty: boolean\n\n    /** Mapper: a dictionary where key is the regexp name, and value is the final token type. */\n    mapper: Record<string, string>\n\n    /** A Token or an inherited class. Default: Token. */\n    TokenClass: typeof Token\n\n    /** A Prettifier class which can prettify tokens and line indentations. */\n    PrettifierClass: typeof Prettifier\n\n    /** Prefix for html classes. */\n    htmlClassPrefix: string\n\n    /** Split function for tokens - default: none */\n    splitFunc: (token: Token, settings: TokenizerSettings, TokenClass: typeof Token) => Token[]\n\n    /** A function returning the new lines to be added from a Token. */\n    getNewLineCountFunction: ((token: Token, array: TokenArray, idx: number) => number) | null\n\n    /** Mappings for type checkings, e.g. isString */\n    tokenTypeMapper: Record<string, string[]>\n\n    /** Settings for tokenizer\n     * @param rxPattern         Regexp used for tokenizing. The default tokenizes each character as a symbol.\n     * @param subFormatPatterns        Further tokenization for given tokens.\n     * @param skipEmpty         Skip adding empty token results. Default: true.\n     * @param TokenClass        A Token or an inherited class. Default: Token.\n     * @param mapper            Mapper: a dictionary where key is the regexp name, and value is the final token type.\n     * @param PrettifierClass   A Prettifier class which can prettify tokens and line indentations.\n     * @param htmlClassPrefix   Prefix for html classes.\n     * @param getNewLineCount   A function returning the new lines to be added from a Token.\n     * @param prettifierFunction Prettifier function - add whitespace, format commands etc.\n     * @param tokenTypeMapper   Mappings for type checkings, e.g. isString\n     */\n    constructor(settings: Partial<Record<TokenizerSettingKeys, any>>) {\n        // Validation\n        Object.keys(settings).forEach((key) => {\n            if (\n                [\n                    'rxPattern',\n                    'subFormatPatterns',\n                    'skipEmpty',\n                    'mapper',\n                    'PrettifierClass',\n                    'TokenClass',\n                    'splitFunc',\n                    'getNewLineCountFunction',\n                    'tokenTypeMapper',\n                    'htmlClassPrefix',\n                ].indexOf(key) == -1\n            ) {\n                throw Error(`Invalid key ${key} for tokenizer settings!`)\n            }\n        })\n\n        this.rxPattern = settings.rxPattern || /(?<symbol>.)/g\n        this.subFormatPatterns = settings.subFormatPatterns || {}\n\n        this.skipEmpty = settings.skipEmpty === undefined ? true : settings.skipEmpty\n        this.mapper = settings.mapper || {}\n        this.htmlClassPrefix = settings.htmlClassPrefix || ''\n        this.splitFunc = settings.splitFunc || Tokenizer.noSplitter\n        this.tokenTypeMapper = settings.tokenTypeMapper || Token.defaultMapper\n\n        this.TokenClass = settings.TokenClass || Token\n        this.PrettifierClass = settings.PrettifierClass || BasePrettifier\n\n        this.getNewLineCountFunction = settings.getNewLineCountFunction || null\n    }\n}\n","import { Prettifier } from '../prettifier'\nimport { Token } from '../token'\nimport { TokenArray } from '../token-array'\n\nexport class GBPrettifier extends Prettifier {\n    static PRETTIFY_REPL: Record<string, string> = {\n        '=': ' = ',\n        '+': ' + ',\n        '-': ' - ',\n        '*': ' * ',\n        '/': ' / ',\n        ',': ', ',\n        to: ' to ',\n        step: ' step ',\n        and: ' and ',\n        or: ' or ',\n        fn: 'fn ',\n        then: ' then ',\n    }\n\n    static prettifyToken(type: string, category: string, value: string): string {\n        if (type !== 'func' && type !== 'command' && type !== 'other') return value\n\n        if (type == 'command') return value + ' '\n\n        return GBPrettifier.PRETTIFY_REPL[value] || value\n    }\n\n    static getIndentOffset(_type: string, _value: string): [number, number] {\n        return [0, 0]\n    }\n\n    static getNewLineCountFunction(\n        token: Token,\n        _array: TokenArray,\n        _idx: number,\n    ): [Token | null, number] {\n        if (token.key !== 'newLines') return [token, 0]\n\n        return [null, token.value.match(/\\r\\n|\\n|\\r/g)?.length || 0]\n    }\n}\n\nexport class GBPrettifierOneCommand extends GBPrettifier {\n    static getNewLineCountFunction(\n        token: Token,\n        _array: TokenArray,\n        _idx: number,\n    ): [Token | null, number] {\n        if (token.key !== 'whiteSpc' && token.key !== 'commandSep') return [token, 0]\n\n        return [null, token.value.match(/\\r\\n|\\n|\\r|:/g)?.length || 0]\n    }\n}\n","import { COMMANDS_TTC, FUNCTIONS_BY_NAME, TOK_PROP } from '@zoli8000/gb-consts'\n\nimport { Token } from '../token'\nimport { TokenBuilderItem, Tokenizer, TokenizerDefinition } from '../tokenizer'\nimport { TokenizerSettings } from '../tokenizer-settings'\n\nimport { GB } from './gb-consts'\nimport { GBDecoder } from './gb-decoder'\nimport { GBPrettifier } from './gb-prettifier'\n\nconst orderByLen = (a: string, b: string) => b.length - a.length\nconst commandRx = Object.keys(COMMANDS_TTC).sort(orderByLen).join('|')\nconst functionsRx = Object.entries(FUNCTIONS_BY_NAME)\n    .map(([name, props]) => {\n        const [_code, fnProps] = props\n        return fnProps & TOK_PROP.FN_WITH_BRACKET ? String.raw`${name}\\(` : name\n    })\n    .sort(orderByLen)\n    .map((v) => (v.slice(-1) == '(' ? v : v + '(?![a-zA-Z_])'))\n    .join('|')\n\nexport const enum VerboseMode {\n    /** Autodetect mode is used. */\n    AUTO = 0,\n    /** Verbose mode is used. */\n    VERBOSE = 1,\n    /** Short mode is used. */\n    SHORT = 2,\n}\n\nexport class GBTokenizerSettings extends TokenizerSettings {\n    /** Is verbose, short or autodetect to be used? */\n    verboseMode = VerboseMode.AUTO\n}\n\nexport class GBTokenizerSettingsShort extends GBTokenizerSettings {\n    verboseMode: VerboseMode = VerboseMode.SHORT\n}\n\nexport class GBTokenizerSettingsVerbose extends GBTokenizerSettings {\n    verboseMode: VerboseMode = VerboseMode.VERBOSE\n}\n\nexport class GBTokenizerSettingsAuto extends GBTokenizerSettings {\n    verboseMode: VerboseMode = VerboseMode.AUTO\n}\n\nexport class GBTokenizer extends Tokenizer {\n    constructor(gbSettings: Partial<GBTokenizerSettings> = <GBTokenizerSettings>{}) {\n        const verboseSettings: Record<VerboseMode, any> = {\n            [VerboseMode.VERBOSE]: {\n                gbIdentifier: 'gbIdentifierLong',\n                gbDim: 'gbDimLong',\n            },\n            [VerboseMode.SHORT]: {\n                gbIdentifier: 'gbIdentifierShort',\n                gbDim: 'gbDimShort',\n            },\n            [VerboseMode.AUTO]: {},\n        }\n\n        let verboseMode: VerboseMode = gbSettings.verboseMode || VerboseMode.AUTO\n        if (verboseMode === VerboseMode.AUTO) {\n            verboseMode = VerboseMode.VERBOSE\n        }\n\n        const special: TokenizerDefinition = {\n            gbIdentifierLong: [8000, String.raw`(?<identifier>[\\w×]+)`],\n            gbIdentifierShort: [8000, String.raw`(?<identifier>[\\w][×]?)`],\n\n            gbSysVar: [8100, String.raw`(?<sysId>[@][\\w×]+)`],\n            gbPostfix: [8200, String.raw`(?<postfix>\\.[\\w×]+)`],\n            gbLabel: [4000, String.raw`(?<label>^[\\w]+\\s*[:]$)`],\n\n            gbDimLong: [\n                6000,\n                String.raw`(?<command__dim>dim)(?<dimDetailsLong>[^;]*)(?<whiteSpc__dim>;)`,\n            ],\n            gbDimShort: [\n                6000,\n                String.raw`(?<command__dim>dim)(?<dimDetailsShort>[^;]*)(?<whiteSpc__dim>;)`,\n            ],\n\n            // gbCommand: [6050, String.raw`(?<command>\\?|local|break|call|def|endif|for|goto|fend|if|elif|clr|let|memset|next|on|poke|continue|return|sprite|then|until|voice|while|exec|input|open|data|bitmap|fcall|dend|else|fast|gosub|close|dim|get|color|loop|memcopy|end|do|dpoke|font|read|sys|timer|wait|inkey|print|locate|inc|dec|repeat)`],\n            gbCommand: [6050, String.raw`(?<command>\\?|${commandRx})(?![a-zA-Z_])`],\n            // gbFunction: [6100, String.raw`(?<func>abs\\(|between\\(|chr\\(|dpeek\\(|left\\(|fn|sgn\\(|has\\(|int\\(|tab\\(|cos\\(|len\\(|mid\\(|atn\\(|ord\\(|peek\\(|frac\\(|rnd\\(|sin\\(|tan\\(|sub\\(|val\\(|when\\(|find\\(|time\\(|spc\\(|addr\\(|right\\(|limit\\(|to|step)`],\n            gbFunction: [6100, String.raw`(?<func>${functionsRx})`],\n            gbOperator: [\n                6200,\n                String.raw`(?<operator>(AND|OR|div|mod|xor|and|or)(?![a-zA-Z_])|[+\\-*\\/^>=<&])`,\n            ],\n            v2Sep: [7000, String.raw`(?<commandSep>[:])`],\n            newLines: [3050, String.raw`(?<newLines>(\\r\\n|\\n|\\r)+)`],\n            whiteSpace: [3100, String.raw`(?<whiteSpc>[\\t\\ \\xA0]+)`],\n            gbTypes: [\n                6300,\n                String.raw`(?<idType>([us]?(byte|word|f08|f88|f2416|float))|char|dchar|varstr|fixstr|[$])`,\n            ],\n            gbRemDash: [1150, String.raw`(?<remarkDash>[\\-]{2}.*$)`],\n            gbSysBlock: [1000, String.raw`(?<sysBlock>[#]start.*?[#]end\\s*)`],\n            gbSysCmd: [1200, String.raw`(?<sysCmd__const>[#]const[^;]+?[;])`],\n            gbSysUse: [1200, String.raw`(?<use>^\\s*[#]use\\s+[\\w=,]+)`],\n            gbSysCmdOther: [1250, String.raw`(?<sysCmd__other>[#].*$)`],\n            gbExpr: [6300, String.raw`(?<expr>[{][^}]*?[}])`],\n            gbOther: [8500, String.raw`(?<other__8500>[@,;\\(\\)\\[\\]])`],\n\n            gbStrQQuote: [\n                2050,\n                String.raw`(?<other_quote__strQO>\\\"\\\")(?<strQQuote>(?:[{][^}]*?[}]|.)*?)(?<other_quote__strQC>\\\"\\\")`,\n            ],\n            gbStrDQuote: [\n                2100,\n                String.raw`(?<other_quote__strDO>\\\")(?<strDQuote>(?:[{][^}]*?[}]|[^\\\"])*?)(?<other_quote__strDC>\\\")`,\n            ],\n            gbStrSQuote: [\n                2200,\n                String.raw`(?<other_quote__strSO>\\')(?<strSQuote>(?:[{][^}]*?[}]|[^\\'])*?)(?<other_quote__strSC>\\')`,\n            ],\n            gbStrBQuote: [\n                2300,\n                String.raw`(?<other_quote__strBO>\\`)(?<strBQuote>(?:[{][^}]*?[}]|[^\\`])*?)(?<other_quote__strBC>\\`)`,\n            ],\n        }\n\n        const rx = Tokenizer.buildRxString(\n            [\n                TokenBuilderItem.remark,\n                TokenBuilderItem.docstr,\n                TokenBuilderItem.remMulti,\n                TokenBuilderItem.numInt,\n                TokenBuilderItem.numFloat,\n                'gbSysCmdOther',\n                'gbSysCmd',\n                'gbSysBlock',\n                'gbSysUse',\n                'gbStrQQuote',\n                'gbStrDQuote',\n                'gbStrSQuote',\n                'gbStrBQuote',\n                'gbExpr',\n                'gbOther',\n                'gbRemDash',\n                'gbSysVar',\n                verboseSettings[verboseMode].gbIdentifier,\n                'gbPostfix',\n                'gbLabel',\n                'gbOperator',\n                'gbTypes',\n                verboseSettings[verboseMode].gbDim,\n                'gbCommand',\n                'gbFunction',\n                'newLines',\n                'v2Sep',\n                'whiteSpace',\n            ],\n            special,\n            '',\n        )\n\n        /** These pattern groups will be further tokenized to sub-groups. */\n        const subFormatPatterns = {\n            // TODO: other quote types as well!!!!\n            strDQuote: String.raw`  (\n                                      (?<other__sp_open>[{])\n                                      (?<strSpecial>[^}]*?)\n                                      (?<other__sp_close>[}])\n                                    ) |\n                                    (?<strNormal>[^{]+)`,\n            strSpecial: String.raw`\n            (?<whiteSpc__100>\\s*?)(\n             (?<remark__str>(([-]{2}|[/]{2}).*$)|[/][*][\\s\\S]*?[*][/]) |\n\n             ( (?<func__str>\\w+\\s*)\n                (?<other__bropen>[(])\n                (?<strfunc_params>[^)]*?)\n               (?<other__brclose>[)])\n             ) |\n\n             (\n               (?<strSpecCheck>\\w+) |\n               (?<intNum__1>[a-zA-Z_][a-zA-Z_0-9]*) |\n               (?<intNum__2>(?:[$]|0x)[0-9a-fA-F]+[w]{0,1}) |\n               (?<intNum__3>[0-9]+[w]{0,1})\n             )\n             ((?<other__multi>\\s*[*]\\s*)(?<intNum__str>[0-9]+))?\n             (?<other__100>[,;]\\s*|\\s+|\\s*$)\n           ) |\n           (?<other__101>\\s+) |\n           (?<error>.+?)\n           `,\n            strSpecCheck: GBTokenizer.validateCode,\n\n            strfunc_params: String.raw`\n                            (?<other__spec100>\\\")(?<strNormal__strspec>[^\\\"]*?)(?<other__spec150>\\\") |\n                            (?<intNum__spec100>\\d+) |\n                            (?<other__spec200>[,]) |\n                            (?<other__spec300>.)\n                            `,\n\n            dimDetailsShort: '__main',\n        }\n        // 'const': /(\\s*)(?:\\#const)|\\W(?<type>UBYTE|SBYTE|BYTE|UWORD|SWORD|WORD|UF08|SF08|F08|UF88|SF88|F88|U2416|S2416|F2416|FLOAT|CHAR|DCHAR|VARSTR|FIXSTR|[wlbdW%$BSscLfF]|([$]\\d+,?)|[$])\\W|(?<const_name>[A-Z_]+)\\s*=\\s*([{](?<const_expr>.+?)[}]|(?<const_val>.+?))\\s*,?(?<comment>[-|\\/]{2}.*)?$\\s*$/gim,\n\n        // 'dim': /(\\s*)(?<cmd>dim|local)|\\W(?<type>UBYTE|SBYTE|BYTE|UWORD|SWORD|WORD|UF08|SF08|F08|UF88|SF88|F88|U2416|S2416|F2416|FLOAT|CHAR|DCHAR|VARSTR|FIXSTR|[wlbdW%$BSscLfF]|([$]\\d+)|[$])(?<arr_size>\\d*)($|\\s+)|((?<var_name>[IJK]×|[a-zA-Z][a-zA-Z_0-9×]*)\\s*([,;]?\\s*(?<comment>[-|\\/]{2}.*)?$))/gim,\n\n        const mapper = {\n            // 'SYS': 'color:#d8e;font-weight:600',\n            // 'ERR': 'color:red; text-decoration-line: underline; text-decoration-style: wavy; text-decoration-color: red',\n            // 'SPEC': 'color:#ba8;font-style:italic;font-weight:500',\n\n            command: 'CMD',\n            commandRem: 'CMD',\n            func: 'FUNC',\n            error: 'ERR',\n\n            strDQuote: 'STR',\n            strQQuote: 'STR',\n            strSQuote: 'STR',\n            strBQuote: 'STR',\n            strNormal: 'STR',\n            strSpec: 'SPEC',\n\n            label: 'LABEL',\n            floatNum: 'NUM',\n            intNum: 'NUM',\n\n            identifier: 'VAR',\n            identifier2: 'VAR',\n            idExtra: 'EXTRA',\n            idType: 'FUNC',\n            sysId: 'FUNC',\n\n            commandSep: 'SEP',\n            whiteSpc: 'SPC',\n            remark: 'REM',\n            remarkDash: 'REM',\n            rem_multi: 'REM',\n            docstr: 'DOCSTR',\n            other: 'OTHER',\n            other_quote: 'SKIP',\n\n            sysCmd: 'SYS',\n            sysCmd2: 'SYS',\n            postfix: 'FUNC',\n        }\n\n        const settings = new TokenizerSettings({\n            rxPattern: rx,\n            subFormatPatterns,\n            mapper,\n            htmlClassPrefix: 'editor-style-',\n            // splitFunc: Tokenizer.lineSplitter,\n            PrettifierClass: GBPrettifier,\n        })\n\n        super(settings)\n    }\n\n    static validateCode(key: string, value: string) {\n        if (value.toUpperCase() in GB.TTC_STRING_TOKENS_UPPER) return ['strSpec', value]\n        return ['error', value]\n    }\n\n    getTokensFromMemory(memory: number[]) {\n        const rawTokens = GBDecoder.getTokensFromMemory(memory)\n        this.reset()\n\n        rawTokens.forEach((token: Token) => {\n            this.addToken(token.key, String(token.value), token.pos)\n        })\n\n        // console.log(this.tokenizer.tokens)\n    }\n\n    tokenizeStr(text: string) {\n        this.tokenizeString(text)\n    }\n}\n","/**\n- Preprocessor #1: read directives (strict, verbose) -> directives, consts -> consts, dim -> dim, debug -> debug\n- Preprocessor #2: detect short varnames for verbose, create mapping, count def, fast and variable refs\n- Preproc: restructure if allowed (move single defs inline -> #inline)\n*/\n\nimport { LanguagePreprocessor } from '../language-preprocessor'\nimport { SpecialBool, SpecialBoolType } from '../special-bool'\nimport { TokenArray } from '../token-array'\n\nimport { GBTokenizerSettings, VerboseMode } from './gb-tokenizer'\n\nexport type GbDirectiveKey =\n    | 'verbose'\n    | 'compact'\n    | 'strict'\n    | 'loose'\n    | 'inline'\n    | 'safe'\n    | 'trusted'\n    | 'directshort'\nexport type GbDirectives = Record<GbDirectiveKey, any>\n\nexport class GBLanguagePreprocessor extends LanguagePreprocessor {\n    /** Read potential directives from first line.\n     *\n     * Possible directives: \\\n     *      #verbose        use verbose variable and function names \\\n     *      #compact        use single char variable and function names (e.g. a, A, Ax) \\\n     *      #strict         allow only variable names initiated with DIM \\\n     *      #loose          no need to init variable names, not as safe\n     *      #inline         add defs that are used only once inline  \\\n     *      #safe           do not execute js code \\\n     *      #trusted        execute js code after user confirmation \\\n     *      #directshort    allow short variable names (e.g. a, A, Ax) in compact mode \\\n     *\n     */\n\n    directives: GbDirectives = {\n        verbose: new SpecialBool(SpecialBoolType.mutableTrue),\n        compact: new SpecialBool(SpecialBoolType.mutableFalse),\n        strict: new SpecialBool(SpecialBoolType.mutableTrue),\n        loose: new SpecialBool(SpecialBoolType.mutableFalse),\n        inline: new SpecialBool(SpecialBoolType.mutableFalse),\n        safe: new SpecialBool(SpecialBoolType.mutableTrue),\n        trusted: new SpecialBool(SpecialBoolType.mutableFalse),\n        directshort: new SpecialBool(SpecialBoolType.mutableFalse),\n    }\n\n    directiveFunctions: Record<GbDirectiveKey, () => void> = {\n        verbose: () => {\n            this.directives.verbose.value = true\n            this.directives.compact.value = false\n        },\n        compact: () => {\n            this.directives.verbose.value = false\n            this.directives.compact.value = true\n        },\n        strict: () => {\n            this.directives.strict.value = true\n            this.directives.loose.value = false\n        },\n        loose: () => {\n            this.directives.strict.value = false\n            this.directives.loose.value = true\n        },\n        inline: () => {\n            this.directives.inline.value = true\n        },\n        safe: () => {\n            this.directives.safe.value = true\n            this.directives.trusted.value = false\n        },\n        trusted: () => {\n            this.directives.safe.value = false\n            this.directives.trusted.value = true\n        },\n        directshort: () => {\n            this.directives.directshort.value = true\n        },\n    }\n\n    setSettings(gbSettings: Partial<GBTokenizerSettings>) {\n        if (gbSettings.verboseMode === VerboseMode.VERBOSE) {\n            this.directives.verbose.value = SpecialBoolType.finalTrue\n            this.directives.compact.value = SpecialBoolType.finalFalse\n        } else if (gbSettings.verboseMode === VerboseMode.SHORT) {\n            this.directives.verbose.value = SpecialBoolType.finalFalse\n            this.directives.compact.value = SpecialBoolType.finalTrue\n        } else if (gbSettings.verboseMode === VerboseMode.AUTO) {\n            // TODO - run preprocessor to detect the mode\n            this.directives.verbose.value = true\n            this.directives.compact.value = false\n        }\n    }\n\n    analyzeVarsFromTokenized(tokens: TokenArray) {\n        const varCount: Record<string, number> = {}\n\n        tokens.forEach((token) => {\n            if (token.category === 'VAR') {\n                varCount[token.value] = (varCount[token.value] || 0) + 1\n            }\n        })\n\n        return varCount\n    }\n\n    getDimDetails(tokens: TokenArray) {\n        let memSettings = 0\n        const dimDetails: Record<string, number> = {}\n        let _currentType = 0\n        let _arrayLength = 0\n\n        let dimIndex = tokens.findIndex((token) => token.category === 'DIM')\n        if (dimIndex === -1) {\n            return { memSettings }\n        }\n\n        if (tokens[dimIndex + 1]?.category == 'intNum') {\n            memSettings = tokens[dimIndex + 1].value\n            dimIndex += 2\n        }\n\n        // Type (array length) variables separated by commas, if ';' found, finish loop\n        while (dimIndex < tokens.length) {\n            if (tokens[dimIndex].category === 'commandSep' && tokens[dimIndex].value === ';') {\n                break\n            }\n\n            if (tokens[dimIndex].category === 'idType') {\n                _currentType = tokens[dimIndex].value\n\n                if (tokens[dimIndex + 1]?.category === 'intNum') {\n                    _arrayLength = tokens[dimIndex + 1].value\n                    dimIndex++\n                }\n                dimIndex++\n\n                while (tokens[dimIndex]?.category === 'VAR') {\n                    const varName = tokens[dimIndex].value\n                    dimDetails[varName] = tokens[dimIndex].value\n                }\n                dimIndex++\n            }\n\n            dimIndex++\n        }\n    }\n}\n","/**\n    A single instance should be used.\n    It can handle the following formats:\n    - long: varname [(.postfix | idx)...]\n    - v[(p|i)...]\n\n    E.g.:\n    myvar[2].lo.word\n    m2lw\n    m<-xl\n\n */\n\nimport { scrCodesCTT, scrTokensTTC, POSTFIX_BY_FULL_READ } from '@zoli8000/gb-consts'\n\nimport { NumberTokenizer, defaultNumberEncoder, GBTypeCodes } from './gb-number-encoder'\n\nexport const enum NumberType {\n    digit,\n    byte,\n    word,\n    fixed08,\n    fixed88,\n}\n\nexport type TypeCodeMapping = Record<NumberType, number[]>\n\nexport type VarTokenizerFunction = (text: string) => number[]\n\nexport type VarMapping = {\n    shortvar: string\n    longvar: string\n    isArray: boolean\n    length: number\n}\n\nexport type VarEncoderSettings = {\n    isStrict: boolean\n    dimObject: Record<string, number>\n}\n\nexport class VarTokenizer {\n    subTokenized: string[]\n    varMappings: Record<string, VarMapping>\n    private validChars: string[]\n\n    constructor(\n        public typeCodes: TypeCodeMapping,\n        public settings: VarEncoderSettings,\n    ) {\n        this.subTokenized = []\n        this.varMappings = {}\n\n        this.validChars = []\n        this.reset()\n    }\n\n    reset() {\n        this.subTokenized = []\n        this.varMappings = {}\n\n        const charLo: string[] = []\n        const charHi: string[] = []\n        const charExed: string[] = []\n\n        for (let i = 0; i < 26; i++) {\n            charLo.push(scrCodesCTT[(i + 1) as keyof typeof scrCodesCTT])\n            charHi.push(scrCodesCTT[(i + 65) as keyof typeof scrCodesCTT])\n            charExed.push(scrCodesCTT[(i + 65) as keyof typeof scrCodesCTT] + '×')\n        }\n\n        this.validChars.push(...charLo, ...charHi, ...charExed)\n    }\n\n    subTokenize(text: string, isVerbose: boolean = false): number[] {\n        // TODO: fix short for cases like 'al'\n        let rx =\n            /(?<postindex>\\.\\d+|<-\\d+)|(?<quickindex><-\\w+)|(?<postfix>\\.\\w+)|(?<base>[a-z_A-Z×]+)/gm\n\n        if (!isVerbose) {\n            rx =\n                /(?<postindex>\\.\\d+|<-\\d+)|(?<quickindex><-\\w+)|(?<postfix>\\.\\w+)|(?<base>[a-zA-Z][×]?)(?<postfix2>[\\w×]*)/gm\n        }\n\n        rx.lastIndex = 0\n        let m = null\n        const bytes = []\n\n        while ((m = rx.exec(text)) !== null) {\n            if (m.index === rx.lastIndex) {\n                rx.lastIndex++\n            }\n\n            const base = m.groups?.base || ''\n            const postfix = m.groups?.postfix || ''\n            const postindex = m.groups?.postindex || ''\n            const quickindex = m.groups?.quickindex || ''\n\n            // TODO: short should be pushed and removed from the validChars\n\n            const isShort = !isVerbose || base.length == 1 || (base.length == 2 && base[1] == '×')\n            if (base) {\n                const shortVar = !isShort ? this.longvarToShortvar(base) : base\n                bytes.push(scrTokensTTC[shortVar as keyof typeof scrTokensTTC])\n\n                if (m.groups?.postfix2) {\n                    let idx = 0\n\n                    while (idx < m.groups?.postfix2.length) {\n                        let char = m.groups?.postfix2[idx]\n\n                        if (m.groups?.postfix2[idx + 1] == '×') {\n                            char += '×'\n                            idx++\n                        }\n\n                        if (char) {\n                            bytes.push(scrTokensTTC[char as keyof typeof scrTokensTTC])\n                        }\n                        idx++\n                    }\n                }\n            }\n\n            if (postfix) {\n                const postfixChar =\n                    POSTFIX_BY_FULL_READ[\n                        postfix.replace(/\\./g, '') as keyof typeof POSTFIX_BY_FULL_READ\n                    ][0]\n                bytes.push(scrTokensTTC[postfixChar as keyof typeof scrTokensTTC])\n            } else if (postindex) {\n                const postIndexValue = postindex.replace(/<-|\\./g, '')\n                const numberTokenizer = new NumberTokenizer(GBTypeCodes, defaultNumberEncoder)\n                const result = numberTokenizer.integerToArray(postIndexValue)\n                bytes.push(...result)\n            } else if (quickindex) {\n                const quickIndexValue = quickindex.replace(/<-|\\./g, '')\n                const shortVar = !isShort\n                    ? this.longvarToShortvar(quickIndexValue)\n                    : quickIndexValue\n                bytes.push(scrTokensTTC['<--' as keyof typeof scrTokensTTC])\n                bytes.push(scrTokensTTC[shortVar as keyof typeof scrTokensTTC])\n            }\n        }\n\n        return bytes\n    }\n\n    /** Convert long variable name to short */\n    longvarToShortvar(text: string): string {\n        if (\n            this.settings.isStrict &&\n            text.length > 0 &&\n            this.settings.dimObject[text] === undefined\n        ) {\n            throw new Error(`Variable ${text} not found in DIM declaration`)\n        }\n\n        const shortVar = this.getNextShortVar()\n        if (!shortVar) {\n            throw new Error(`No more short variable names available`)\n        }\n\n        const existingDefinition = this.varMappings[shortVar]\n        if (existingDefinition) {\n            if (existingDefinition.longvar !== text) {\n                throw new Error(\n                    `Short variable ${shortVar} already defined as ${existingDefinition.longvar}`,\n                )\n            }\n            return shortVar\n        }\n\n        this.varMappings[shortVar] = {\n            shortvar: shortVar,\n            longvar: text,\n            isArray: false,\n            length: 0,\n        }\n\n        return shortVar\n    }\n\n    getNextShortVar(): string {\n        return this.validChars.shift() || ''\n    }\n}\n\nexport const defaultVarEncoder: VarEncoderSettings = {\n    isStrict: false,\n    dimObject: {},\n}\n","import { LanguageEncoder } from '../language-encoder'\nimport { StringTokenizer } from '../string-tokenizer'\nimport { Token } from '../token'\nimport { TokenArray } from '../token-array'\n\nimport { C64Chr } from './c64-chr'\nimport { GB } from './gb-consts'\nimport { DimTokenizer } from './gb-dim-encoder'\nimport { NumberTokenizer, defaultNumberEncoder, GBTypeCodes } from './gb-number-encoder'\nimport { GbDirectives, GBLanguagePreprocessor } from './gb-preprocessor'\nimport { GBTokenizer, GBTokenizerSettings } from './gb-tokenizer'\nimport { VarTokenizer, defaultVarEncoder } from './gb-var-encoder'\n\ntype EncoderState = {\n    isVerbose: boolean\n    varTokenizer: VarTokenizer\n    lastCommand: string\n}\n\nexport const DEFAULT_STRING_TOKENIZER_PROPS = {\n    tokens: GB.TTC_STRING_TOKENS,\n    normalConverter: C64Chr.textToScreen,\n    funcs: GB.gbFuncs,\n}\n\nexport class GBEncoder extends LanguageEncoder {\n    varTokenizer: VarTokenizer\n    // readonly RX_LEXER: RegExp = /(?<CMD>end|for|next|data|input#|input|dim|read|let|goto|run|if|restore|gosub|return|rem|stop|on|wait|load|save|verify|def|poke|print#|print|cont|list|clr|cmd|sys|open|close|get|new)|(?<FUNC>tab\\(|to|fn|spc\\(|then|not|step|\\+|-|\\*|\\/|\\^|and|or|>|=|<|sgn|int|abs|usr|fre|pos|sqr|rnd|log|exp|cos|sin|tan|atn|peek|len|str\\$|val|asc|chr\\$|left\\$|right\\$|mid\\$)|(?<STR>\\\"[^\\\"]*\\\")|(?<NUM>(\\d+[.]?\\d*)|(\\d+)|([.]\\d*))|(?<VAR>[a-z][a-z0-9]*[$%(]?)|(?<OTHER>.)/g\n\n    constructor(_gbSettings: Partial<GBTokenizerSettings> = <GBTokenizerSettings>{}) {\n        super()\n        this.varTokenizer = new VarTokenizer(GBTypeCodes, defaultVarEncoder)\n    }\n\n    static encoders: Record<string, any> = {\n        idType: GBEncoder.stringEncoder,\n        postfix: GBEncoder.varEncoder,\n        STR: GBEncoder.stringEncoder,\n        NUM: GBEncoder.numEncoder,\n        VAR: GBEncoder.varEncoder,\n        SEP: GBEncoder.stringEncoder,\n        CMD: GBEncoder.cmdEncoder,\n        FUNC: GBEncoder.cmdEncoder,\n        operator: GBEncoder.cmdEncoder,\n        OTHER: GBEncoder.otherEncoder,\n        commandSep: LanguageEncoder.voidEncoder,\n        SKIP: LanguageEncoder.voidEncoder,\n        whiteSpc: LanguageEncoder.voidEncoder,\n        sysCmd: LanguageEncoder.voidEncoder,\n        newLines: LanguageEncoder.voidEncoder,\n        dimDetailsLong: GBEncoder.dimEncoder,\n    }\n\n    static numEncoder(token: Token, _state: EncoderState): number[] {\n        if (token.key == 'intNum') {\n            const nt = new NumberTokenizer(GBTypeCodes, defaultNumberEncoder)\n            return nt.integerToArray(token.value)\n        }\n\n        throw TypeError(`Invalid type for ${token.key}: ${token.value}`)\n    }\n\n    static dimEncoder(token: Token, _state: EncoderState): number[] {\n        const dimTokenizer = new DimTokenizer()\n        const dimText = token.value\n        // eslint-disable-next-line unused-imports/no-unused-vars\n        const { vars, errors } = dimTokenizer.parseDimLong(dimText, true)\n        const mappedVars = dimTokenizer.assignVariableNames(vars)\n        const dimBytes = dimTokenizer.encodeDimLong(mappedVars)\n        return dimBytes\n    }\n\n    static stringEncoder(token: Token, _state: EncoderState): number[] {\n        if (token.key == 'other' && token.value == '?') return [GB.TTC_COMMAND_TOKENS['print']]\n\n        const prefix: number[] = []\n\n        const { byteArray, status, _invalidCodes } = StringTokenizer.convertStringToBytes(\n            token.repr,\n            DEFAULT_STRING_TOKENIZER_PROPS,\n        )\n\n        if (status !== 'OK') console.log(status)\n\n        if (['strDQuote', 'strSQuote', 'strBQuote', 'strQQuote'].includes(token.key)) {\n            const quoteToken = GB[token.key as keyof typeof GB] as number\n            prefix.push(quoteToken)\n            prefix.push(byteArray.length)\n        }\n\n        return prefix.concat(byteArray)\n    }\n\n    static otherEncoder(token: Token, state: EncoderState): number[] {\n        if (state.lastCommand == 'clr' && token.repr == ',') {\n            return []\n        }\n\n        return GBEncoder.stringEncoder(token, state)\n    }\n\n    static varEncoder(token: Token, state: EncoderState) {\n        const result = state.varTokenizer.subTokenize(token.repr, state.isVerbose)\n        return result\n    }\n\n    static cmdEncoder(token: Token, state: EncoderState): number[] {\n        const token_repr = token.repr.replace('(', '')\n        const convertedToken = GB.TTC_COMMAND_TOKENS[token_repr]\n        const extraZeros = GB.EXTRA_ZEROS[token_repr]\n        if (extraZeros > 0) {\n            return [convertedToken, ...Array(extraZeros).fill(0)]\n        }\n\n        if (GB.IS_COMMAND[token_repr]) {\n            state.lastCommand = token_repr\n        }\n\n        return [convertedToken]\n    }\n\n    static encodeTextAsBytes(\n        text: string,\n        gbSettings: Partial<GBTokenizerSettings> = <GBTokenizerSettings>{},\n    ): number[] {\n        const preprocessor = new GBLanguagePreprocessor(text)\n        preprocessor.setSettings(gbSettings)\n        preprocessor.useGlobalDirectives()\n\n        const tokenizer = new GBTokenizer(gbSettings)\n        tokenizer.tokenizeString(text)\n        const _varsUsed = preprocessor.analyzeVarsFromTokenized(tokenizer.tokens)\n        // const dimDetails = preprocessor.getDimDetails()\n\n        const gbDirectives = preprocessor.getFinalDirectives()\n\n        return GBEncoder.encodeTokens(tokenizer.tokens, gbDirectives)\n    }\n\n    static encodeTokens(array: TokenArray, gbDirectives: GbDirectives): number[] {\n        const lines: any[] = []\n\n        const lineData = { nextAddr: 0, line: null as unknown as number, data: [] as number[] }\n\n        function closeLast() {\n            if (lineData.data.length > 0) {\n                const lineDataCopy = Object.assign({}, lineData)\n                lines.push(lineDataCopy)\n\n                lineData.data = []\n            }\n        }\n\n        const state: EncoderState = {\n            isVerbose: gbDirectives.verbose,\n            varTokenizer: new VarTokenizer(GBTypeCodes, defaultVarEncoder),\n            lastCommand: '',\n        }\n\n        array.forEach((token: Token) => {\n            if (token.category == 'LABEL') {\n                closeLast()\n\n                const _lineVal = parseInt(token.value, 10)\n                return\n            }\n\n            const encoderFunction =\n                GBEncoder.encoders[token.key] || GBEncoder.encoders[token.category]\n            if (encoderFunction) {\n                const data = encoderFunction(token, state)\n                lineData.data.push(...data)\n            } else {\n                throw Error(\n                    `Encoder needed for ${token.key}, ${token.category} for value ${token.value}!`,\n                )\n            }\n        })\n        closeLast()\n\n        const finalBytes: number[] = []\n\n        lines.forEach((line) => {\n            finalBytes.push(...line.data, GB.blockEndToken)\n        })\n\n        finalBytes.push(GB.finalToken)\n\n        return finalBytes\n    }\n\n    /*\n    deployCode(data: number[], state) {\n        const start = 0x801\n        const memData = { start, data }\n\n        app.emulator.setDataInRam(memData)\n        app.emulator.onLoaded(memData);\n\n        const memEnd = start + data.length + 5;\n\n        [0x2e, 0x30, 0x32].forEach(changeAddr => {\n            state.globalState.emulator.bus.write(changeAddr, (memEndvarTokenizer >> 8))\n            state.globalState.emulator.bus.write(changeAddr - 1, memEnd & 0xff)\n        })\n    }\n    */\n}\n","import { ParserSettings } from './parser-settings'\nimport { Token } from './token'\nimport { TokenArray } from './token-array'\n\n/*\ntype ParserCallable = () => void\ntype ParserDefinition = Record<string, string>\n\nconst parserDefinitions: ParserDefinition = {\n    // Remarks\n    digit: '[0-9]',\n    letter: '[a-zA-Z]',\n    word: 'letter | [_]',\n    identifier: 'word, {word | digit}',\n    vartype:\n    var: '<varName: identifier> [:] <varType: vartype>'\n    main:   [\n    docstr:   [1200, String.raw`(?<docstr>\\/[*]{2}[\\S\\s]*?[*]\\/)`],\n    remMulti: [1300, String.raw`(?<rem_multi>\\/[*][\\S\\s]*?[*]\\/)`],\n}\n*/\n\nexport class Parser {\n    /** Token array containing tokenized values */\n    tokens: TokenArray = []\n\n    /** Index of the current token */\n    activeTokenId: number = 0\n\n    /** Active token */\n    token: Token = {} as unknown as Token\n    nextToken: Token = {} as unknown as Token\n\n    scope: string = ''\n    docStr: Record<string, string> = {}\n\n    params: Record<string, any> = {}\n    tags: string[] = []\n\n    /** Labels found in text */\n    labels: Record<string, any> = {}\n\n    /** Funcions found */\n    functions: Record<string, any> = {}\n\n    constructor(public settings: ParserSettings) {}\n\n    parseTokens(tokens: TokenArray) {\n        this.tokens = tokens\n\n        this.activeTokenId = 0\n        this.token = { key: '_whsp' } as Token\n        this.params = { vars: {} }\n        this.docStr = {}\n        this.scope = '__global'\n        this.tags = []\n        this.labels = {}\n        this.functions = {}\n    }\n\n    isFinished() {\n        return this.activeTokenId >= this.tokens.length\n    }\n\n    posToString() {\n        return this.settings.posToStringFn(this.token.pos)\n    }\n\n    startTag(tag: string, value: string) {\n        const spaces = '   '.repeat(this.tags.length)\n        this.tags.push(tag)\n        console.log(`${spaces}<${tag}> ${value}`)\n    }\n\n    endTag() {\n        const tag = this.tags.pop()\n        const spaces = '   '.repeat(this.tags.length)\n        console.log(`${spaces}</${tag}>`)\n    }\n\n    advance() {\n        if (this.isFinished()) {\n            throw Error('Document finished unexpectedly!')\n        }\n        do {\n            this.token = this.tokens[this.activeTokenId]\n            this.activeTokenId++\n\n            if (this.token.key == this.settings.keys['_docstr']) {\n                this.docStr[this.scope] = (this.docStr[this.scope] || '') + this.token.value\n            }\n\n            const tempIdx = this.activeTokenId\n\n            do {\n                this.nextToken = this.tokens[this.activeTokenId]\n                this.activeTokenId++\n            } while (\n                (this.nextToken.key == this.settings.keys['_whsp'] || this.nextToken.isRemark()) &&\n                !this.isFinished()\n            )\n\n            this.activeTokenId = tempIdx\n            if (this.nextToken == undefined) break\n        } while (\n            (this.token.key == this.settings.keys['_whsp'] || this.token.isRemark()) &&\n            !this.isFinished()\n        )\n    }\n\n    unexpectedToken(what: string) {\n        throw Error(\n            `Unexpected token '${this.token.value}' at ${this.posToString()}. \\nExpected: ${what}.`,\n        )\n    }\n\n    eatGivenType(key: string) {\n        this.advance()\n\n        if (this.token.key !== key) {\n            this.unexpectedToken(key)\n        }\n    }\n\n    eatIdentifier() {\n        this.eatGivenType('identifier')\n        return this.token\n    }\n\n    eatValue(what: string) {\n        this.advance()\n\n        if (this.token.value !== what) {\n            this.unexpectedToken(what)\n        }\n    }\n\n    eatAnyOfList(list: string[]) {\n        this.advance()\n\n        if (list.indexOf(this.token.value) == -1 && list.indexOf(this.token.key) == -1) {\n            this.unexpectedToken(list.toString())\n        }\n    }\n\n    eatMany(whatsExpr: string): Record<string, Token> {\n        const returnTokens: Record<string, any> = {}\n        const rxExpr =\n            /([{]{2}(?<inputType>\\w+)\\s+(?<inputName>\\w+)[}]{2})|(?<const>\\S+)|(?<whitespace>\\s+)/gm\n\n        let match: RegExpMatchArray | null = null\n\n        while ((match = rxExpr.exec(whatsExpr)) !== null) {\n            if (match.groups === undefined) continue\n\n            if (match.groups.const !== undefined) {\n                this.eatValue(match.groups.const)\n            } else if (match.groups.inputType !== undefined) {\n                this.eatGivenType(match.groups.inputType)\n                returnTokens[match.groups.inputName as keyof typeof returnTokens] = this.token\n            }\n\n            if (this.isFinished()) {\n                throw Error(`Unfinished expression, expected ${whatsExpr}`)\n            }\n        }\n\n        return returnTokens\n    }\n\n    parseVarDeclaration() {\n        const varName = this.eatIdentifier().value\n        this.eatValue(':')\n        const varType = this.eatIdentifier().value\n\n        this.params['vars'][varName] = varType\n    }\n\n    parseClassConst() {\n        this.parseConst()\n    }\n\n    parseParams() {\n        let paramName = ''\n        let paramType = ''\n        const params: Record<string, any> = {}\n\n        while (true) {\n            this.eatAnyOfList(['identifier', ')'])\n\n            if (this.token.value == ')') {\n                break\n            }\n\n            paramName = this.token.value\n            paramType = 'any'\n            this.eatAnyOfList([':', ',', ')'])\n\n            if (this.token.value == ':') {\n                paramType = this.eatIdentifier().value\n                this.eatAnyOfList([',', ')'])\n            }\n\n            params[paramName] = paramType\n            if (this.token.value == ')') break\n        }\n\n        return params\n    }\n\n    parseExpression() {\n        this.startTag('expression', '')\n\n        while (true) {\n            this.advance()\n\n            // ( - ~\n            if (this.token.isUnaryOperation()) {\n                this.advance()\n            }\n\n            if (this.token.isNumber()) {\n                null // eslint-disable-line @typescript-eslint/no-unused-expressions\n            } else if (this.token.isString()) {\n                null // eslint-disable-line @typescript-eslint/no-unused-expressions\n            } else {\n                break\n            }\n\n            if (this.nextToken.isBinaryOperation()) {\n                this.advance()\n            }\n        }\n        this.endTag()\n    }\n\n    parseDict() {\n        this.eatValue('{')\n        while (this.token.value != '}') {\n            this.advance()\n        }\n    }\n\n    parseList() {\n        this.eatValue('[')\n        let brackets = 1\n\n        while (brackets != 0) {\n            this.advance()\n\n            if (this.token.value == '[') brackets++\n            if (this.token.value == ']') brackets--\n        }\n    }\n\n    parseConst() {\n        const constName = this.eatIdentifier().value\n        this.eatValue('=')\n\n        this.startTag('const', constName)\n\n        if (this.nextToken.value == '{') {\n            this.parseDict()\n        } else if (this.nextToken.value == '[') {\n            this.parseList()\n        } else {\n            this.parseExpression()\n        }\n\n        this.endTag()\n    }\n\n    parseBlock() {\n        this.startTag('block', '')\n        while (true) {\n            const savedPos = this.activeTokenId\n            this.advance()\n            if (this.token.value == '}') {\n                this.activeTokenId = savedPos\n                break\n            }\n\n            if (this.token.key == 'keyword') {\n                switch (this.token.value) {\n                    case 'const':\n                        this.parseConst()\n                }\n            }\n        }\n        this.endTag()\n    }\n\n    parseMethod() {\n        const identifier = this.eatIdentifier().value\n\n        this.startTag('method', identifier)\n\n        this.params['method'] = identifier\n\n        this.eatValue('(')\n        this.parseParams()\n\n        this.eatValue('{')\n        this.parseBlock()\n        this.eatValue('}')\n\n        this.endTag()\n    }\n\n    parseMethods() {\n        while (true) {\n            this.parseMethod()\n\n            if (this.nextToken.value == '}') break\n        }\n    }\n    parseClass() {\n        const identifiers = this.eatMany('class {{identifier classname}} extends GolfClass {')\n        const className = identifiers.classname.value\n        this.params['class'] = className\n\n        this.startTag('class', className)\n\n        while (true) {\n            const savePos = this.activeTokenId\n            this.advance()\n            this.activeTokenId = savePos\n\n            if (this.token.value == '}') break\n\n            switch (this.nextToken.value) {\n                case ':':\n                    this.parseVarDeclaration()\n                    break\n\n                case '=':\n                    this.parseClassConst()\n                    break\n\n                case '(':\n                    this.parseMethod()\n                    break\n            }\n        }\n\n        this.eatValue('}')\n        this.endTag()\n    }\n}\n","/**\n * Settings for the parser\n *\n * posToStringFn: function converting a character index position to human readable form (e.g. Tokenizer.posToString)\n *\n */\nexport class ParserSettings {\n    posToStringFn: (pos: number) => string\n    keys: Record<string, string>\n\n    static defaultKeys = {\n        _whsp: 'whiteSpc',\n        _docstr: 'docstr',\n    }\n\n    constructor(settings: Partial<ParserSettings>) {\n        this.posToStringFn = settings.posToStringFn || String\n        this.keys = settings.keys || ParserSettings.defaultKeys\n    }\n}\n","import { Parser } from '../parser'\nimport { ParserSettings } from '../parser-settings'\n\nexport class GBParser extends Parser {\n    constructor() {\n        const parserSettings = new ParserSettings({})\n        super(parserSettings)\n    }\n}\n","import { LanguageProps } from '../language-model'\n\nimport { GBDecoder } from './gb-decoder'\nimport { GBEncoder } from './gb-encoder'\nimport { GBParser } from './gb-parser'\nimport { GBLanguagePreprocessor } from './gb-preprocessor'\nimport { GBPrettifier } from './gb-prettifier'\nimport { GBTokenizer } from './gb-tokenizer'\n\nexport const GBModel: LanguageProps = {\n    Tokenizer: GBTokenizer,\n    Prettifier: GBPrettifier,\n    Parser: GBParser,\n    Encoder: GBEncoder,\n    Decoder: GBDecoder,\n    Preprocessor: GBLanguagePreprocessor,\n}\n","export class V2 {\n    static BASIC_TOKENS: Record<number, string> = {\n        128: 'end',\n        129: 'for',\n        130: 'next',\n        131: 'data',\n        132: 'input#',\n        133: 'input',\n        134: 'dim',\n        135: 'read',\n        136: 'let',\n        137: 'goto',\n        138: 'run',\n        139: 'if',\n        140: 'restore',\n        141: 'gosub',\n        142: 'return',\n        143: 'rem',\n        144: 'stop',\n        145: 'on',\n        146: 'wait',\n        147: 'load',\n        148: 'save',\n        149: 'verify',\n        150: 'def',\n        151: 'poke',\n        152: 'print#',\n        153: 'print',\n        154: 'cont',\n        155: 'list',\n        156: 'clr',\n        157: 'cmd',\n        158: 'sys',\n        159: 'open',\n        160: 'close',\n        161: 'get',\n        162: 'new',\n        163: 'tab(',\n        164: 'to',\n        165: 'fn',\n        166: 'spc(',\n        167: 'then',\n        168: 'not',\n        169: 'step',\n        170: '+',\n        171: '-',\n        172: '*',\n        173: '/',\n        174: '^',\n        175: 'and',\n        176: 'or',\n        177: '>',\n        178: '=',\n        179: '<',\n        180: 'sgn',\n        181: 'int',\n        182: 'abs',\n        183: 'usr',\n        184: 'fre',\n        185: 'pos',\n        186: 'sqr',\n        187: 'rnd',\n        188: 'log',\n        189: 'exp',\n        190: 'cos',\n        191: 'sin',\n        192: 'tan',\n        193: 'atn',\n        194: 'peek',\n        195: 'len',\n        196: 'str$',\n        197: 'val',\n        198: 'asc',\n        199: 'chr$',\n        200: 'left$',\n        201: 'right$',\n        202: 'mid$',\n        203: 'go',\n        255: 'pi',\n    }\n\n    static SCREEN_COMMANDS: Record<number, string> = {\n        0: 'null',\n        1: 'ct_a',\n        2: 'ct_b',\n        3: 'ct_c',\n        4: 'ct_d',\n        5: 'white',\n        6: 'ct_f',\n        7: 'ct_g',\n        8: 'ct_h',\n        9: 'ct_i',\n        10: 'ct_j',\n        11: 'ct_k',\n        12: 'ct_l',\n        13: 'return',\n        14: 'ct_n',\n        15: 'ct_o',\n        16: 'ct_p',\n        17: 'down',\n        18: 'reverse_on',\n        19: 'home',\n        20: 'delete',\n        21: 'ct_u',\n        22: 'ct_v',\n        23: 'ct_w',\n        24: 'ct_x',\n        25: 'ct_y',\n        26: 'ct_z',\n        28: 'red',\n        29: 'right',\n        30: 'green',\n        31: 'blue',\n        32: 'space',\n        92: 'pound',\n        95: 'arrow_left',\n        129: 'orange',\n        133: 'f1',\n        134: 'f3',\n        135: 'f5',\n        136: 'f7',\n        137: 'f2',\n        138: 'f4',\n        139: 'f6',\n        140: 'f8',\n        144: 'black',\n        145: 'up',\n        146: 'reverse_off',\n        147: 'clear',\n        149: 'brown',\n        150: 'pink',\n        151: 'dark_gray',\n        152: 'gray',\n        153: 'light_green',\n        154: 'light_blue',\n        155: 'light_gray',\n        156: 'purple',\n        157: 'left',\n        158: 'yellow',\n        159: 'cyan',\n        160: 'sh_space',\n        161: 'cm_k',\n        162: 'cm_i',\n        163: 'cm_t',\n        164: 'cm_@',\n        165: 'cm_g',\n        166: 'cm_+',\n        167: 'cm_m',\n        168: 'cm_pound',\n        169: 'sh_pound',\n        170: 'cm_n',\n        171: 'cm_q',\n        172: 'cm_d',\n        173: 'cm_z',\n        174: 'cm_s',\n        175: 'cm_p',\n        176: 'cm_a',\n        177: 'cm_e',\n        178: 'cm_r',\n        179: 'cm_w',\n        180: 'cm_h',\n        181: 'cm_j',\n        182: 'cm_l',\n        183: 'cm_y',\n        184: 'cm_u',\n        185: 'cm_o',\n        186: 'sh_@',\n        187: 'cm_f',\n        188: 'cm_c',\n        189: 'cm_x',\n        190: 'cm_v',\n        191: 'cm_b',\n        192: 'sh_asterisk',\n        219: 'sh_+',\n        220: 'cm_-',\n        221: 'sh_-',\n        223: 'cm_asterisk',\n        255: 'pi',\n    }\n\n    static readonly CTT_COMMAND_TOKENS: Record<number, string> = V2.BASIC_TOKENS\n    static readonly TTC_COMMAND_TOKENS: Record<string, number> = {\n        end: 128,\n        for: 129,\n        next: 130,\n        data: 131,\n        'input#': 132,\n        input: 133,\n        dim: 134,\n        read: 135,\n        let: 136,\n        goto: 137,\n        run: 138,\n        if: 139,\n        restore: 140,\n        gosub: 141,\n        return: 142,\n        rem: 143,\n        stop: 144,\n        on: 145,\n        wait: 146,\n        load: 147,\n        save: 148,\n        verify: 149,\n        def: 150,\n        poke: 151,\n        'print#': 152,\n        print: 153,\n        cont: 154,\n        list: 155,\n        clr: 156,\n        cmd: 157,\n        sys: 158,\n        open: 159,\n        close: 160,\n        get: 161,\n        new: 162,\n        'tab(': 163,\n        to: 164,\n        fn: 165,\n        'spc(': 166,\n        then: 167,\n        not: 168,\n        step: 169,\n        '+': 170,\n        '-': 171,\n        '*': 172,\n        '/': 173,\n        '^': 174,\n        and: 175,\n        or: 176,\n        '>': 177,\n        '=': 178,\n        '<': 179,\n        sgn: 180,\n        int: 181,\n        abs: 182,\n        usr: 183,\n        fre: 184,\n        pos: 185,\n        sqr: 186,\n        rnd: 187,\n        log: 188,\n        exp: 189,\n        cos: 190,\n        sin: 191,\n        tan: 192,\n        atn: 193,\n        peek: 194,\n        len: 195,\n        str$: 196,\n        val: 197,\n        asc: 198,\n        chr$: 199,\n        left$: 200,\n        right$: 201,\n        mid$: 202,\n        go: 203,\n        pi: 255,\n    }\n\n    static readonly CTT_SCREEN_TOKENS: Record<number, string> = V2.SCREEN_COMMANDS\n    static readonly TTC_SCREEN_TOKENS: Record<string, number> = {\n        null: 0,\n        ct_a: 1,\n        ct_b: 2,\n        ct_c: 3,\n        ct_d: 4,\n        white: 5,\n        ct_f: 6,\n        ct_g: 7,\n        ct_h: 8,\n        ct_i: 9,\n        ct_j: 10,\n        ct_k: 11,\n        ct_l: 12,\n        return: 13,\n        ct_n: 14,\n        ct_o: 15,\n        ct_p: 16,\n        down: 17,\n        reverse_on: 18,\n        home: 19,\n        delete: 20,\n        ct_u: 21,\n        ct_v: 22,\n        ct_w: 23,\n        ct_x: 24,\n        ct_y: 25,\n        ct_z: 26,\n        red: 28,\n        right: 29,\n        green: 30,\n        blue: 31,\n        space: 32,\n        pound: 92,\n        arrow_left: 95,\n        orange: 129,\n        f1: 133,\n        f3: 134,\n        f5: 135,\n        f7: 136,\n        f2: 137,\n        f4: 138,\n        f6: 139,\n        f8: 140,\n        black: 144,\n        up: 145,\n        reverse_off: 146,\n        clear: 147,\n        brown: 149,\n        pink: 150,\n        dark_gray: 151,\n        gray: 152,\n        light_green: 153,\n        light_blue: 154,\n        light_gray: 155,\n        purple: 156,\n        left: 157,\n        yellow: 158,\n        cyan: 159,\n        sh_space: 160,\n        cm_k: 161,\n        cm_i: 162,\n        cm_t: 163,\n        'cm_@': 164,\n        cm_g: 165,\n        'cm_+': 166,\n        cm_m: 167,\n        cm_pound: 168,\n        sh_pound: 169,\n        cm_n: 170,\n        cm_q: 171,\n        cm_d: 172,\n        cm_z: 173,\n        cm_s: 174,\n        cm_p: 175,\n        cm_a: 176,\n        cm_e: 177,\n        cm_r: 178,\n        cm_w: 179,\n        cm_h: 180,\n        cm_j: 181,\n        cm_l: 182,\n        cm_y: 183,\n        cm_u: 184,\n        cm_o: 185,\n        'sh_@': 186,\n        cm_f: 187,\n        cm_c: 188,\n        cm_x: 189,\n        cm_v: 190,\n        cm_b: 191,\n        sh_asterisk: 192,\n        'sh_+': 219,\n        'cm_-': 220,\n        'sh_-': 221,\n        cm_asterisk: 223,\n        pi: 255,\n    }\n\n    static readonly TTC_STRING_TOKENS: Record<string, number> = V2.TTC_SCREEN_TOKENS\n}\n","import { LanguageDecoder, DECODER_SCOPE } from '../language-decoder'\nimport { TokenArray } from '../token-array'\n\nimport { C64Chr } from './c64-chr'\nimport { V2 } from './v2-consts'\n\nexport class V2Decoder implements LanguageDecoder {\n    static getTokensFromMemory(data: number[], start = 0x801): TokenArray {\n        const getWord = function (lo: number, hi: number): number {\n            return lo + hi * 0x100\n        }\n\n        const tokens: TokenArray = []\n\n        let idx = 0\n        let nextAddr = start\n\n        while (idx < data.length) {\n            if (nextAddr < idx + start || nextAddr < start || nextAddr > start + data.length) {\n                console.log(`Invalid address ${nextAddr}`)\n                break\n            }\n\n            idx = nextAddr - start\n\n            nextAddr = getWord(data[idx], data[idx + 1])\n            if (nextAddr == 0) break\n\n            const line = getWord(data[idx + 2], data[idx + 3])\n            tokens.push({ key: 'label', value: line.toString(10), pos: idx + start })\n\n            idx += 4\n\n            let scope: DECODER_SCOPE\n            scope = DECODER_SCOPE.scopeCommand\n\n            const item = { key: 'error', value: 'error', escapedMode: '', escapedValue: '' }\n            let byte: number = 0\n\n            function setCommandFunction(item: Record<string, string>) {\n                if (byte >= 128) {\n                    const text = V2.CTT_COMMAND_TOKENS[byte]\n\n                    if (!text) return\n\n                    item.key = byte > 162 ? 'func' : 'command'\n                    item.value = text\n                }\n\n                if (byte >= 65 && byte <= 90) {\n                    item.key = 'identifier'\n                    item.value = item.escapedValue\n                }\n\n                if (byte == 32) {\n                    item.key = 'whiteSpc'\n                    item.value = item.escapedValue\n                }\n            }\n\n            while (idx + start < nextAddr) {\n                byte = data[idx]\n\n                if (byte == 0) {\n                    break\n                }\n\n                item.value = 'error'\n                item.key = 'error'\n                ;[item.escapedMode, item.escapedValue] = C64Chr.petsciiCodeToEscaped(byte)\n\n                switch (scope) {\n                    case DECODER_SCOPE.scopeCommand:\n                        setCommandFunction(item)\n\n                        scope = DECODER_SCOPE.scopeArgs\n                        if (item.value == 'rem') scope = DECODER_SCOPE.scopeRem\n                        break\n\n                    case DECODER_SCOPE.scopeRem:\n                        item.key = 'rem'\n                        item.value = item.escapedValue\n                        break\n\n                    case DECODER_SCOPE.scopeString:\n                        if (item.escapedValue == '\"') {\n                            scope = DECODER_SCOPE.scopeArgs\n                            item.key = 'other'\n                        } else {\n                            item.key = 'strDQuote'\n                        }\n\n                        if (item.escapedMode == 'code') {\n                            item.value = V2.CTT_SCREEN_TOKENS[byte]\n                                ? `{${V2.CTT_SCREEN_TOKENS[byte]}}`\n                                : `{${item.escapedValue}}`\n                        } else {\n                            item.value = item.escapedValue\n                        }\n                        break\n                    case DECODER_SCOPE.scopeArgs:\n                        item.value = item.escapedValue\n                        item.key = 'other'\n\n                        setCommandFunction(item)\n\n                        if (item.value == '\"') {\n                            scope = DECODER_SCOPE.scopeString\n                        } else if (item.value == ':') {\n                            scope = DECODER_SCOPE.scopeCommand\n                        } else if ((item.value >= '0' && item.value <= '9') || item.value == '.') {\n                            item.key = 'floatNum'\n                        }\n                        break\n                }\n\n                tokens.push({ key: item.key, value: item.value, pos: idx + start })\n                idx++\n            }\n            tokens.push({ key: 'newLines', value: '\\n', pos: idx + start })\n        }\n\n        return tokens\n        /*\n            let token = -1\n            let escaped\n            let isString = false\n            let isRem = false\n            let escapedArray = []\n            let actCommand = \"\"\n\n            while (prgCode[i] != 0) {\n\n                if (i > prgCode.length) break\n\n                token = prgCode[i]\n                let [escapedMode, escapedValue] = petsciiCodeToEscaped(token)\n\n                let tokenValue = \"?\"\n                let tokenType = \"ERR\"\n\n                if (token == 34) {\n                    isString = !isString\n                    tokenValue = '\"'\n                    tokenType = 'STR'\n                }\n\n                if (isRem) {\n                    tokenValue = escapedValue\n                    tokenType = 'REM'\n                }\n\n                else if (token in BASIC_TOKENS && !isString) {\n                    tokenValue = BASIC_TOKENS[token]\n                    tokenType = (token <= 162) ? 'CMD' : 'FUNC'\n\n                    if (tokenType == 'CMD') {\n                        actCommand = tokenValue\n                    }\n\n                    if (token == basicTokenReversed['rem']) {\n                        tokenType = 'REM'\n                        tokenValue = \"// \"\n                        isRem = true\n                    }\n\n                    else if (tokenValue.length == 1) tokenType = 'OTHER'\n\n                } else if (isString || token == 34){\n                    tokenType = 'STR'\n\n                    if (escapedMode == 'code')  {\n                        if (SCREEN_COMMANDS[escapedValue]) {\n                            escapedArray.push(SCREEN_COMMANDS[escapedValue])\n                        } else {\n                            escapedArray.push(escapedValue.toHex(2))\n                        }\n\n                    } else {\n                        if (escapedArray.length) {\n                            const repArr = arrayToRepeatCount(escapedArray)\n                            tokenValue = repArr.map( (v, i, a) => v[0] + (v[1] > 1 ? \"*\" + v[1] : ''), '').join(' ')\n\n                            // ToDo: code is one token instead of array!!!!\n                            td.addToken(new Token({type: 'SPEC', repr: '{'+tokenValue+'}', address: i+offset, code: token}))\n                            escapedArray = []\n                        }\n\n                        tokenValue = escapedValue\n                    }\n                } else {\n                    tokenType = 'VAR'\n                    tokenValue = escapedValue\n\n                    if ((escapedValue >='0' && escapedValue <= '9') || escapedValue == '.') {\n                        tokenType = 'NUM'\n                    }\n                    else if (escapedValue == ',' && actCommand == 'next') {\n                        td.addToken(new Token({type: 'SEP', repr: ':', address: i+offset, code: token}))\n                        tokenType = 'CMD'\n                        tokenValue = 'next'\n                    }\n\n                    else if (',;()'.indexOf(escapedValue) >= 0) {\n                        tokenType = 'OTHER'\n                    }\n                    else if (escapedValue == ':') {\n                        tokenType = 'SEP'\n                        actCommand = ''\n                    }\n                    else if (escapedValue == ' ') {\n                        tokenType = 'SPC'\n                    }\n                    else if (escapedMode == 'code')  {\n                        tokenValue = \"?\"\n                        tokenType = \"ERR\"\n                    }\n                }\n\n                if (!escapedArray.length) {\n                    td.addToken({type: tokenType, repr: tokenValue, address: i+offset, code: token})\n                }\n\n                i += 1\n            }\n\n            td.addToken({type: \"EOL\", repr: \"\"})\n            i = nextAddr - offset\n\n            if (i+offset in tokenizedAddresses) {\n                stat = \"Circular reference\"\n                break\n            }\n\n            if ((nextAddr > offset+prgCode.length) || (nextAddr <= offset)) {\n                stat = \"Memory address outside program limits\"\n                break\n            }\n\n        }\n\n        td.setStatus(stat)\n        return td\n        */\n    }\n\n    static tokenArrayToRepr(tokens: TokenArray): string {\n        let text = ''\n        tokens.forEach((token) => {\n            text += token.value\n        })\n        return text\n    }\n}\n","import { Prettifier } from '../prettifier'\nimport { Token } from '../token'\nimport { TokenArray } from '../token-array'\n\nexport class V2Prettifier extends Prettifier {\n    static PRETTIFY_REPL: Record<string, string> = {\n        '=': ' = ',\n        '+': ' + ',\n        '-': ' - ',\n        '*': ' * ',\n        '/': ' / ',\n        ',': ', ',\n        to: ' to ',\n        step: ' step ',\n        and: ' and ',\n        or: ' or ',\n        fn: 'fn ',\n        then: ' then ',\n    }\n\n    static prettifyToken(type: string, category: string, value: string): string {\n        if (type !== 'func' && type !== 'command' && type !== 'other') return value\n\n        if (type == 'command') return value + ' '\n\n        return V2Prettifier.PRETTIFY_REPL[value] || value\n    }\n\n    static getIndentOffset(_type: string, _value: string): [number, number] {\n        return [0, 0]\n    }\n\n    static getNewLineCountFunction(\n        token: Token,\n        _array: TokenArray,\n        _idx: number,\n    ): [Token | null, number] {\n        if (token.key !== 'newLines') return [token, 0]\n\n        return [null, token.value.match(/\\r\\n|\\n|\\r/g)?.length || 0]\n    }\n}\n\nexport class V2PrettifierOneCommand extends V2Prettifier {\n    static getNewLineCountFunction(\n        token: Token,\n        _array: TokenArray,\n        _idx: number,\n    ): [Token | null, number] {\n        if (token.key !== 'whiteSpc' && token.key !== 'commandSep') return [token, 0]\n\n        return [null, token.value.match(/\\r\\n|\\n|\\r|:/g)?.length || 0]\n    }\n}\n","import { TokenBuilderItem, Tokenizer, TokenizerDefinition } from '../tokenizer'\nimport { TokenizerSettings } from '../tokenizer-settings'\n\nimport { V2Decoder } from './v2-decoder'\nimport { V2Prettifier } from './v2-prettifier'\n\nexport class V2Tokenizer extends Tokenizer {\n    constructor(_dummySettings: TokenizerSettings = <TokenizerSettings>{}) {\n        const special: TokenizerDefinition = {\n            v2Identifier: [\n                8000,\n                String.raw`  (?<identifier>[\\w]{1,2})      // First max 2 chars\n                                            (?<idExtra>[\\w]*)             // Remaining are not used\n                                            (?<idType>[$%]?)              // Type declaration: $ or %\n                                            `,\n            ],\n\n            v2Label: [2000, String.raw`^(?<whiteSpc3>\\s*)(?<label>[\\d]+)`],\n            v2Command: [\n                6000,\n                String.raw`(?<command>end|for|next|data|input#|input|dim|read|let|goto|run|if|restore|gosub|return|rem|stop|on|wait|load|save|verify|def|poke|print#|print|cont|list|clr|cmd|sys|open|close|get|new)`,\n            ],\n            v2Function: [\n                6100,\n                String.raw`(?<identifier2>[\\w]{0,2})?(?<func>tab\\(|to|fn|spc\\(|then|not|step|and|or|sgn|int|abs|usr|fre|pos|sqr|rnd|log|exp|cos|sin|tan|atn|peek|len|str\\$|val|asc|chr\\$|left\\$|right\\$|mid\\$)`,\n            ],\n            V2Operator: [6200, String.raw`(?<operator>[+\\-*/^>=<])`],\n            v2Sep: [7000, String.raw`(?<commandSep>[:])`],\n            v2Rem: [1000, String.raw`(?<commandRem>rem)(?<rem>.*$)`],\n            newLines: [3050, String.raw`(?<newLines>(\\r\\n|\\n|\\r)+)`],\n            whiteSpace: [3100, String.raw`(?<whiteSpc>[\\t \\u00a0]+)`],\n        }\n\n        const rx = Tokenizer.buildRxString(\n            [\n                TokenBuilderItem.numInt,\n                TokenBuilderItem.numFloat,\n                TokenBuilderItem.strDQuote,\n                'v2Identifier',\n                'v2Label',\n                'V2Operator',\n                'v2Command',\n                'v2Function',\n                'newLines',\n                'v2Sep',\n                'v2Rem',\n                'whiteSpace',\n            ],\n            special,\n        )\n\n        const mapper = {\n            // 'SYS': 'color:#d8e;font-weight:600',\n            // 'ERR': 'color:red; text-decoration-line: underline; text-decoration-style: wavy; text-decoration-color: red',\n            // 'SPEC': 'color:#ba8;font-style:italic;font-weight:500',\n\n            command: 'CMD',\n            commandRem: 'CMD',\n            func: 'FUNC',\n            strDQuote: 'STR',\n            label: 'LABEL',\n            floatNum: 'NUM',\n            intNum: 'NUM',\n\n            identifier: 'VAR',\n            identifier2: 'VAR',\n            idExtra: 'EXTRA',\n            idType: 'FUNC',\n\n            commandSep: 'SEP',\n            whiteSpc: 'SPC',\n            rem: 'REM',\n            other: 'OTHER',\n        }\n\n        const settings = new TokenizerSettings({\n            rxPattern: rx,\n            mapper,\n            htmlClassPrefix: 'editor-style-',\n            PrettifierClass: V2Prettifier,\n        })\n\n        super(settings)\n    }\n\n    getTokensFromMemory(memory: number[]) {\n        const rawTokens = V2Decoder.getTokensFromMemory(memory)\n        this.reset()\n\n        rawTokens.forEach((token) => {\n            this.addToken(token.key, String(token.value), token.pos)\n        })\n\n        // console.log(this.tokenizer.tokens)\n    }\n\n    tokenizeStr(text: string) {\n        this.tokenizeString(text)\n    }\n}\n","import { LanguageEncoder } from '../language-encoder'\nimport { StringTokenizer } from '../string-tokenizer'\nimport { Token } from '../token'\nimport { TokenArray } from '../token-array'\n\nimport { C64Chr } from './c64-chr'\nimport { V2 } from './v2-consts'\nimport { V2Tokenizer } from './v2-tokenizer'\n\nexport class V2Encoder extends LanguageEncoder {\n    // static readonly RX_LEXER: RegExp = /(?<CMD>end|for|next|data|input#|input|dim|read|let|goto|run|if|restore|gosub|return|rem|stop|on|wait|load|save|verify|def|poke|print#|print|cont|list|clr|cmd|sys|open|close|get|new)|(?<FUNC>tab\\(|to|fn|spc\\(|then|not|step|\\+|-|\\*|\\/|\\^|and|or|>|=|<|sgn|int|abs|usr|fre|pos|sqr|rnd|log|exp|cos|sin|tan|atn|peek|len|str\\$|val|asc|chr\\$|left\\$|right\\$|mid\\$)|(?<STR>\\\"[^\\\"]*\\\")|(?<NUM>(\\d+[.]?\\d*)|(\\d+)|([.]\\d*))|(?<VAR>[a-z][a-z0-9]*[$%(]?)|(?<OTHER>.)/g\n\n    static encoders: Record<string, any> = {\n        idType: V2Encoder.stringEncoder,\n        STR: V2Encoder.stringEncoder,\n        NUM: V2Encoder.stringEncoder,\n        VAR: V2Encoder.stringEncoder,\n        SEP: V2Encoder.stringEncoder,\n        CMD: V2Encoder.cmdEncoder,\n        FUNC: V2Encoder.cmdEncoder,\n        operator: V2Encoder.cmdEncoder,\n        OTHER: V2Encoder.stringEncoder,\n    }\n\n    static stringEncoder(token: Token): number[] {\n        if (token.key == 'other' && token.value == '?') return [V2.TTC_COMMAND_TOKENS['print']]\n\n        const props = {\n            tokens: V2.TTC_STRING_TOKENS,\n            normalConverter: C64Chr.textToPetscii,\n        }\n        const { byteArray, status, _invalidCodes } = StringTokenizer.convertStringToBytes(\n            token.repr,\n            props,\n        )\n        /* const bytes = token.repr.split('').map( (ch: string) => {\n            return textToPetscii(ch)\n        }) */\n\n        if (status !== 'OK') console.log(status)\n\n        return byteArray\n    }\n\n    static cmdEncoder(token: Token) {\n        return [V2.TTC_COMMAND_TOKENS[token.repr]]\n    }\n\n    static encodeTextAsBytes(text: string): number[] {\n        const tokenizer = new V2Tokenizer()\n        tokenizer.tokenizeString(text)\n        return V2Encoder.encodeTokens(tokenizer.tokens)\n    }\n\n    static encodeTokens(array: TokenArray): number[] {\n        let address = 0x801\n        const lines: any[] = []\n\n        const lineData = { nextAddr: 0, line: null as unknown as number, data: [] as number[] }\n\n        function closeLast() {\n            if (lineData.data.length > 0) {\n                address += lineData.data.length + 5\n                lineData.nextAddr = address\n\n                const lineDataCopy = Object.assign({}, lineData)\n                lines.push(lineDataCopy)\n\n                lineData.data = []\n                lineData.nextAddr = 0\n            }\n        }\n\n        array.forEach((token: Token) => {\n            if (token.category == 'LABEL') {\n                closeLast()\n\n                const lineVal = parseInt(token.value, 10)\n                lineData.line = lineVal\n\n                return\n            }\n\n            const encoderFunction =\n                V2Encoder.encoders[token.key] || V2Encoder.encoders[token.category]\n            if (encoderFunction) {\n                const data = encoderFunction(token)\n                lineData.data.push(...data)\n            }\n        })\n        closeLast()\n\n        const finalBytes: number[] = []\n\n        lines.forEach((line) => {\n            finalBytes.push(line.nextAddr & 0xff, line.nextAddr >> 8)\n            finalBytes.push(line.line & 0xff, line.line >> 8)\n            finalBytes.push(...line.data, 0)\n        })\n\n        finalBytes.push(0, 0)\n\n        return finalBytes\n    }\n\n    /*\n    deployCode(data: number[], state) {\n        const start = 0x801\n        const memData = { start, data }\n\n        app.emulator.setDataInRam(memData)\n        app.emulator.onLoaded(memData);\n\n        const memEnd = start + data.length + 5;\n\n        [0x2e, 0x30, 0x32].forEach(changeAddr => {\n            state.globalState.emulator.bus.write(changeAddr, (memEnd >> 8))\n            state.globalState.emulator.bus.write(changeAddr - 1, memEnd & 0xff)\n        })\n    }\n    */\n}\n","import { Parser } from '../parser'\nimport { ParserSettings } from '../parser-settings'\n\nexport class V2Parser extends Parser {\n    constructor() {\n        const parserSettings = new ParserSettings({})\n        super(parserSettings)\n    }\n}\n","import { LanguageProps } from '../language-model'\nimport { LanguagePreprocessor } from '../language-preprocessor'\n\nimport { V2Decoder } from './v2-decoder'\nimport { V2Encoder } from './v2-encoder'\nimport { V2Parser } from './v2-parser'\nimport { V2Prettifier } from './v2-prettifier'\nimport { V2Tokenizer } from './v2-tokenizer'\n\nexport const V2Model: LanguageProps = {\n    Tokenizer: V2Tokenizer,\n    Prettifier: V2Prettifier,\n    Parser: V2Parser,\n    Encoder: V2Encoder,\n    Decoder: V2Decoder,\n    // TODO: replace with a proper preprocessor\n    Preprocessor: LanguagePreprocessor,\n}\n","import { LanguageDecoder } from './language-decoder'\nimport { LanguageEncoder } from './language-encoder'\nimport { LanguagePreprocessor } from './language-preprocessor'\nimport { GBModel } from './languages/gb-model'\nimport { V2Model } from './languages/v2-model'\nimport { Parser } from './parser'\nimport { Prettifier } from './prettifier'\nimport { Tokenizer } from './tokenizer'\n\nexport enum LANGUAGE {\n    BASIC_V2 = 'BasicV2',\n    BASIC_V2_verbose = 'BasicV2-verbose',\n    GOLFBAS_short = 'GolfBasic',\n    GOLFBAS_verbose = 'GolfBasic-verbose',\n}\n\nexport type LanguageProps = {\n    Tokenizer: typeof Tokenizer\n    Prettifier: typeof Prettifier\n    Parser: typeof Parser\n    Encoder: typeof LanguageEncoder\n    Decoder: typeof LanguageDecoder\n    Preprocessor: typeof LanguagePreprocessor\n}\n\nexport const Predefs: Record<string, LanguageProps> = {\n    [LANGUAGE.BASIC_V2]: V2Model,\n    [LANGUAGE.GOLFBAS_short]: GBModel,\n    [LANGUAGE.GOLFBAS_verbose]: GBModel,\n}\n\nexport class LanguageModel {\n    language: string\n    model: LanguageProps\n\n    constructor() {\n        this.language = 'undefined'\n        this.model = {} as unknown as LanguageProps\n        return this\n    }\n\n    usePredefinedLanguage(language: LANGUAGE) {\n        this.language = language\n        this.model = Predefs[language]\n        return this\n    }\n\n    defineLanguage(language: string) {\n        this.language = language\n        return this\n    }\n}\n","import { LanguageModel, LANGUAGE} from \"./src/\";\nimport { GBTokenizerSettings } from \"./src/languages/gb-tokenizer\";\n\ndeclare const require: any;\ndeclare const monaco: any;\n\nrequire.config({ paths: { vs: \"https://cdn.jsdelivr.net/npm/monaco-editor@0.44.0/min/vs\" } });\n\n// @ts-ignore\nimport { createJSONEditor } from \"https://cdn.jsdelivr.net/npm/vanilla-jsoneditor@latest/+esm\"\nimport { GBLanguagePreprocessor } from \"./src/languages/gb-preprocessor\";\n\nvar jsonEditor = createJSONEditor({\n  target: document.getElementById(\"tokens\"),\n  props: {\n    mode: \"table\",             // default active mode\n    modes: [\"tree\", \"table\"], // allowed modes only\n    mainMenuBar: true,\n    navigationBar: false,\n    readOnly: true,\n  }\n})\njsonEditor.update({ json: { hello: \"world\" } })\n\nrequire([\"vs/editor/editor.main\"], () => {\n  const editor = monaco.editor.create(document.getElementById(\"editor\"), {\n    value: `10 poke 53280, 2`,\n    language: \"plaintext\", // will change dynamically\n    theme: \"vs-dark\",\n    automaticLayout: true\n  });\n\n  const tokensContainer = document.getElementById(\"tokens\")!;\n  const bytecodeContainer = document.getElementById(\"bytecode\")!;\n  const langSelect = document.getElementById(\"lang\") as HTMLSelectElement;\n\n  function updateOutput(): void {\n    const code: string = editor.getValue();\n      const lang: string = langSelect.value;\n    bytecodeContainer.textContent = code // bytecode.join(\" \");\n\n    const { Encoder, Decoder, Tokenizer, Preprocessor } = new LanguageModel().usePredefinedLanguage(LANGUAGE.GOLFBAS_verbose).model\n    const preprocessor = new Preprocessor(code)\n    // preprocessor.setSettings(gbSettings)\n    preprocessor.useGlobalDirectives()\n    const gbDirectives = preprocessor.getFinalDirectives()\n\n    const gbSettings = <GBTokenizerSettings>{}\n    const tokenizer = new Tokenizer(gbSettings)\n    const _varsUsed = preprocessor.analyzeVarsFromTokenized(tokenizer.tokens)\n\n    tokenizer.tokenizeString(code);\n    const tokens = tokenizer.tokens\n    const bytecode: number[] = Encoder.encodeTokens(tokenizer.tokens, gbDirectives)\n    const transformedTokens = tokens.map((item) => {\n        return {\n          key: item.key,\n          category: item.category,\n          value: item.value,\n          pos: item.pos,\n\n        }\n    })\n\n    jsonEditor.update({ json: transformedTokens })\n  }\n\n  let typingTimer: number | undefined;\n\n  function scheduleUpdate(): void {\n    if (typingTimer) clearTimeout(typingTimer);\n    typingTimer = window.setTimeout(updateOutput, 1000); // 1s\n  }\n\n  editor.onDidChangeModelContent(scheduleUpdate);\n  updateOutput();\n\n  langSelect.addEventListener(\"change\", updateOutput);\n\n\n});\n"],"names":["DECODER_SCOPE","LanguageEncoder","_text","_token","array","directives","C64Chr","screenCode","small","petsciiCode","asciiCode","code","result","mode","val","TOKENS_BY_NAME","TOKENS_BY_CODE","COMMANDS_BY_NAME","COMMANDS_TTC","DATA_TYPES","DATA_TYPES_BY_SHORT_CODE","FONT_CMD_TTC","FUNCTIONS_BY_NAME","POSTFIX_BY_FULL_READ","GSCR_CODES","scrCodesCTT","scrTokensTTC","GSPR_CODES","TOK_PROP","GVAR_SHORT_TO_CODE_DICT","_GB","key","value","_value","bytes","x","y","pos","GB","_GBDecoder","data","start","getWord","lo","hi","tokens","idx","nextAddr","lastCommand","setCommandFunction","item","byte","text","line","scope","CTT","token","GBDecoder","_StringTokenizer","match","groups","regexpStr","flags","rx","str","props","funcs","wordLH","byteArray","num","forceWord","catcher","invalidCodes","gr","rxTotal","rawStr","lowercaseFuncs","lowercaseCalled","correctFunction","lowercaseCode","index","multi","status","statusDetails","statusFinal","convertNormal","re","_full","bracket","normal","StringTokenizer","TokenArray","TokenBuilderItem","rxTokenConsts","Tokenizer","settings","tokenizerFunction","items","extraDict","guard","rxItems","orderedList","a","b","rxRawString","_settings","_TokenClass","TokenClass","tokenValues","tokenValue","newLine","position","newToken","t","category","spanClass","repr","reprPretty","rawText","lastPos","lastLen","resultList","_k","v","c","missingValue","resultItem","lines","lineStart","lineEnd","lineData","lineEndPos","formatStr","ofs","lineStartPos","char","_field","tokenData","allFormattedHTML","allTexts","allValues","allRepr","allReprPretty","i","newLines","splittedToken","_index","addNewLines","addToken","count","getHtmlFormat","arr","rxs","addError","sliceFrom","sliceTo","miss","textUsedLength","newKey","newValue","lastValue","subKey","subValue","splitHtmlText","element","self","GBTypeCodes","NumberTokenizer","typeCodes","byteValue","numberValue","wordValue","encoderFn","defaultNumberEncoder","DEFAULT_STRING_LENGTH","InvalidVariableNameError","varName","errorSubtype","errorMessage","getSVarList","vars","acc","curr","lastGroup","prev","group","DimTokenizer","dimText","typeStr","sizeDetails","rxSizeSplit","dataLength","baseType","_dimText","isShortVarKept","errors","currentType","currentArrLength","currentVarName","currentVarNameNormalized","idxScore","isVerbose","isShortVar","isLongVar","dimData","sortedDimData","possibleVars","mappedVars","varDetails","transformedVarName","shortVarIndex","encoded","varsByType","varData","type","arr_size","encodedType","encodedTypeBytes","typeCode","orderedTypes","encodedBytesByType","encodedData","varNames","varNamesShortened","byteData","DEFAULT_STRING_TOKENIZER_PROPS","encodedValues","typeDetails","arrSize","postfix","SpecialBoolType","SpecialBool","initValue","LanguagePreprocessor","directiveRx","directivesFound","directive","invalidDirectives","directiveResult","transformedDirectives","Prettifier","_type","_category","_array","_idx","BasePrettifier","_Token","typeMapper","typeName","Token","TokenizerSettings","_GBPrettifier","GBPrettifier","orderByLen","commandRx","functionsRx","name","_code","fnProps","VerboseMode","GBTokenizer","gbSettings","verboseSettings","verboseMode","special","subFormatPatterns","mapper","memory","rawTokens","GBLanguagePreprocessor","varCount","memSettings","dimIndex","VarTokenizer","charLo","charHi","charExed","m","base","postindex","quickindex","isShort","shortVar","postfixChar","postIndexValue","quickIndexValue","existingDefinition","defaultVarEncoder","_GBEncoder","_gbSettings","_state","dimTokenizer","prefix","quoteToken","state","token_repr","convertedToken","extraZeros","preprocessor","tokenizer","gbDirectives","closeLast","lineDataCopy","encoderFunction","finalBytes","GBEncoder","Parser","tag","spaces","tempIdx","what","list","whatsExpr","returnTokens","rxExpr","varType","paramName","paramType","params","brackets","constName","savedPos","identifier","className","savePos","_ParserSettings","ParserSettings","GBParser","parserSettings","GBModel","_V2","V2","V2Decoder","_V2Prettifier","V2Prettifier","V2Tokenizer","_dummySettings","_V2Encoder","address","lineVal","V2Encoder","V2Parser","V2Model","LANGUAGE","Predefs","LanguageModel","language","jsonEditor","createJSONEditor","editor","bytecodeContainer","langSelect","updateOutput","Encoder","Decoder","Preprocessor","transformedTokens","typingTimer","scheduleUpdate"],"mappings":"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","x_google_ignoreList":[3,4,5,6,7,8,9,10,11,12,13]}